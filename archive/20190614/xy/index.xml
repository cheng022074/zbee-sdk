
<?xml?>
<classes>

    <class motify="1556513301719" signature="<boolean> src::array.remove.index(<array> data , <number> index)" entry-type="array number"  name="src::array.remove.index">
        <![CDATA[(() =>{

                

                

                

                

                function main(data , index){

        
/**
 * 
 * 根据数组下标删除对应项
 * 
 * @param {array} data 作用数组
 * 
 * @param {number} index 数组项的下标
 * 
 * @return {boolean} 如果删除成功则返回 true , 否则返回　false 
 * 
 */

if(index >= 0 && index < data.length){

    data.splice(index , 1) ;

    return true ;
}

return false ;

    }

                return function(data , index){

                    

                    

                    return main.call(this , data , index) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301715" signature="<void> src::array.remove(<array> data , <mixed> ...items)" entry-type="array mixed"  name="src::array.remove" imports="src::array.remove.index">
        <![CDATA[(() =>{

                let remove;

                let var_init_locked_1560479512699;

                

                

                function main(data , ...items){

        
/**
 * 
 * 在数组中去除项目
 * 
 * @import remove from array.remove.index
 * 
 * @param {array} data 数组
 * 
 * @param {mixed} [...items] 项目
 * 
 */

 for(let item of items){

    remove(data , data.indexOf(item)) ;
 }

    }

                return function(data , ...items){

                    
        if(!var_init_locked_1560479512699){

            remove = include('array.remove.index');

            var_init_locked_1560479512699 = true ;
        }
        

                    

                    return main.call(this , data , ...items) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301717" signature="<void> src::array.remove.all(<array> data , <mixed> item)" entry-type="array mixed"  name="src::array.remove.all" imports="src::array.remove.index src::array.remove">
        <![CDATA[(() =>{

                let remove;

                let var_init_locked_1560479512702;

                

                

                function main(data , item){

        
/**
 * 
 * 在数组中去除所有指定项目
 * 
 * @import remove from array.remove
 * 
 * @param {array} data 数组
 * 
 * @param {mixed} item 项目
 * 
 */

while(true){

    if(remove(data , item) === false){

        break ;
    }
}

    }

                return function(data , item){

                    
        if(!var_init_locked_1560479512702){

            remove = include('array.remove');

            var_init_locked_1560479512702 = true ;
        }
        

                    

                    return main.call(this , data , item) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529940" signature="<boolean> src::is.object.simple(<mixed> data)" entry-type="mixed"  name="src::is.object.simple">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为简单对象类型
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为简单对象类型则返回 true , 否则返回 false 
 * 
 */

return data instanceof Object && data.constructor === Object;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529942" signature="<boolean> src::is.type(<mixed> data , <string> type)" entry-type="mixed string"  name="src::is.type">
        <![CDATA[(() =>{

                

                

                

                

                function main(data , type){

        /**
 * 
 * 对于 typeof 的简单封装
 * 
 * @param {mixed} data 检验数据
 * 
 * @param {string} type 检验数据类型
 * 
 * @return {boolean} 如果检验数据的数据类型与检验数据类型一致，则返回 true，否则返回 false 
 * 
 */

 return typeof data === type ;

    }

                return function(data , type){

                    

                    

                    return main.call(this , data , type) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529941" signature="<boolean> src::is.string(<mixed> data)" entry-type="mixed"  name="src::is.string" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512708;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为字符串类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为字符串类型则返回 true , 否则返回 false 
 * 
 */

return isType(data , 'string') ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512708){

            isType = include('is.type');

            var_init_locked_1560479512708 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1558348019070" signature="<mixed> src::is.function(<mixed> data)" entry-type="mixed"  name="src::is.function" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512710;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为函数类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {mixed} 如果给定值为函数类型则返回 true , 否则返回 false
 * 
 */

return isType(data , 'function') && data.ZBEE_CLASS !== true;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512710){

            isType = include('is.type');

            var_init_locked_1560479512710 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529932" signature="<boolean> src::is.boolean(<mixed> data)" entry-type="mixed"  name="src::is.boolean" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512712;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为布尔类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为布尔类型则返回 true , 否则返回 false 
 * 
 */

return isType(data , 'boolean') ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512712){

            isType = include('is.type');

            var_init_locked_1560479512712 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529931" signature="<boolean> src::is.array(<mixed> data)" entry-type="mixed"  name="src::is.array" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512714;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为数组类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为数组类型则返回 true , 否则返回 false 
 * 
 */

 return Array.isArray(data) ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512714){

            isType = include('is.type');

            var_init_locked_1560479512714 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1557476977736" signature="<function> src::class.empty()"  name="src::class.empty">
        <![CDATA[(() =>{

                

                

                

                let var_once_value_1560479512716;

                function main(){

        
/**
 * 
 * 返回一个空类
 * 
 * @once
 * 
 * @return {function} 类引用 
 * 
 */

 return class {

 } ;

    }

                return function(){

                    

                    

                    
        if(var_once_value_1560479512716){

            return var_once_value_1560479512716 ;

        }
        return var_once_value_1560479512716 = main.call(this ) ;
        
                } ;

            })()]]>
    </class>

    <class motify="1556513302720" signature="<void> src::map.constructor()"  name="src::map.constructor">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 初始化 Map 对象
 * 
 */

this.map = new Map() ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302757" signature="<number> src::map.size.get()"  name="src::map.size.get">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 获得当前 Map 的键值对数量
 * 
 * @return {number} 数量 
 * 
 */

return this.map.size ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302729" signature="<object> src::map.find(<array> keys)" entry-type="array"  name="src::map.find">
        <![CDATA[(() =>{

                

                

                

                

                function main(keys){

        
/**
 * 
 * 判断指定组合键是否存在
 * 
 * @param {array} keys 组合键
 * 
 * @return {object} 返回查询结果 
 * 
 */

let me = this,
{
    map
} = me,
currentKeys = map.keys(),
{
    length
} = keys;

for(let groupKeys  of currentKeys){

   if(length === groupKeys.length){

       let isMatch = true ;

       for(let i = 0 ; i < length ; i ++){

           if(groupKeys[i] !== keys[i]){

               isMatch = false ;

               break ;
           }
       }

       if(isMatch){

           return {
               match:true,
               key:groupKeys
           } ;
       }
   }
}

return {
    match:false
} ;

    }

                return function(keys){

                    

                    

                    return main.call(this , keys) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302747" signature="<Map> src::map.set(<array> ...values)" entry-type="array"  name="src::map.set" imports="src::map.find">
        <![CDATA[(() =>{

                let find;

                let var_init_locked_1560479512730;

                let var_current_scope_1560479512730;

                

                function main(...values){

        
/**
 * 
 * 设置一个值
 * 
 * @import find from .find scoped
 * 
 * @param {array} [...values] 包含多维键，以及相应值
 * 
 * @return {Map} 返回当前对象 
 * 
 */

 let me = this,
 {
    map
 } = me,
 {
     length
 } = values;

 if(length >= 2){

    let keys = values.slice(0 , length - 1),
        value = values[length - 1],
        {
            match,
            key
        } = find(keys);

    if(match){

        map.set(key ,value) ;
    
    }else{

        map.set(keys , value) ;
    }
 }

 return me ;

    }

                return function(...values){

                    

                    
        if(!var_current_scope_1560479512730 !== this){

            find = include('src::map.find').bind(this);

            var_current_scope_1560479512730 = this ;
        }
        

                    return main.call(this , ...values) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302738" signature="<boolean> src::map.get(<array> ...keys)" entry-type="array"  name="src::map.get" imports="src::map.find">
        <![CDATA[(() =>{

                let find;

                let var_init_locked_1560479512733;

                let var_current_scope_1560479512733;

                

                function main(...keys){

        
/**
 * 
 * 判断指定组合键是否存在
 * 
 * @import find from .find scoped
 * 
 * @param {array} [...keys] 组合键
 * 
 * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false 
 * 
 */

let me = this,
{
    map
} = me ;

let {
    match,
    key
} = find(keys) ;

if(match){

    return map.get(key) ;
}

    }

                return function(...keys){

                    

                    
        if(!var_current_scope_1560479512733 !== this){

            find = include('src::map.find').bind(this);

            var_current_scope_1560479512733 = this ;
        }
        

                    return main.call(this , ...keys) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302743" signature="<boolean> src::map.has(<array> ...keys)" entry-type="array"  name="src::map.has" imports="src::map.find">
        <![CDATA[(() =>{

                let find;

                let var_init_locked_1560479512735;

                let var_current_scope_1560479512735;

                

                function main(...keys){

        
/**
 * 
 * 判断指定组合键是否存在
 * 
 * @import find from .find scoped
 * 
 * @param {array} [...keys] 组合键
 * 
 * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false 
 * 
 */

 let {
    match
 } = find(keys) ;

 return match ;

    }

                return function(...keys){

                    

                    
        if(!var_current_scope_1560479512735 !== this){

            find = include('src::map.find').bind(this);

            var_current_scope_1560479512735 = this ;
        }
        

                    return main.call(this , ...keys) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302724" signature="<boolean> src::map.delete(<array> ...keys)" entry-type="array"  name="src::map.delete" imports="src::map.find">
        <![CDATA[(() =>{

                let find;

                let var_init_locked_1560479512737;

                let var_current_scope_1560479512737;

                

                function main(...keys){

        

/**
 * 
 * 删除指定组合键
 * 
 * @import find from .find scoped
 * 
 * @param {array} [...keys] 组合键
 * 
 * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false 
 * 
 */

let me = this,
{
    map
} = me ;

let {
    match,
    key
} = find(keys) ;

if(match){

    return map.delete(key) ;
}

return false ;

    }

                return function(...keys){

                    

                    
        if(!var_current_scope_1560479512737 !== this){

            find = include('src::map.find').bind(this);

            var_current_scope_1560479512737 = this ;
        }
        

                    return main.call(this , ...keys) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302734" signature="<void> src::map.forEach(<function> fn , <mixed> scope)" entry-type="function mixed"  name="src::map.forEach">
        <![CDATA[(() =>{

                

                

                

                

                function main(fn , scope){

        
/**
 * 
 * 实现迭代
 * 
 * @param {function} fn 函数引用
 * 
 * @param {mixed} scope 函数作用域
 * 
 */

 let {
    map
 } = this ;

 map.forEach(fn , scope) ;

    }

                return function(fn , scope){

                    

                    

                    return main.call(this , fn , scope) ;
                } ;

            })()]]>
    </class>

    <class motify="1557191505875" signature="<void> src::map.clear()"  name="src::map.clear">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 清空
 * 
 */

 this.map.clear() ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1557109445628" signature="<void> src::map()"  name="src::map" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear">
        <![CDATA[(() =>{

                let extend,constructor,get_size,method_set,method_get,method_has,method_delete,method_forEach,method_clear;

                let var_init_locked_1560479512746;

                let var_class_1560479512746;

                

                return function(){

                    
        if(!var_init_locked_1560479512746){

            extend = include('class.empty')();
constructor = include('src::map.constructor');
get_size = include('src::map.size.get');
method_set = include('src::map.set');
method_get = include('src::map.get');
method_has = include('src::map.has');
method_delete = include('src::map.delete');
method_forEach = include('src::map.forEach');
method_clear = include('src::map.clear');

            var_init_locked_1560479512746 = true ;
        }
        

                    
        if(!var_class_1560479512746){

            class main {

            

            

            constructor(...args){

            

            constructor.apply(this , args) ;

        }

            set(...args){

            return method_set.apply(this , args) ;

        }
get(...args){

            return method_get.apply(this , args) ;

        }
has(...args){

            return method_has.apply(this , args) ;

        }
delete(...args){

            return method_delete.apply(this , args) ;

        }
forEach(...args){

            return method_forEach.apply(this , args) ;

        }
clear(...args){

            return method_clear.apply(this , args) ;

        }

            get size(){

                return get_size.call(this) ;
    
            }

        }

            var_class_1560479512746 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512746 ;
                }

            } ;
        }
        

                    return new var_class_1560479512746();
                } ;

            })()]]>
    </class>

    <class motify="1558404985000" signature="<void> src::mixin.observable.constructor()"  name="src::mixin.observable.constructor" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map">
        <![CDATA[(() =>{

                let createMap;

                let var_init_locked_1560479512751;

                

                

                
/**
 * 
 * 初始化观察者
 * 
 * @import createMap from map
 * 
 */

const EventEmitter = require('events') ;

function main(){

    let me = this ;

    me.emitter = new EventEmitter() ;

    me.listeners = createMap() ;

    me.cacheFireEventDataList = [] ;
}



                return function(){

                    
        if(!var_init_locked_1560479512751){

            createMap = include('map');

            var_init_locked_1560479512751 = true ;
        }
        

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1558406649686" signature="<mixed> src::mixin.observable.fire.data.last()"  name="src::mixin.observable.fire.data.last">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 获得最近的触发事件数据
 * 
 * @return {mixed} 如果有的话则返回一个参数数组，如果没有则返回 false 
 * 
 */

 let {
    cacheFireEventDataList
 } = this,
 {
    length
 } = cacheFireEventDataList;

 if(length){

    return cacheFireEventDataList[length - 1] ;
 }

 return false ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556603892887" signature="<void> src::mixin.observable.listeners.clear.all()"  name="src::mixin.observable.listeners.clear.all">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 清除所有事件监听
 * 
 */

 this.emitter.removeAllListeners() ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556603892882" signature="<void> src::mixin.observable.listeners.clear(<string> event)" entry-type="string"  name="src::mixin.observable.listeners.clear">
        <![CDATA[(() =>{

                

                

                

                

                function main(event){

        
/**
 * 
 * 清除指定事件上的所有事件监听
 * 
 * @param {string} event 事件名称
 * 
 */

this.emitter.removeAllListeners(event) ;

    }

                return function(event){

                    

                    

                    return main.call(this , event) ;
                } ;

            })()]]>
    </class>

    <class motify="1557469986815" signature="<void> src::mixin.observable.listeners.add(<object> listeners)" entry-type="object"  name="src::mixin.observable.listeners.add" imports="src::is.object.simple src::is.type src::is.function">
        <![CDATA[(() =>{

                let isObject,isFunction;

                let var_init_locked_1560479512762;

                

                

                function main(listeners){

        
/**
 * 
 * 添加一组事件监听
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.function
 * 
 * @param {object} listeners 事件监听配置
 * 
 */

let me = this,
    events = Object.keys(listeners),
    {
        scope,
        ...realListeners
    } = listeners;

listeners = realListeners ;

for(let event of events){

    let listener = listeners[event] ;

    if(isObject(listener)){

        let {
            fn,
            scope:listenerScope,
            ...options
        } = listener ;

        me.addListener(event , fn , listenerScope || scope , options) ;

    }else{

        me.addListener(event , listener , scope) ;
    }
}

    }

                return function(listeners){

                    
        if(!var_init_locked_1560479512762){

            isObject = include('is.object.simple');
isFunction = include('is.function');

            var_init_locked_1560479512762 = true ;
        }
        

                    

                    return main.call(this , listeners) ;
                } ;

            })()]]>
    </class>

    <class motify="1556603892892" signature="<void> src::mixin.observable.listeners.remove(<object> listeners)" entry-type="object"  name="src::mixin.observable.listeners.remove">
        <![CDATA[(() =>{

                

                

                

                

                function main(listeners){

        
/**
 * 
 * 去除一组事件监听
 * 
 * @param {object} listeners 事件监听
 * 
 */

let me = this,
    events = Object.keys(listeners) ;

for(let event of events){

    let listener = listeners[event] ;

    if(isObject(listener)){

        let {
            fn
        } = listener ;

        me.removeListener(event , fn) ;

    }else if(isFunction(listener)){

        me.removeListener(event , listener) ;
    }
}

    }

                return function(listeners){

                    

                    

                    return main.call(this , listeners) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529913" signature="<void> src::function.empty()"  name="src::function.empty">
        <![CDATA[(() =>{

                

                

                

                

                /**
 * 
 * 返回一个空函数
 * 
 * @scoped
 * 
 */

const emptyFn = () =>{
} ;

function main(){

    return emptyFn ;
}

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1557381709000" signature="<function> src::function.get(<string|function> fn , <mixed> scope)" entry-type="string mixed"  name="src::function.get" imports="src::is.type src::is.string src::is.function src::function.empty">
        <![CDATA[(() =>{

                let isString,isFunction,empty;

                let var_init_locked_1560479512773;

                

                

                function main(fn , scope){

        /**
 * 
 * 获得一个函数引用
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import empty from function.empty
 * 
 * @param {string | function} fn 函数描述
 * 
 * @param {mixed} [scope] 函数作用域
 * 
 * @return {function} 函数引用本身 
 * 
 */

if(isString(fn)){

    if(scope && fn in scope){

        fn = scope[fn] ;

    }else{

        fn = include(fn) ;
    }
}

if(isFunction(fn)){

    if(scope){

        return fn.bind(scope) ;
    }

    return fn ;
}

return empty() ;

    }

                return function(fn , scope){

                    
        if(!var_init_locked_1560479512773){

            isString = include('is.string');
isFunction = include('is.function');
empty = include('function.empty');

            var_init_locked_1560479512773 = true ;
        }
        

                    

                    return main.call(this , fn , scope) ;
                } ;

            })()]]>
    </class>

    <class motify="1558513515480" signature="<void> src::mixin.observable.listener.add(<string> event , <mixed> fn , <mixed> scope , {<boolean> once , <boolean> getOldFireEventData})"  name="src::mixin.observable.listener.add" imports="src::is.type src::is.string src::is.function src::function.empty src::function.get">
        <![CDATA[(() =>{

                let get;

                let var_init_locked_1560479512782;

                

                

                function main(event , fn , scope , {once , getOldFireEventData}){

        
/**
 * 
 * 添加事件监听
 * 
 * @import get from function.get
 * 
 * @param {string} event 事件名称
 * 
 * @param {mixed} fn 事件回调函数
 * 
 * @param {mixed} [scope] 事件作用域
 * 
 * @param {object} [options = {}] 配置
 * 
 * @param {boolean} [options.once = false] 是否只监听一次
 * 
 * @param {boolean} [options.getOldFireEventData] 是否获取以前的触发事件数据
 * 
 */

let me = this,
{
    emitter,
    listeners
} = me,
listener = get(fn , scope);

listeners.set(event , fn , scope , listener) ;

switch(getOldFireEventData){

    case 'last':

        let {
            lastFireEventData
        } = me ;


        if(lastFireEventData){

            listener(...lastFireEventData) ;
        }

        break ;

    case 'all':

        let {
            cacheFireEventDataList
        } = me ;

        for(let cacheFireEventData of cacheFireEventDataList){

            listener(...cacheFireEventData) ;
        }
}

if(once){
    
     emitter.once(event , listener) ;

 }else{

     emitter.addListener(event , listener) ;
}

    }

                return function(event , fn , scope , {once = false , getOldFireEventData} = {}){

                    
        if(!var_init_locked_1560479512782){

            get = include('function.get');

            var_init_locked_1560479512782 = true ;
        }
        

                    

                    return main.call(this , event , fn , scope , {once , getOldFireEventData}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556603892870" signature="<void> src::mixin.observable.listener.remove(<string> event , <function> fn , <mixed> scope)" entry-type="string function mixed"  name="src::mixin.observable.listener.remove">
        <![CDATA[(() =>{

                

                

                

                

                function main(event , fn , scope){

        
/**
 * 
 * 移除事件监听
 * 
 * @param {string} event 事件名称
 * 
 * @param {function} fn 事件回调函数
 * 
 * @param {mixed} [scope] 事件作用域
 * 
 * 
 */

let me = this,
{
    listeners,
    emitter
} = me,
listener = listeners.get(event , fn , scope) ;

if(listener){

    emitter.removeListener(event , listener) ;

    listeners.delete(event , fn , scope) ;
}

    }

                return function(event , fn , scope){

                    

                    

                    return main.call(this , event , fn , scope) ;
                } ;

            })()]]>
    </class>

    <class motify="1558401820267" signature="<boolean> src::mixin.observable.listener.has(<string> name)" entry-type="string"  name="src::mixin.observable.listener.has">
        <![CDATA[(() =>{

                

                

                

                

                function main(name){

        
/**
 * 
 * 查看指定事件名称上有无事件监听
 * 
 * @param {string} name 事件名称
 * 
 * @return {boolean} 如果事件上有监听则返回 true , 否则返回 false 
 * 
 */

 let {
    emitter
 } = this ;

 return emitter.listenerCount(name) !== 0 ;

    }

                return function(name){

                    

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1559192980734" signature="<void> src::mixin.observable.fire(<string> event , <mixed> ...args)" entry-type="string mixed"  name="src::mixin.observable.fire" imports="src::is.type src::is.array">
        <![CDATA[(() =>{

                let isArray;

                let var_init_locked_1560479512791;

                

                

                
/**
 *
 * 触发事件
 * 
 * @import is.array
 *
 * @param {string} event 事件名称
 *
 * @param {mixed} [...args] 事件参数
 *
 */

 function main(event , ...args){

    let me = this ;

    if(me.$suspendEvents === true){

        return ;
    }

    doFireBubbleEvent.call(me , event , me , ...args) ;
 }

 function doFireBubbleEvent(event , target , ...args){

    let me = this,{
        bubbleTarget,
        emitter,
        fireEventDataCacheCount = 0,
        cacheFireEventDataList
    } = me ;

    if(fireEventDataCacheCount !== 0){

        cacheFireEventDataList.push([
            target,
            ...args
        ]) ;

        let deleteCount =  cacheFireEventDataList.length - fireEventDataCacheCount;

        if(deleteCount > 0){

            cacheFireEventDataList.splice(0 , deleteCount) ;
        }
    }

    emitter.emit(event , target ,  ...args) ;

    if(bubbleTarget){

        doFireBubbleEvent.call(bubbleTarget , event , target , ...args) ;
    }
 }

                return function(event , ...args){

                    
        if(!var_init_locked_1560479512791){

            isArray = include('is.array');

            var_init_locked_1560479512791 = true ;
        }
        

                    

                    return main.call(this , event , ...args) ;
                } ;

            })()]]>
    </class>

    <class motify="1559192377737" signature="<void> src::mixin.observable.events.suspend()"  name="src::mixin.observable.events.suspend">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 恢复事件监听
 * 
 */

this.$suspendEvents = true ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559192369531" signature="<void> src::mixin.observable.events.resume()"  name="src::mixin.observable.events.resume">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 恢复事件监听
 * 
 */

 this.$suspendEvents = false ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559192268469" signature="<void> src::mixin.observable(<mixed> extend)"  name="src::mixin.observable" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume">
        <![CDATA[(() =>{

                let constructor,get_lastFireEventData,method_clearAllListeners,method_clearListeners,method_addListeners,method_removeListeners,method_addListener,method_removeListener,method_hasListener,method_fireEvent,method_suspendEvents,method_resumeEvents;

                let var_init_locked_1560479512800;

                

                

                function main(extend){

                        return class extends extend{

                            
                
                            
                
                            constructor(...args){

            super(...args) ;

            constructor.apply(this , args) ;

        }
                
                            clearAllListeners(...args){

            return method_clearAllListeners.apply(this , args) ;

        }
clearListeners(...args){

            return method_clearListeners.apply(this , args) ;

        }
addListeners(...args){

            return method_addListeners.apply(this , args) ;

        }
removeListeners(...args){

            return method_removeListeners.apply(this , args) ;

        }
addListener(...args){

            return method_addListener.apply(this , args) ;

        }
on(...args){

                return this.addListener(...args) ;
    
            }
removeListener(...args){

            return method_removeListener.apply(this , args) ;

        }
un(...args){

                return this.removeListener(...args) ;
    
            }
hasListener(...args){

            return method_hasListener.apply(this , args) ;

        }
fireEvent(...args){

            return method_fireEvent.apply(this , args) ;

        }
suspendEvents(...args){

            return method_suspendEvents.apply(this , args) ;

        }
resumeEvents(...args){

            return method_resumeEvents.apply(this , args) ;

        }
                
                            get lastFireEventData(){

                return get_lastFireEventData.call(this) ;
    
            }
                
                        }

                }

                return function(extend){

                    
        if(!var_init_locked_1560479512800){

            constructor = include('src::mixin.observable.constructor');
get_lastFireEventData = include('src::mixin.observable.fire.data.last');
method_clearAllListeners = include('src::mixin.observable.listeners.clear.all');
method_clearListeners = include('src::mixin.observable.listeners.clear');
method_addListeners = include('src::mixin.observable.listeners.add');
method_removeListeners = include('src::mixin.observable.listeners.remove');
method_addListener = include('src::mixin.observable.listener.add');
method_removeListener = include('src::mixin.observable.listener.remove');
method_hasListener = include('src::mixin.observable.listener.has');
method_fireEvent = include('src::mixin.observable.fire');
method_suspendEvents = include('src::mixin.observable.events.suspend');
method_resumeEvents = include('src::mixin.observable.events.resume');

            var_init_locked_1560479512800 = true ;
        }
        

                    

                    return main.call(this , extend) ;
                } ;

            })()]]>
    </class>

    <class motify="1560158091516" signature="<void> src::data.subscriber.constructor(<string> name , {<boolean> accumulationMode , <object> extraParams , <object> defaultParams})"  name="src::data.subscriber.constructor" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map">
        <![CDATA[(() =>{

                let createMap;

                let var_init_locked_1560479512809;

                

                

                function main(name , {accumulationMode , extraParams , defaultParams}){

        
/**
 * 
 * 初始化订阅器
 * 
 * @import createMap from map
 * 
 * @param {string} name 订阅名称
 * 
 * @param {object} config 订阅器配置
 * 
 * @param {boolean} [config.accumulationMode = false] 是否启动累积模型，当启动累积模型后则所有的接收消息都会被缓存，默认为 false
 * 
 * @param {object} [config.extraParams = {}] 附加参数
 * 
 * @param {object} [config.defaultParams = {}] 默认参数
 * 
 */

let me = this ;

me.name = name ;

me.extraParams = extraParams ;

me.defaultParams = defaultParams ;

me.accumulationMode = accumulationMode ;

me.cache = [] ;

me.bindCallbacks = createMap() ;

me.closed = true ;

    }

                return function(name , {accumulationMode = false , extraParams = {} , defaultParams = {}}){

                    
        if(!var_init_locked_1560479512809){

            createMap = include('map');

            var_init_locked_1560479512809 = true ;
        }
        

                    

                    return main.call(this , name , {accumulationMode , extraParams , defaultParams}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302675" signature="<boolean> src::is.defined(<mixed> data)" entry-type="mixed"  name="src::is.defined">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        /**
 * 
 * 判断给定数据是否定义
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果数据定义则返回 true , 否则返回 false
 * 
 */

return data !== undefined ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559716967440" signature="<void> src::data.subscriber.accept(<mixed> data)" entry-type="mixed"  name="src::data.subscriber.accept" imports="src::is.defined">
        <![CDATA[(() =>{

                let isDefined;

                let var_init_locked_1560479512817;

                

                

                function main(data){

        
/**
 * 
 * 接收数据
 * 
 * @import is.defined
 * 
 * @param {mixed} data 数据
 * 
 * 
 */

let {
    closed,
    bindCallbacks,
    accumulationMode,
    cache,
    params
} = this,
results = [];

if(closed){

    return results;
}

bindCallbacks.forEach(callback => {

    let result = callback(data , params) ;

    if(isDefined(result)){

        results.push(result) ;
    }

}) ;

if(accumulationMode === false){

    cache.length = 0 ;
}

cache.push({
    params,
    data
}) ;

return results ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512817){

            isDefined = include('is.defined');

            var_init_locked_1560479512817 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717839544" signature="<void> src::data.subscriber.bind(<fucntion> fn , <mixed> scope)" entry-type="fucntion mixed"  name="src::data.subscriber.bind" imports="src::is.type src::is.string src::is.function src::function.empty src::function.get">
        <![CDATA[(() =>{

                let get;

                let var_init_locked_1560479512823;

                

                

                function main(fn , scope){

        
/**
 * 
 * 绑定函数
 * 
 * @import get from function.get
 * 
 * @param {fucntion} fn 绑定函数
 * 
 * @param {mixed} scope 绑定函数作用域
 * 
 */

let me = this,{
    bindCallbacks,
    cache
} = me;

fn = get(fn , scope) ;

for(let {
    data,
    params
} of cache){

    fn(data , params) ;
}

bindCallbacks.set(fn , scope , fn) ;

return me;

    }

                return function(fn , scope){

                    
        if(!var_init_locked_1560479512823){

            get = include('function.get');

            var_init_locked_1560479512823 = true ;
        }
        

                    

                    return main.call(this , fn , scope) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717646420" signature="<void> src::data.subscriber.reopen()"  name="src::data.subscriber.reopen">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 重新打开订阅器
 * 
 */

let me = this,
{
    closed,
    params
} = me ;

if(!closed){

    me.close() ;

    me.open(params) ;
}

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302910" signature="<array> src::object.keys(<object> data)" entry-type="object"  name="src::object.keys" imports="src::is.object.simple">
        <![CDATA[(() =>{

                let isObject;

                let var_init_locked_1560479512831;

                

                

                /**
 * 
 * 获取对象的键值组合
 * 
 * @import isObject from is.object.simple
 * 
 * @param {object} data 对象
 * 
 * @return {array} 键值数组
 * 
 * @scoped
 * 
 */

function main(data){

    return get_keys(data) ;
}

function get_keys(data , rootKey = ''){

    let keys = Object.keys(data),
        result = [];

    for(let key of keys){

        let value = data[key] ;

        if(isObject(value)){

            result.push(...get_keys(value , `${rootKey}${key}.`)) ;
        
        }else{

            result.push(`${rootKey}${key}`) ;
        }
    }

    return result ;
}


                return function(data){

                    
        if(!var_init_locked_1560479512831){

            isObject = include('is.object.simple');

            var_init_locked_1560479512831 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529939" signature="<boolean> src::is.object(<mixed> data)" entry-type="mixed"  name="src::is.object" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512833;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为对象类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为对象类型则返回 true , 否则返回 false 
 * 
 */

return Object.prototype.toString.call(data) === '[object Object]' ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512833){

            isType = include('is.type');

            var_init_locked_1560479512833 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302906" signature="<string> src::object.key.join(<array> ...keys)" entry-type="array"  name="src::object.key.join">
        <![CDATA[(() =>{

                

                

                

                

                
/**
 * 
 * 将多个键值连接起来
 * 
 * @param {array} [...keys] 一组键值
 * 
 * @return {string} 连接后的键值 
 * 
 */

const suffixRe = /(?:^\.+)|(?:\.+$)/g ;

function main(...keys){

    let result = [] ;

    for(let key of keys){

        key = key.replace(suffixRe , '') ;

        if(key){

            result.push(key) ;
        }
    }

    return result.join('.') ;
}



                return function(...keys){

                    

                    

                    return main.call(this , ...keys) ;
                } ;

            })()]]>
    </class>

    <class motify="1557285054070" signature="<mixed> src::object.value.get(<object> data , <string> key)" entry-type="object string"  name="src::object.value.get" imports="src::is.type src::is.array src::is.object src::is.defined src::object.key.join">
        <![CDATA[(() =>{

                let isArray,isObject,isDefined,join;

                let var_init_locked_1560479512839;

                

                

                
/**
 * 
 * 获得一个对象的键值
 * 
 * @import is.array
 * 
 * @import is.object
 * 
 * @import is.defined
 * 
 * @import join from object.key.join
 * 
 * @param {object} data 对象数据
 * 
 * @param {string} [key = '.'] 对象键值
 * 
 * @return {mixed} 对应对象数据的键值的数据 
 * 
 * @scoped
 * 
 */

const firstKeyRe = /^([^\.]+)\./;

function main(data , key , prefixKey = ''){

    if(key === '.'){

        return data ;
    }

    if(isObject(data)){

        let firstKey,
            lastKey = key.replace(firstKeyRe , function(){

                firstKey = arguments[1] ;
                
                return '' ;

            }) ;

        if(firstKey){

            firstKey = join(prefixKey , firstKey) ;

            let result ;

            if(data.hasOwnProperty(firstKey)){

                result = data[firstKey] ;

                prefixKey = '' ;

            }else{

                result = data ;

                prefixKey = firstKey ;
            }

            if(lastKey){

                return main(result , lastKey , prefixKey) ;
            }
        
            return result ;
        
        }else{

            return data[join(prefixKey , lastKey)] ;
        }

    }else if(isArray(data)){

        let result = [] ;

        for(let item of data){

            let itemResult = main(item , key) ;

            if(isArray(itemResult)){

                result.push(...itemResult) ;
            
            }else if(!isDefined(itemResult)){

                result.push(itemResult) ;

            }
        }

        return result ;
    }
}

                return function(data , key = '.'){

                    
        if(!var_init_locked_1560479512839){

            isArray = include('is.array');
isObject = include('is.object');
isDefined = include('is.defined');
join = include('object.key.join');

            var_init_locked_1560479512839 = true ;
        }
        

                    

                    return main.call(this , data , key) ;
                } ;

            })()]]>
    </class>

    <class motify="1557284779712" signature="<boolean> src::object.equals(<object> value1 , <object> value2)" entry-type="object object"  name="src::object.equals" imports="src::is.object.simple src::object.keys src::is.type src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get">
        <![CDATA[(() =>{

                let keys,get;

                let var_init_locked_1560479512842;

                

                

                function main(value1 , value2){

        /**
 * 
 * 匹配两个对象数据是否匹配
 * 
 * @import keys from object.keys
 * 
 * @import get from object.value.get
 * 
 * @param {object} value1 第一个对象数据
 * 
 * @param {object} value2 第二个对象数据
 * 
 * @return {boolean} 如果对象数据匹配则返回 true ， 否则返回 false
 * 
 */

let keys1 = keys(value1),
    keys2 = keys(value2) ;

if(keys1.length !== keys2.length){

    return false ;
}

for(let key of keys1){

    if(!keys2.includes(key) || get(value1 , key) !== get(value2 , key)){

        return false ;
    }
}

return true ;

    }

                return function(value1 , value2){

                    
        if(!var_init_locked_1560479512842){

            keys = include('object.keys');
get = include('object.value.get');

            var_init_locked_1560479512842 = true ;
        }
        

                    

                    return main.call(this , value1 , value2) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529935" signature="<mixed> src::is.empty(<mixed> data , <boolean> allowEmptyString)" entry-type="mixed boolean"  name="src::is.empty" imports="src::is.type src::is.array">
        <![CDATA[(() =>{

                let isArray;

                let var_init_locked_1560479512846;

                

                

                function main(data , allowEmptyString){

        /**
 * 
 * 判定数据是否为空
 * 
 * @import is.array
 * 
 * @param {mixed} data 检验数据
 * 
 * @param {boolean} [allowEmptyString = false] 是否视空符串不为空，默认空符串为空
 * 
 * @return {mixed} 如果给定值为空则返回 true , 否则返回 false  
 * 
 */

return (data == null) || (!allowEmptyString ? data === '' : false) || (isArray(data) && data.length === 0);

    }

                return function(data , allowEmptyString = false){

                    
        if(!var_init_locked_1560479512846){

            isArray = include('is.array');

            var_init_locked_1560479512846 = true ;
        }
        

                    

                    return main.call(this , data , allowEmptyString) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529996" signature="<void> src::string.split(<String> target , <RegEx> splitRe)" entry-type="String RegEx"  name="src::string.split" imports="src::is.type src::is.array src::is.empty">
        <![CDATA[(() =>{

                let isEmpty;

                let var_init_locked_1560479512848;

                

                

                
/**
 * 
 * 将字符串通过间隔符分隔成数组
 * 
 * @import is.empty
 * 
 * @param {String} target 字符串
 * 
 * @param {RegEx} splitRe 字符串分隔符
 * 
 * @scoped
 * 
 */

function main(target , splitRe){

    return target.split(splitRe).filter(filter) ;
 }

 function filter(target){

    return !isEmpty(target) ;
 }

                return function(target , splitRe){

                    
        if(!var_init_locked_1560479512848){

            isEmpty = include('is.empty');

            var_init_locked_1560479512848 = true ;
        }
        

                    

                    return main.call(this , target , splitRe) ;
                } ;

            })()]]>
    </class>

    <class motify="1557285048407" signature="<void> src::object.value.set(<object> target , <string> key , <mixed> value)" entry-type="object string mixed"  name="src::object.value.set" imports="src::is.type src::is.object src::is.array src::is.empty src::string.split">
        <![CDATA[(() =>{

                let isObject,split;

                let var_init_locked_1560479512851;

                

                

                /**
 * 
 * 设置对象的属性值
 * 
 * @import is.object
 * 
 * @import split from string.split
 * 
 * @param {object} target 目标对象
 * 
 * @param {string} key 属性名称
 * 
 * @param {mixed} value 属性值
 * 
 * @scoped
 * 
 */

const splitRe = /\./;

function main(target , key , value){

    if(splitRe.test(key)){

        let keys = split(key , splitRe) ;
    
        key = keys.pop();
    
        for(let key of keys){
    
            let data = target[key] ;
    
            if(!isObject(data)){
    
                data = target[key] = {} ;
            }
    
            target = data ;
        }
    
        target[key] = value ;
    
    }else{
    
        target[key] = value ;
    }
}   

                return function(target , key , value){

                    
        if(!var_init_locked_1560479512851){

            isObject = include('is.object');
split = include('string.split');

            var_init_locked_1560479512851 = true ;
        }
        

                    

                    return main.call(this , target , key , value) ;
                } ;

            })()]]>
    </class>

    <class motify="1557285029502" signature="<object> src::object.assign(<object> dest , <object> ...sources)" entry-type="object object"  name="src::object.assign" imports="src::is.object.simple src::object.keys src::is.type src::is.object src::is.array src::is.empty src::string.split src::object.value.set src::is.defined src::object.key.join src::object.value.get">
        <![CDATA[(() =>{

                let getKeys,set,get;

                let var_init_locked_1560479512854;

                

                

                
/**
 * 
 * 深度合并
 * 
 * @import getKeys from object.keys
 * 
 * @import set from object.value.set
 * 
 * @import get from object.value.get
 * 
 * @param {object} dest 目标数据
 * 
 * @param {object} [...sources] 来源数据
 * 
 * @return {object} 合并后数据
 * 
 * @scoped
 * 
 */

function assign(dest , source){

    let keys = getKeys(source) ;

    for(let key of keys){

        set(dest , key , get(source , key)) ;
    }

}

function main(dest , ...sources){

    for(let source of sources){

        assign(dest , source) ;
    }

    return dest ;

}

                return function(dest , ...sources){

                    
        if(!var_init_locked_1560479512854){

            getKeys = include('object.keys');
set = include('object.value.set');
get = include('object.value.get');

            var_init_locked_1560479512854 = true ;
        }
        

                    

                    return main.call(this , dest , ...sources) ;
                } ;

            })()]]>
    </class>

    <class motify="1560157843606" signature="<void> src::data.subscriber.open(<object> params)" entry-type="object"  name="src::data.subscriber.open" imports="src::is.object.simple src::object.keys src::is.type src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign">
        <![CDATA[(() =>{

                let equals,assign;

                let var_init_locked_1560479512860;

                

                

                function main(params){

        
/**
 * 
 * 打开订阅器
 * 
 * @import equals from object.equals
 * 
 * @import assign from object.assign
 * 
 * @param {object} [params = {}] 订阅参数
 * 
 */

let me = this,
{
    extraParams,
    defaultParams,
    params:oldParams
} = me ;

params = assign({} , defaultParams , params , extraParams) ;

if(!oldParams || !equals(params , oldParams)){

    me.close() ;

    me.params = params ;

    me.closed = false ;
    
    me.fireEvent('open' , params , oldParams) ;
}

    }

                return function(params = {}){

                    
        if(!var_init_locked_1560479512860){

            equals = include('object.equals');
assign = include('object.assign');

            var_init_locked_1560479512860 = true ;
        }
        

                    

                    return main.call(this , params) ;
                } ;

            })()]]>
    </class>

    <class motify="1560158075765" signature="<void> src::data.subscriber.close()"  name="src::data.subscriber.close">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 关闭订阅器
 * 
 */

let me = this,
{
    closed,
    params,
    cache
} = me;

if(closed){

    return ;
}

delete me.params ;

cache.length = 0 ;

me.closed = true ;

me.fireEvent('close' , params) ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717802351" signature="<void> src::data.subscriber.destroy()"  name="src::data.subscriber.destroy">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 销毁
 * 
 */

let me = this ;

me.close() ;

let {
     bindCallbacks
} = this ;

bindCallbacks.clear() ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1560136555092" signature="<void> src::data.subscriber()"  name="src::data.subscriber" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy">
        <![CDATA[(() =>{

                let mixin_1560479512382__1,extend,constructor,method_accept,method_bind,method_reopen,method_open,method_close,method_destroy;

                let var_init_locked_1560479512870;

                let var_class_1560479512870;

                

                return function(){

                    
        if(!var_init_locked_1560479512870){

            mixin_1560479512382__1 = include('mixin.observable');
extend = include('class.empty')();
constructor = include('src::data.subscriber.constructor');
method_accept = include('src::data.subscriber.accept');
method_bind = include('src::data.subscriber.bind');
method_reopen = include('src::data.subscriber.reopen');
method_open = include('src::data.subscriber.open');
method_close = include('src::data.subscriber.close');
method_destroy = include('src::data.subscriber.destroy');

            var_init_locked_1560479512870 = true ;
        }
        

                    
        if(!var_class_1560479512870){

            class main extends mixins({extend , mixins:[include('mixin.observable')]}){

            

            

            constructor(...args){

            super(...args) ;

            constructor.apply(this , args) ;

        }

            accept(...args){

            return method_accept.apply(this , args) ;

        }
bind(...args){

            return method_bind.apply(this , args) ;

        }
reopen(...args){

            return method_reopen.apply(this , args) ;

        }
open(...args){

            return method_open.apply(this , args) ;

        }
close(...args){

            return method_close.apply(this , args) ;

        }
destroy(...args){

            return method_destroy.apply(this , args) ;

        }

            

        }

            var_class_1560479512870 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512870 ;
                }

            } ;
        }
        

                    return var_class_1560479512870;
                } ;

            })()]]>
    </class>

    <class motify="1558348016117" signature="<boolean> src::is.class(<mixed> data)" entry-type="mixed"  name="src::is.class" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479512881;

                

                

                function main(data){

        
/**
 * 
 * 判断数据是否为类
 * 
 * @import is.type
 * 
 * @param {mixed} data 检测数据
 * 
 * @return {boolean} 如果指定数据是类则返回 true ，否则返回 false 
 * 
 */

return isType(data , 'function') && data.ZBEE_CLASS === true ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479512881){

            isType = include('is.type');

            var_init_locked_1560479512881 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1558417859298" signature="<void> src::class.create(<mixed> baseClass , <mixed> ...args)" entry-type="mixed mixed"  name="src::class.create" imports="src::is.type src::is.string src::is.function src::is.class">
        <![CDATA[(() =>{

                let isString,isFunction,isClass;

                let var_init_locked_1560479512884;

                

                

                function main(baseClass , ...args){

        
/**
 * 
 * 实例基于指定类对象
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import is.class
 * 
 * @param {mixed} baseClass 类
 * 
 * @param {mixed} [...args] 类参数
 * 
 */

if(isString(baseClass)){

    baseClass = include(baseClass) ;
}

if(isFunction(baseClass)){

    baseClass = baseClass(...args) ;

    if(!isClass(baseClass)){

        return baseClass ;
    }
}

if(isClass(baseClass)){

    return new baseClass(...args) ;
}

    }

                return function(baseClass , ...args){

                    
        if(!var_init_locked_1560479512884){

            isString = include('is.string');
isFunction = include('is.function');
isClass = include('is.class');

            var_init_locked_1560479512884 = true ;
        }
        

                    

                    return main.call(this , baseClass , ...args) ;
                } ;

            })()]]>
    </class>

    <class motify="1560408116778" signature="<void> src::data.connection.base()"  name="src::data.connection.base" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create" dependent-modules="regex-parser:^2.2.10">
        <![CDATA[(() =>{

                let isObject,isString,isFunction,isBoolean,isArray,Subscriber,get,create;

                let var_init_locked_1560479512889;

                let var_class_1560479512889;

                

                return function(){

                    
        if(!var_init_locked_1560479512889){

            isObject = include('is.object.simple');
isString = include('is.string');
isFunction = include('is.function');
isBoolean = include('is.boolean');
isArray = include('is.array');
Subscriber = include('data.subscriber')();
get = include('function.get');
create = include('class.create');

            var_init_locked_1560479512889 = true ;
        }
        

                    
        if(!var_class_1560479512889){

            /**
 * 
 * 数据连接基础类
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import is.boolean
 * 
 * @import is.array
 * 
 * @import Subscriber from data.subscriber value
 * 
 * @import get from function.get
 * 
 * @import create from class.create
 * 
 * @require regex-parser
 * 
 * @class
 * 
 */

 const createRegex = require('regex-parser'); 

 function createRules(rules){

    let result = [] ;

    for(let {
        test,
        use
    } of rules){

        if(isFunction(use)){

            result.push({
                test:createRegex(test),
                use
            }) ;
        }
    }

    return result ;
 }

 class main{

    constructor({
        subscriber = (name , options) =>{

            return new Subscriber(name , options) ;
        },
        rules = []
    }){

        let me = this ;

        me.subscriber = subscriber ;

        me.subscribers = new Map() ;

        me.rules = createRules(rules) ;
    }

    processMessage(...args){

        return {} ;
    }

    processData(subscriber , {
        data
    }){

        return data ;
    }

    validateMessage(subscriber , message){

        return true ;
    }


    processSubscribeParams(subscriber , params){

        return [
            params
        ] ;
    }

    /**
     * 
     * 构建订阅器
     * 
     * @param {string} name  订阅名称 
     * 
     * @param {mixed} options 订阅器参数
     * 
     * @return {data.Subscriber} 订阅器
     * 
     */
    createSubscriber(name , options){

        let me = this,
        {
            subscriber
        } = me ;

        return create(subscriber , name , options) ;
    }

    get subscriberListeners(){

        return {
            open:'onSubscriberOpen',
            close:'onSubscriberClose',
            scope:this
        } ;
    }

    onSubscriberOpen(subscriber , params){

        let me = this;

        params = me.processSubscribeParams(subscriber , params , 'open') ;

        if(isArray(params)){

            me.doSubscriberOpen(subscriber , ...params) ;
        }
    }

    doSubscriberOpen(subscriber , ...args){


    }

    onSubscriberClose(subscriber , params){

        let me = this;

        params = me.processSubscribeParams(subscriber , params , 'close') ;

        if(isArray(params)){

            me.doSubscriberClose(subscriber , ...params) ;
        }

    }

    doSubscriberClose(subscriber , ...args){


    }

    /**
     * 
     * @param {string} name 订阅器名称
     *  
     * @param {string} method 订阅器方法名称
     *  
     * @param  {mixed} ...args 订阅器方法参数
     */
    doSubscriberMethod(name , method , ...args){

        let me = this,
        {
            subscribers
        } = me,
        subscriber = subscribers.get(name);

        if(subscriber){

            subscriber[method](...args) ;

            return subscriber ;
        }
    }
 }

            var_class_1560479512889 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512889 ;
                }

            } ;
        }
        

                    return var_class_1560479512889;
                } ;

            })()]]>
    </class>

    <class motify="1560409074007" signature="<object> src::data.connection.accept(<mixed> ...args)" entry-type="mixed"  name="src::data.connection.accept">
        <![CDATA[(() =>{

                

                

                

                

                function main(...args){

        
/**
 * 
 * 接收消息数据
 * 
 * @param {mixed} [...args] 可选参数
 * 
 * @return {object} 消息体 
 * 
 */

let me = this,
    message = me.processMessage(...args),
    {
        subscribers
    } = me;

subscribers.forEach(subscriber => {

    if(me.validateMessage(subscriber , message)){

        subscriber.accept(me.processData(subscriber , message)) ;
    }

}) ;

    }

                return function(...args){

                    

                    

                    return main.call(this , ...args) ;
                } ;

            })()]]>
    </class>

    <class motify="1560408205924" signature="<void> src::data.connection.subscribe(<string> name , <object> options)" entry-type="string object"  name="src::data.connection.subscribe" imports="src::is.object.simple src::object.keys src::is.type src::is.object src::is.array src::is.empty src::string.split src::object.value.set src::is.defined src::object.key.join src::object.value.get src::object.assign">
        <![CDATA[(() =>{

                let assign;

                let var_init_locked_1560479512904;

                

                

                
/**
 * 
 * 单次订阅
 * 
 * @import assign from object.assign
 * 
 * @param {string} name 订阅名称
 * 
 * @param {object} [options = {}] 订阅配置
 * 
 */

function main(name , options){

    let me = this ;

    options = assign({} , convertNameToSubscriberOptions.call(me , name) , options) ;

    let {
        subscribers,
        subscriberListeners
    } = me,
    {
        fn,
        scope,
        params,
        listeners = {},
        autoOpen = true,
        ...currentOptions
    } = options;

    if(subscribers.has(name)){

        return subscribers.get(name) ;
    }

    let subscriber = me.createSubscriber(name , currentOptions) ;

    subscriber.addListeners(subscriberListeners) ;

    subscriber.addListeners(listeners) ;

    subscribers.set(name , subscriber) ;

    if(fn){

        subscriber.bind(fn , scope) ;
    }

    if(autoOpen){

        subscriber.open(params) ;
    }

    return subscriber ;
}

function convertNameToSubscriberOptions(name){

    let {
        rules
    } = this;

    for(let {
        test,
        use
    } of rules){

        let args = name.match(test) ;

        if(args){

            return use(...args) ;
        }
    }

    return {} ;
 }

                return function(name , options = {}){

                    
        if(!var_init_locked_1560479512904){

            assign = include('object.assign');

            var_init_locked_1560479512904 = true ;
        }
        

                    

                    return main.call(this , name , options) ;
                } ;

            })()]]>
    </class>

    <class motify="1559720437004" signature="<void> src::data.connection.unsubscribe(<string> name)" entry-type="string"  name="src::data.connection.unsubscribe">
        <![CDATA[(() =>{

                

                

                

                

                function main(name){

        
/**
 * 
 * 取消单次订阅
 * 
 * @param {string} name 订阅名称
 * 
 */

let me = this,
    {
        subscribers
    } = me,
    subscriber = me.doSubscriberMethod(name , 'destroy') ;

if(subscriber){

    subscribers.delete(name) ;
}

    }

                return function(name){

                    

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1560329035374" signature="<mixed> src::data.connection.subscribes(<object> config)" entry-type="object"  name="src::data.connection.subscribes" imports="src::is.type src::is.string src::is.function src::is.object.simple src::function.empty src::function.get">
        <![CDATA[(() =>{

                let isString,isFunction,isObject,get;

                let var_init_locked_1560479512914;

                

                

                function main(config){

        
/**
 * 
 * 批量订阅
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import isObject from is.object.simple
 * 
 * @import get from function.get
 * 
 * @param {object} config 批量订阅配置
 * 
 * @return {mixed} 返回说明 
 * 
 */

let {
    scope,
    ...subscribers
} = config,
me = this,
names = Object.keys(subscribers),
result = {};

for(let name of names){

    let target = subscribers[name],
        subscriber;

    if(isString(target) || isFunction(target)){

        subscriber = me.subscribe(name).bind(get(subscribers[name] , scope) , scope) ;

    }else if(isObject(target)){

        let {
            fn,
            scope:currentScope,
            listeners = {},
            ...options
        } = target ;

        currentScope = currentScope || scope ;

        listeners.scope = listeners.scope || currentScope ;

        subscriber = me.subscribe(name , {
            fn,
            scope:currentScope,
            listeners,
            ...options
        }) ;
    }

    if(subscriber){

        result[name] = subscriber ;
    }
}

return result ;

    }

                return function(config){

                    
        if(!var_init_locked_1560479512914){

            isString = include('is.string');
isFunction = include('is.function');
isObject = include('is.object.simple');
get = include('function.get');

            var_init_locked_1560479512914 = true ;
        }
        

                    

                    return main.call(this , config) ;
                } ;

            })()]]>
    </class>

    <class motify="1560132184951" signature="<void> src::data.connection.unsubscribes(<string[]> names)" entry-type="string[]"  name="src::data.connection.unsubscribes">
        <![CDATA[(() =>{

                

                

                

                

                function main(names){

        
/**
 * 
 * 批量取消订阅
 * 
 * @param {string[]} names 订阅名称
 * 
 */

let me = this;

for(let name of names){

   me.unsubscribe(name) ;
}

    }

                return function(names){

                    

                    

                    return main.call(this , names) ;
                } ;

            })()]]>
    </class>

    <class motify="1560147254532" signature="<void> src::data.connection.resubscribes()"  name="src::data.connection.resubscribes">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 重新订阅
 * 
 */

let {
    subscribers
} = this;

subscribers.forEach(subscriber => subscriber.reopen()) ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1560148434618" signature="<void> src::data.connection()"  name="src::data.connection" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create src::data.connection.base src::data.connection.accept src::data.connection.subscribe src::data.connection.unsubscribe src::data.connection.subscribes src::data.connection.unsubscribes src::data.connection.resubscribes">
        <![CDATA[(() =>{

                let extend,method_acceptMessage,method_subscribe,method_unsubscribe,method_subscribes,method_unsubscribes,method_resubscribes;

                let var_init_locked_1560479512921;

                let var_class_1560479512921;

                

                return function(){

                    
        if(!var_init_locked_1560479512921){

            extend = include('src::data.connection.base')();
method_acceptMessage = include('src::data.connection.accept');
method_subscribe = include('src::data.connection.subscribe');
method_unsubscribe = include('src::data.connection.unsubscribe');
method_subscribes = include('src::data.connection.subscribes');
method_unsubscribes = include('src::data.connection.unsubscribes');
method_resubscribes = include('src::data.connection.resubscribes');

            var_init_locked_1560479512921 = true ;
        }
        

                    
        if(!var_class_1560479512921){

            class main extends mixins({extend , mixins:[]}){

            

            

            

            acceptMessage(...args){

            return method_acceptMessage.apply(this , args) ;

        }
subscribe(...args){

            return method_subscribe.apply(this , args) ;

        }
unsubscribe(...args){

            return method_unsubscribe.apply(this , args) ;

        }
subscribes(...args){

            return method_subscribes.apply(this , args) ;

        }
unsubscribes(...args){

            return method_unsubscribes.apply(this , args) ;

        }
resubscribes(...args){

            return method_resubscribes.apply(this , args) ;

        }

            

        }

            var_class_1560479512921 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512921 ;
                }

            } ;
        }
        

                    return var_class_1560479512921;
                } ;

            })()]]>
    </class>

    <class motify="1560327415305" signature="<void> src::data.connection.socket()"  name="src::data.connection.socket" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create src::data.connection.base src::data.connection.accept src::data.connection.subscribe src::data.connection.unsubscribe src::data.connection.subscribes src::data.connection.unsubscribes src::data.connection.resubscribes src::data.connection">
        <![CDATA[(() =>{

                let Connection,isObject,getKeys,getValue,equals;

                let var_init_locked_1560479512933;

                let var_class_1560479512933;

                

                return function(){

                    
        if(!var_init_locked_1560479512933){

            Connection = include('data.connection')();
isObject = include('is.object.simple');
getKeys = include('object.keys');
getValue = include('object.value.get');
equals = include('object.equals');

            var_init_locked_1560479512933 = true ;
        }
        

                    
        if(!var_class_1560479512933){

            
/**
 * 
 * Socket 通信
 * 
 * @import Connection from data.connection value
 * 
 * @import isObject from is.object.simple
 * 
 * @import getKeys from object.keys
 * 
 * @import getValue from object.value.get
 * 
 * @import equals from object.equals
 * 
 * @class
 * 
 */

 class main extends Connection{

    validateMessage({
        params:baseParams
    },{
        params:equalParams
    }){

        if(isObject(baseParams) && isObject(equalParams)){

            return equals(baseParams , equalParams) ;
        }

        return false ;
    }
 }

            var_class_1560479512933 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512933 ;
                }

            } ;
        }
        

                    return var_class_1560479512933;
                } ;

            })()]]>
    </class>

    <class motify="1560325671461" signature="<void> src::data.connection.socket.io()"  name="src::data.connection.socket.io" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create src::data.connection.base src::data.connection.accept src::data.connection.subscribe src::data.connection.unsubscribe src::data.connection.subscribes src::data.connection.unsubscribes src::data.connection.resubscribes src::data.connection src::data.connection.socket" dependent-modules="socket.io-client:1.3.3">
        <![CDATA[(() =>{

                let Connection;

                let var_init_locked_1560479512949;

                let var_class_1560479512949;

                

                return function(){

                    
        if(!var_init_locked_1560479512949){

            Connection = include('data.connection.socket')();

            var_init_locked_1560479512949 = true ;
        }
        

                    
        if(!var_class_1560479512949){

            /**
 * 
 * 基于 socket.io 标准进行开发
 * 
 * @import Connection from data.connection.socket value
 * 
 * @require socket.io-client
 * 
 * @class
 * 
 */

 const IO = require('socket.io-client') ;

 class main extends Connection{

    constructor({
        socket,
        ...options
    }){

        super(options) ;

        let {
            url:socketURL,
            options:socketOptions
        } = socket ;

        let me = this,
            {
                messageEventName,
                acceptMessage,
                resubscribes,
                onConnect
            } = me ;

        socket = me.socket = IO(socketURL , {
            'force new connection': true,
            transports: [
                'websocket',
                'polling'
            ],
            ...socketOptions
        }) ;

        socket.on(messageEventName , acceptMessage.bind(me)) ;

        socket.on('reconnect' , resubscribes.bind(me)) ;

        socket.once('connect' , onConnect.bind(me)) ;

        me.firstConnected = false ;
    }

    onConnect(){

        this.firstConnected = true ;
    }

    get messageEventName(){

        return 'msg' ;
    }


    get subscribeEventName(){

        return 'sub' ;
    }

    get unsubscribeEventName(){

        return 'unsub' ;
    }


    emit(event , ...params){

        let me = this,
        {
            firstConnected,
            socket
        } = me;

        if(firstConnected){

            if(socket.connected){

                socket.emit(event , ...params) ;
            }

        }else{

            socket.once('connect' , () => me.emit(event , ...params)) ;
        }
    }

    doSubscriberOpen(subscriber , ...args){

        let me = this,
        {
            subscribeEventName
        } = me ;

        me.emit(subscribeEventName , ...args) ;
    }

    doSubscriberClose(subscriber , ...args){

        let me = this,
        {
            unsubscribeEventName
        } = me ;

        me.emit(unsubscribeEventName , ...args) ;
    }
 }

            var_class_1560479512949 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479512949 ;
                }

            } ;
        }
        

                    return var_class_1560479512949;
                } ;

            })()]]>
    </class>

    <class motify="1556513303394" signature="<mixed> src::url.append(<string> url , <mixed> data)" entry-type="string mixed"  name="src::url.append" imports="src::is.type src::is.string">
        <![CDATA[(() =>{

                let isString;

                let var_init_locked_1560479512964;

                

                

                function main(url , data){

        
/**
 * 
 * 基于已有链接附加查询信息
 * 
 * @import is.string
 * 
 * @param {string} url 链接
 * 
 * @param {mixed} data 附加查询信息
 * 
 * @return {mixed} 拼接了查询信息的链接 
 * 
 */

let querystring ;

if(isString(data)){

    querystring = data ;

}else{

    querystring = [];

    let names = Object.keys(data) ;

    for(let name of names){

        querystring.push(`${name}=${encodeURIComponent(data[name])}`) ;
    }

    querystring = querystring.join('&') ;

}

if(querystring){

    if(url.includes('?')){

        return `${url}&${querystring}` ;
    }
    
    return `${url}?${querystring}` ;

}

return url ;


    }

                return function(url , data){

                    
        if(!var_init_locked_1560479512964){

            isString = include('is.string');

            var_init_locked_1560479512964 = true ;
        }
        

                    

                    return main.call(this , url , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302998" signature="<boolean> src::regexp.int(<string> data)" entry-type="string"  name="src::regexp.int">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 匹配整数
 * 
 * @param {string} data 参数说明
 * 
 * @return {boolean} 如果匹配成功则返回 true , 否则返回 false 
 * 
 */

return /^\d+$/.test(data) ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513303401" signature="<string> src::url.template.apply(<string> url , <object> data)" entry-type="string object"  name="src::url.template.apply" imports="src::regexp.int">
        <![CDATA[(() =>{

                let isInt;

                let var_init_locked_1560479512968;

                

                

                function main(url , data){

        
/**
 * 
 * 路径模板应用
 * 
 * @import isInt from regexp.int
 * 
 * @param {string} url 带有参数定义的URL
 * 
 * @param {object} data 模板参数定义数据集合
 * 
 * @return {string} 应用数据后的URL链接
 * 
 */

return url.replace(/\:(\w+)/g , (match , name) =>{

    if(isInt(name)){

        return `:${name}` ;
    }

    return data[name] || '' ;

}) ;


    }

                return function(url , data){

                    
        if(!var_init_locked_1560479512968){

            isInt = include('regexp.int');

            var_init_locked_1560479512968 = true ;
        }
        

                    

                    return main.call(this , url , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529796" signature="<array> src::array.from(<mixed> data)" entry-type="mixed"  name="src::array.from" imports="src::is.type src::is.array src::is.empty src::is.string">
        <![CDATA[(() =>{

                let isEmpty,isString;

                let var_init_locked_1560479512971;

                

                

                function main(data){

        /**
 * 
 * 将非数组数据打包成数组数据
 * 
 * @import is.empty
 * 
 * @import is.string
 * 
 * @param {mixed} data 数据
 * 
 * @return {array} 数组数据
 * 
 */

if(isEmpty(data)){

    return [];
}

if (data && data.length !== undefined && !isString(data)) {

    return Array.from(data);

}

return [
    data
];

    }

                return function(data){

                    
        if(!var_init_locked_1560479512971){

            isEmpty = include('is.empty');
isString = include('is.string');

            var_init_locked_1560479512971 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1558502542731" signature="<mixed> src::class.create.option(<string> namespace , <mixed> option)" entry-type="string mixed"  name="src::class.create.option" imports="src::is.type src::is.string src::is.object.simple src::is.class src::is.function src::class.create src::is.defined">
        <![CDATA[(() =>{

                let isString,isObject,isClass,create,isDefined;

                let var_init_locked_1560479512977;

                

                

                function main(namespace , option){

        /**
 * 
 * 基于配置的实例
 * 
 * @import is.string
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.class
 * 
 * @import create from class.create
 * 
 * @import is.defined
 * 
 * @param {string} namespace 命名空间
 * 
 * @param {mixed}  [option] 配置
 * 
 * @return {mixed} 类实例
 * 
 */

 if(isString(option)){

    return create(`${namespace}.${option}`) ;

 }else if(isObject(option)){

    let {
        type,
        ...currentOptions
    } = option,
    name;

    if(type){

        name = `${namespace}.${type}` ;
    
    }else{

        name = namespace ;
    }

    return create(name , currentOptions) ;
 
}else if(!isDefined(options)){

    return create(namespace) ;
}

    }

                return function(namespace , option){

                    
        if(!var_init_locked_1560479512977){

            isString = include('is.string');
isObject = include('is.object.simple');
isClass = include('is.class');
create = include('class.create');
isDefined = include('is.defined');

            var_init_locked_1560479512977 = true ;
        }
        

                    

                    return main.call(this , namespace , option) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302930" signature="<object.Proxy> src::object.proxy(<mixed> target)" entry-type="mixed"  name="src::object.proxy">
        <![CDATA[(() =>{

                

                

                

                

                
/**
 * 
 * 对象代理，如果对象没有需要的方法或者属性时，则会抛出异常
 * 
 * @param {mixed} target 需要代理的对象
 * 
 * @return {object.Proxy} 代理对象引用 
 * 
 */

 function main(target){

    return new Proxy(target) ;
 }

 class Proxy{

    constructor(target){

        this.target = target ;
    }

    call(method , ...args){

        let {
            target
        } = this ;

        if(method in target){

            return target[method](...args) ;
        
        }else{

            throw new ProxyMethodNotFoundError(target , method) ;
        }
    }

    callIf(method , ...args){

        let {
            target
        } = this ;

        if(method in target){

            return target[method](...args) ;
        }
    }

    set(name , value){

        let {
            target
        } = this ;

        if(name in target){

            target[name] = value ;
        
        }else{

            throw new ProxyPropertyNotFoundError(target , name , 'set') ;
        }
    }

    setIf(name , value){

        let {
            target
        } = this ;

        if(name in target){

            target[name] = value ;
        
        }
    }

    get(name){

        let {
            target
        } = this ;

        if(name in target){

            return target[name] ;
        
        }else{

            throw new ProxyPropertyNotFoundError(target , name , 'get') ;
        }
    }

    getIf(name){

        let {
            target
        } = this ;

        if(name in target){

            return target[name] ;
        
        }
    }

    fireEvent(name , ...args){

        let {
            target
        } = this ;

        if('fireEvent' in target){

            target.fireEvent(name , ...args) ;
        }
    }
 }

 class ProxyMethodNotFoundError extends Error{

    constructor(target , method){

        super(`无法访问名称为 ${method} 的方法`) ;

        let me = this ;

        me.proxyTarget = target ;

        me.proxyMethod = method ;

    }
 }

 class ProxyPropertyNotFoundError extends Error{

    constructor(target , property , mode){

        let modeMessage ;

        switch(mode){

            case 'set':

                modeMessage = '设置' ;

                break ;

            case 'get':

                modeMessage = '获取' ;
        }

        super(`无法${modeMessage}名称为 ${property} 的属性`) ;

        let me = this ;

        me.proxyTarget = target ;

        me.proxyProperty = property ;

    }
 }

                return function(target){

                    

                    

                    return main.call(this , target) ;
                } ;

            })()]]>
    </class>

    <class motify="1558343966157" signature="<void> src::data.proxy.constructor({<mixed> reader , <mixed> model})"  name="src::data.proxy.constructor" imports="src::object.proxy src::is.type src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get src::is.string src::is.function src::is.empty src::array.from src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::class.create.option src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json">
        <![CDATA[(() =>{

                let createProxy,createReader;

                let var_init_locked_1560479512986;

                

                

                function main({reader , model}){

        
/**
 * 
 * 初始化数据代理
 * 
 * @import createProxy from object.proxy
 * 
 * @import createReader from data.reader.json
 * 
 * @param {object} [options = {}] 配置
 * 
 * @param {mixed} [options.reader = {}] 配置读取器
 * 
 * @param {mixed} [options.model] 数据模型
 * 
 */

 let me = this ;

 me.proxy = createProxy(me) ;

 me.reader = createReader({
     ...reader,
     model
 }) ;

    }

                return function({reader = {} , model} = {}){

                    
        if(!var_init_locked_1560479512986){

            createProxy = include('object.proxy');
createReader = include('data.reader.json');

            var_init_locked_1560479512986 = true ;
        }
        

                    

                    return main.call(this , {reader , model}) ;
                } ;

            })()]]>
    </class>

    <class motify="1558414707902" signature="<boolean> src::is.promise(<mixed> data)" entry-type="mixed"  name="src::is.promise">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 判断数据是否为 Promise 对象
 * 
 * @param {mixed} data 测试数据
 * 
 * @return {boolean} 如果是 Promise 则返回 true , 否则返回 false
 * 
 */

 return data instanceof Promise ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1558419408154" signature="<void> src::data.proxy.read(<mixed> options)" entry-type="mixed"  name="src::data.proxy.read" imports="src::is.promise">
        <![CDATA[(() =>{

                let isPromise;

                let var_init_locked_1560479513005;

                

                

                
/**
 * 
 * 读取数据
 * 
 * @import is.promise
 * 
 * @param {mixed} options 读取数据配置
 * 
 */

function fireReadEvent(data){

    let me = this,
    {
        reader
    } = me ;

    me.fireEvent('read' , reader(data)) ;
}

function main(options){

    let me = this,
    {
        proxy
    } = me,
    data = proxy.call('doRead' , options);
   
    if(isPromise(data)){
   
       data.then(data => fireReadEvent.call(me , data)) ;
    
    }else{

        fireReadEvent.call(me , data) ;
    }
}




                return function(options){

                    
        if(!var_init_locked_1560479513005){

            isPromise = include('is.promise');

            var_init_locked_1560479513005 = true ;
        }
        

                    

                    return main.call(this , options) ;
                } ;

            })()]]>
    </class>

    <class motify="1558418019884" signature="<void> src::data.proxy()"  name="src::data.proxy" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::object.proxy src::is.object src::is.defined src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class src::class.create src::class.create.option src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read">
        <![CDATA[(() =>{

                let mixin_1560479512452__1,extend,constructor,method_read;

                let var_init_locked_1560479513007;

                let var_class_1560479513007;

                

                return function(){

                    
        if(!var_init_locked_1560479513007){

            mixin_1560479512452__1 = include('mixin.observable');
extend = include('class.empty')();
constructor = include('src::data.proxy.constructor');
method_read = include('src::data.proxy.read');

            var_init_locked_1560479513007 = true ;
        }
        

                    
        if(!var_class_1560479513007){

            class main extends mixins({extend , mixins:[include('mixin.observable')]}){

            

            

            constructor(...args){

            super(...args) ;

            constructor.apply(this , args) ;

        }

            read(...args){

            return method_read.apply(this , args) ;

        }

            

        }

            var_class_1560479513007 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513007 ;
                }

            } ;
        }
        

                    return var_class_1560479513007;
                } ;

            })()]]>
    </class>

    <class motify="1558417694274" signature="<void> src::data.proxy.memory(<object> options)" entry-type="object"  name="src::data.proxy.memory" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::object.proxy src::is.object src::is.defined src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class src::class.create src::class.create.option src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy">
        <![CDATA[(() =>{

                let Proxy;

                let var_init_locked_1560479513024;

                let var_class_1560479513024;

                

                return function(options){

                    
        if(!var_init_locked_1560479513024){

            Proxy = include('data.proxy')();

            var_init_locked_1560479513024 = true ;
        }
        

                    
        if(!var_class_1560479513024){

            
/**
 * 
 * 内存数据代理
 * 
 * @param {object} options 配置
 * 
 * @import Proxy from data.proxy value
 * 
 */

 class main extends Proxy{

    get proxyType(){

        return 'memory' ;
    }

    doRead(data){

        return data; 
    }
 }

            var_class_1560479513024 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513024 ;
                }

            } ;
        }
        

                    return new var_class_1560479513024(options);
                } ;

            })()]]>
    </class>

    <class motify="1558343632208" signature="<mixed> src::data.proxy.create(<mixed> proxy)" entry-type="mixed"  name="src::data.proxy.create" imports="src::is.type src::is.string src::is.object.simple src::is.class src::is.function src::class.create src::is.defined src::class.create.option src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory">
        <![CDATA[(() =>{

                let create,srcDataProxyMemory;

                let var_init_locked_1560479513038;

                

                

                function main(proxy){

        
/**
 * 
 * 创建新的代理
 * 
 * @import create from class.create.option
 * 
 * @import ..memory
 * 
 * @param {mixed} [proxy = 'memory'] 数据代理
 * 
 * @return {mixed} 数据代理 
 * 
 */

 return create('data.proxy' , proxy) ;

    }

                return function(proxy = 'memory'){

                    
        if(!var_init_locked_1560479513038){

            create = include('class.create.option');
srcDataProxyMemory = include('src::data.proxy.memory');

            var_init_locked_1560479513038 = true ;
        }
        

                    

                    return main.call(this , proxy) ;
                } ;

            })()]]>
    </class>

    <class motify="1558417920835" signature="<boolean> src::is.proxy.memory(<mixed> data)" entry-type="mixed"  name="src::is.proxy.memory" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::object.proxy src::is.object src::is.defined src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class src::class.create src::class.create.option src::data.proxy.memory src::data.proxy.create src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy">
        <![CDATA[(() =>{

                let Proxy;

                let var_init_locked_1560479513051;

                

                

                function main(data){

        
/**
 * 
 * 判断是否内存代理
 * 
 * @import Proxy from data.proxy value
 * 
 * @param {mixed} data 测试数据
 * 
 * @return {boolean} 如果为内存代理则返回 true , 否则返回 false
 * 
 */


 return data instanceof Proxy && data.proxyType === 'memory' ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479513051){

            Proxy = include('data.proxy')();

            var_init_locked_1560479513051 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1557285029502" signature="<object> src::object.assign.if(<object> dest , <object> ...sources)" entry-type="object object"  name="src::object.assign.if" imports="src::is.object.simple src::object.keys src::is.type src::is.object src::is.array src::is.empty src::string.split src::object.value.set src::is.defined src::object.key.join src::object.value.get">
        <![CDATA[(() =>{

                let getKeys,set,get;

                let var_init_locked_1560479513065;

                

                

                
/**
 * 
 * 如果目标存在来源的字段，则不覆盖
 * 
 * @import getKeys from object.keys
 * 
 * @import set from object.value.set
 * 
 * @import get from object.value.get
 * 
 * @param {object} dest 目标数据
 * 
 * @param {object} [...sources] 来源数据
 * 
 * @return {object} 合并后数据
 * 
 * @scoped
 * 
 */

function assign(dest , source){

    let keys = getKeys(source),
        destKeys = getKeys(dest);

    for(let key of keys){

        if(!destKeys.includes(key)){

            set(dest , key , get(source , key)) ;
        }
    }

}

function main(dest , ...sources){

    for(let source of sources){

        assign(dest , source) ;
    }

    return dest ;

}

                return function(dest , ...sources){

                    
        if(!var_init_locked_1560479513065){

            getKeys = include('object.keys');
set = include('object.value.set');
get = include('object.value.get');

            var_init_locked_1560479513065 = true ;
        }
        

                    

                    return main.call(this , dest , ...sources) ;
                } ;

            })()]]>
    </class>

    <class motify="1559108613503" signature="<void> src::data.model.base()"  name="src::data.model.base" imports="src::is.type src::is.string src::is.object.simple src::is.class src::is.function src::class.create src::is.defined src::class.create.option src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::class.define src::data.model.create src::object.keys src::string.split src::object.value.set src::object.assign src::is.proxy.memory src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::object.assign.if">
        <![CDATA[(() =>{

                let isString,isObject,createProxy,isMemoryProxy,assign2;

                let var_init_locked_1560479513069;

                let var_class_1560479513069;

                

                return function(){

                    
        if(!var_init_locked_1560479513069){

            isString = include('is.string');
isObject = include('is.object.simple');
createProxy = include('data.proxy.create');
isMemoryProxy = include('is.proxy.memory');
assign2 = include('object.assign.if');

            var_init_locked_1560479513069 = true ;
        }
        

                    
        if(!var_class_1560479513069){

            
/**
 * 
 * 数据模型
 * 
 * @import is.string
 * 
 * @import isObject from is.object.simple
 * 
 * @import createProxy from data.proxy.create
 * 
 * @import isMemoryProxy from is.proxy.memory
 * 
 * @import assign2 from object.assign.if
 * 
 * @class
 * 
 */

 class main{

    constructor({
        proxy = {},
        innerData = {},
        data,
        autoLoad
    } = {}){

        let me = this,
        {
            ZBEE_CURRENT_CLASS
        } = me;

        me.fireEventDataCacheCount = 1 ;

        (me.proxy = createProxy(assign2({
            type:'memory',
            model:ZBEE_CURRENT_CLASS,
            reader:{
                type:'json',
                isModelData:false
            }
        } , proxy))).addListeners({
            read:'onProxyRead',
            scope:me
        }) ;

        me.data = innerData || {} ;

        if(data){
            
            let {
                proxy
            } = me ;

            if(isMemoryProxy(proxy)){

                proxy.read(data) ;
            }

        }else if(autoLoad){

            me.load() ;
        }
    }

    get idProperty(){

        return 'id' ;
    }

    get bubbleTarget(){

        return this.store ;
    }

    static get fieldConfigurations(){

        return [] ;
    }

    onProxyRead(proxy , records){

        if(records.length){

            let me = this ;

            Object.assign(me.data , records[0].data) ;

            me.fireEvent('load') ;
        }
    }
 }

            var_class_1560479513069 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513069 ;
                }

            } ;
        }
        

                    return var_class_1560479513069;
                } ;

            })()]]>
    </class>

    <class motify="1558348501920" signature="<mixed> src::class.define(<mixed> BaseClass)" entry-type="mixed"  name="src::class.define">
        <![CDATA[(() =>{

                

                

                

                

                function main(BaseClass){

        
/**
 * 
 * 类定义
 * 
 * @param {mixed} BaseClass 基准类
 * 
 * @return {mixed} 类
 * 
 */

 return class extends BaseClass{

    get ZBEE_CURRENT_CLASS(){

        return BaseClass ;
    }

 } ;

    }

                return function(BaseClass){

                    

                    

                    return main.call(this , BaseClass) ;
                } ;

            })()]]>
    </class>

    <class motify="1558348440797" signature="<data.Model> src::data.model.create({<mixed> fields , <string> idProperty})"  name="src::data.model.create" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::class.define">
        <![CDATA[(() =>{

                let Model,get,define;

                let var_init_locked_1560479513085;

                

                

                
/**
 * 
 * 根据字段创建一个数据模型类
 * 
 * @import Model from data.model value
 * 
 * @import get from data.model.get
 * 
 * @import define from class.define
 *
 * @param {object} [config = {}] 配置
 * 
 * @param {mixed} [config.fields = []] 字段定义
 * 
 * @param {string} [config.idProperty = 'id'] 编号字段名称
 * 
 * @return {data.Model} 数据模型类 
 * 
 */

 function main({
     fields,
     idProperty
 }){


    return define(class extends Model{

        static get fieldConfigurations(){

            return fields;
        }

        get idProperty(){

            return idProperty;
        }
    }) ;
 }

                return function({fields = [] , idProperty = 'id'} = {}){

                    
        if(!var_init_locked_1560479513085){

            Model = include('data.model')();
get = include('data.model.get');
define = include('class.define');

            var_init_locked_1560479513085 = true ;
        }
        

                    

                    return main.call(this , {fields , idProperty}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301697" signature="<void> src::array.insert(<array> data , <number> index , <mixed> ...items)" entry-type="array number mixed"  name="src::array.insert">
        <![CDATA[(() =>{

                

                

                

                

                function main(data , index , ...items){

        
/**
 * 
 * 在指定下标处插入项
 * 
 * @param {array} data 数组
 * 
 * @param {number} index 数组下标
 * 
 * @param {mixed} [...items] 项
 * 
 */

 data.splice(index , 0 , ...items) ;

    }

                return function(data , index , ...items){

                    

                    

                    return main.call(this , data , index , ...items) ;
                } ;

            })()]]>
    </class>

    <class motify="1557018819735" signature="<boolean> src::is.data.model(<mixed> data)" entry-type="mixed"  name="src::is.data.model" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model">
        <![CDATA[(() =>{

                let Model;

                let var_init_locked_1560479513102;

                

                

                function main(data){

        
/**
 * 
 * 判定数据是否为数据模型对象
 * 
 * @import Model from data.model value
 * 
 * @param {mixed} data 检测数据
 * 
 * @return {boolean} 如果检测为数据模型则返回 true , 否则返回 false 
 * 
 */

 return data instanceof Model ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479513102){

            Model = include('data.model')();

            var_init_locked_1560479513102 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559021557789" signature="<void> src::array.clone(<array> data)" entry-type="array"  name="src::array.clone">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 对于数组进行拷贝
 * 
 * @param {array} data 数组
 * 
 * 
 */

 return data.slice(0) ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559021416707" signature="<void> src::data.recordset(<data.Store> store)" entry-type="data.Store"  name="src::data.recordset" imports="src::array.remove.index src::array.remove src::array.insert src::is.type src::is.array src::is.empty src::is.string src::array.from src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.data.model src::array.clone">
        <![CDATA[(() =>{

                let remove,removeIndex,insert,from,isModel,isObject,isDefined,isString,isFunction,clone;

                let var_init_locked_1560479513121;

                let var_class_1560479513121;

                

                return function(store){

                    
        if(!var_init_locked_1560479513121){

            remove = include('array.remove');
removeIndex = include('array.remove.index');
insert = include('array.insert');
from = include('array.from');
isModel = include('is.data.model');
isObject = include('is.object.simple');
isDefined = include('is.defined');
isString = include('is.string');
isFunction = include('is.function');
clone = include('array.clone');

            var_init_locked_1560479513121 = true ;
        }
        

                    
        if(!var_class_1560479513121){

            /**
 * 
 * 数据记录集合
 * 
 * @import remove from array.remove
 * 
 * @import removeIndex from array.remove.index
 * 
 * @import insert from array.insert
 * 
 * @import from from array.from
 * 
 * @import isModel from is.data.model
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.defined
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import clone from array.clone
 * 
 * @param {data.Store} store 存储器
 * 
 */

 class main{

    constructor(store){

        let me = this ;

        me.recordMap = new Map() ;

        me.recordData = [] ;

        me.store = store ;
    }

    /**
     * 
     * 转换成数组输出
     * 
     * @return {array}
     * 
     */
    toArray(){

        return clone(this.recordData) ;
    }

    /**
     * 
     * 根据编号获得数据记录
     * 
     * @param {mixed} id 数据记录编号
     * 
     * @return {data.Model} 
     * 
     */
    getById(id){

        let {
            recordMap
        } = this ;

        return recordMap.get(id) ;
    }

    /**
     * 
     * 根据数据记录获得在存储器中的位置
     * 
     * @param {data.Model} record 数据记录
     * 
     * @return {number} 数据记录位置
     * 
     */
    indexOf(record){

        let {
            recordData
        } = this ;

        return recordData.indexOf(record) ;
    }

    /**
     * 
     * 查寻数据记录
     * 
     * @param {mixed} property 属性名称
     *  
     * @param {mixed} [value] 属性值
     * 
     * @return {array} 数据记录集合
     *  
     */
    findRecords(property , value){

        let {
            recordData:records
        } = this ;

        if(isString(property)){

            let result = [] ;

            for(let record of records){

                if(record.get(property) === value){

                    result.push(record) ;
                }
            }

            return result ;

        }else if(isFunction(property)){

            let result = [] ;

            for(let record of records){

                if(property.call(value , record) === true){

                    result.push(record) ;
                }
            }

            return result ;

        }
    }

    /**
     * 
     * 清理
     * 
     */
    clear(){

        let {
            recordMap,
            recordData
        } = this ;

        recordMap.clear() ;

        recordData.length = 0 ;
    }

    /**
     * 
     * @param {function} fn 循环执行的函数
     *  
     * @param {mixed} scope 
     */
    each(fn , scope){

        let {
            recordData
        } = this ;

        for(let record of recordData){

            fn.call(scope , record) ;
        }
    }

    /**
     * 
     * 添加数据记录
     * 
     * @param {mixed} records 数据记录
     * 
     * 
     */
    add(records){

        let me = this,
        {
            recordData
        } = me ;

        records = getRecords.call(me , records) ;

        recordData.push(...records) ;

        resetRecordData(recordData) ;

        return records ;
    }
     /**
     * 
     * 插入数据记录
     * 
     * @param {mixed} records 数据记录
     * 
     * 
     */
    insert(index , records){

        let me = this,
        {
            recordData
        } = me ;

        records = getRecords.call(me , records) ;

        insert(recordData , index , ...records) ;

        resetRecordData(recordData) ;

        return records ;
    }
     /**
     * 
     * 删除数据记录
     * 
     * @param {mixed} records 数据记录
     * 
     * 
     */
    remove(records){

        records = from(records) ;

        let {
            recordMap,
            recordData
        } = this,
        removeRecords = [];

        for(let record of records){

            let {
                id
            } = record ;

            if(recordMap.has(id)){

                recordMap.delete(id) ;

                remove(recordData , record) ;

                record.unbindStore() ;

                removeRecords.push(record) ;
            }
        }

        return removeRecords ;
    }
 }

 /**
  * 
  * 待处理的数据记录
  * 
  * @param {mixed} records 数据记录
  * 
  */
 function getRecords(records){

    records = from(records) ;

    let {
        recordMap,
        recordData,
        store
    } = this,
    result = [];

    for(let record of records){

        if(isObject(record)){

            record = store.createRecord(record) ;
        }

        if(isModel(record)){

            let {
                id
            } = record ;

            if(recordMap.has(id)){

                record = recordMap.get(id) ;
    
                removeRecord(recordData , record) ;

                record.set(record.data) ;
            
            }else{

                recordMap.set(id , record) ;

                if(record.isBindStore && record.store !== store){

                    continue ;
                }

                record.bindStore(store) ;
            }

            result.push(record) ;
        }
    }

    return result ;
 }

 function removeRecord(recordData , record){

    let index = recordData.indexOf(record) ;

    if(index !== -1){

        recordData[index] = undefined ;
    }
 }

 function resetRecordData(recordData){

    let index ;

    while((index = recordData.indexOf(undefined)) !== -1){

        removeIndex(recordData , index) ;
    }
 }


            var_class_1560479513121 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513121 ;
                }

            } ;
        }
        

                    return new var_class_1560479513121(store);
                } ;

            })()]]>
    </class>

    <class motify="1559024344382" signature="<void> src::data.store.base()"  name="src::data.store.base" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get">
        <![CDATA[(() =>{

                let get,create,assign,createProxy,isMemoryProxy,createReader,createRecordset;

                let var_init_locked_1560479513135;

                let var_class_1560479513135;

                

                return function(){

                    
        if(!var_init_locked_1560479513135){

            get = include('data.model.get');
create = include('data.model.create');
assign = include('object.assign');
createProxy = include('data.proxy.create');
isMemoryProxy = include('is.proxy.memory');
createReader = include('data.reader.json');
createRecordset = include('data.recordset');

            var_init_locked_1560479513135 = true ;
        }
        

                    
        if(!var_class_1560479513135){

            
/**
 * 
 * 数据存储器
 * 
 * @import get from data.model.get
 * 
 * @import create from data.model.create
 * 
 * @import assign from object.assign
 * 
 * @import createProxy from data.proxy.create
 * 
 * @import isMemoryProxy from is.proxy.memory
 * 
 * @import createReader from data.reader.json
 * 
 * @import createRecordset from data.recordset
 * 
 * @class
 * 
 */

class main{

    createRecord(data){

        let records = this.reader(data) ;

        if(records.length){

            return records[0] ;
        }
    }

    onProxyRead(proxy , records){

        let me = this,
        {
            recordset
        } = me;

        recordset.add(records) ;

        me.fireEvent('load' , records) ;
    }
}

 

            var_class_1560479513135 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513135 ;
                }

            } ;
        }
        

                    return var_class_1560479513135;
                } ;

            })()]]>
    </class>

    <class motify="1559026999048" signature="<void> src::object.link(<mixed> dest , <mixed> source , <array> names)" entry-type="mixed mixed array"  name="src::object.link" imports="src::is.type src::is.function">
        <![CDATA[(() =>{

                let isFunction;

                let var_init_locked_1560479513151;

                

                

                function main(dest , source , names){

        /**
 * 
 * 将对象的方法或者属性进行链接
 * 
 * @import is.function
 * 
 * @param {mixed} dest 目标对象
 * 
 * @param {mixed} source 来源对象
 * 
 * @param {array} names 字段名称集合
 * 
 */

 for(let name of names){

    let value = source[name] ;

    if(isFunction(value)){

        dest[name] = (...args) => source[name](...args) ;
    
    }else{

        Object.defineProperty(dest , name , {

            set:value => source[name] = value,

            get:() => source[name]

        }) ;
    }
 }

    }

                return function(dest , source , names){

                    
        if(!var_init_locked_1560479513151){

            isFunction = include('is.function');

            var_init_locked_1560479513151 = true ;
        }
        

                    

                    return main.call(this , dest , source , names) ;
                } ;

            })()]]>
    </class>

    <class motify="1559026647287" signature="<void> src::data.store.constructor({<object> proxy , <mixed> data , <boolean> autoLoad , <array> fields , <data.Model> model})"  name="src::data.store.constructor" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::class.define src::data.model.create src::object.link">
        <![CDATA[(() =>{

                let create,get,assign,createProxy,isMemoryProxy,createReader,createRecordset,link;

                let var_init_locked_1560479513155;

                

                

                function main({proxy , data , autoLoad , fields , model}){

        
/**
 * 
 * 初始化数据存储器
 * 
 * @import create from data.model.create
 * 
 * @import get from data.model.get
 * 
 * @import assign from object.assign
 * 
 * @import createProxy from data.proxy.create
 * 
 * @import isMemoryProxy from is.proxy.memory
 * 
 * @import createReader from data.reader.json
 * 
 * @import createRecordset from data.recordset
 * 
 * @import link from object.link
 * 
 * @param {object} config 配置
 * 
 * @param {object} [config.proxy = {}] 数据代理
 * 
 * @param {mixed} [config.data] 初始数据
 * 
 * @param {boolean} [config.autoLoad = false] 自动加载
 * 
 * @param {array} [config.fields] 数据字段定义
 * 
 * @param {data.Model} [config.model] 数据模型
 * 
 * 
 */

if(fields){

    model = create({
        fields
    }) ;

}

if(model){

    model = get(model) ;

}

let me = this ;

me.fireEventDataCacheCount = 1 ;

(me.proxy = createProxy(assign({
    type:'memory',
    model,
    reader:{
        type:'json'
    }
} , proxy))).addListeners({
    read:'onProxyRead',
    scope:me
}) ;

let recordset = me.recordset = createRecordset(me) ;

if(data){

    let {
        proxy
    } = me ;

    if(isMemoryProxy(proxy)){

        proxy.read(data)
    }

}else if(autoLoad){

    me.load() ;
}

me.reader = createReader({
    model
}) ;

link(me , recordset , [
    'indexOf',
    'findRecords',
    'getById'
]) ;

    }

                return function({proxy = {} , data , autoLoad = false , fields , model}){

                    
        if(!var_init_locked_1560479513155){

            create = include('data.model.create');
get = include('data.model.get');
assign = include('object.assign');
createProxy = include('data.proxy.create');
isMemoryProxy = include('is.proxy.memory');
createReader = include('data.reader.json');
createRecordset = include('data.recordset');
link = include('object.link');

            var_init_locked_1560479513155 = true ;
        }
        

                    

                    return main.call(this , {proxy , data , autoLoad , fields , model}) ;
                } ;

            })()]]>
    </class>

    <class motify="1559018673717" signature="<void> src::data.store.add(<mixed> records , <boolean> isFireEvent)" entry-type="mixed boolean"  name="src::data.store.add">
        <![CDATA[(() =>{

                

                

                

                

                function main(records , isFireEvent){

        /**
 * 
 * 插入记录
 * 
 * @param {mixed} records 数据记录
 * 
 * @param {boolean} [isFireEvent = true] 是否触发插入事件
 * 
 */

let me = this,
 {
   recordset
 } = me ;

 records = recordset.add(records) ;

 if(records.length){

    if(isFireEvent){

      me.fireEvent('add' , records) ;
    }
 }

 return records ;

    }

                return function(records , isFireEvent = true){

                    

                    

                    return main.call(this , records , isFireEvent) ;
                } ;

            })()]]>
    </class>

    <class motify="1559013013943" signature="<void> src::data.store.insert(<number> index , <mixed> records , <boolean> isFireEvent)" entry-type="number mixed boolean"  name="src::data.store.insert">
        <![CDATA[(() =>{

                

                

                

                

                function main(index , records , isFireEvent){

        
/**
 * 
 * 插入记录
 * 
 * @param {number} index 插入位置
 * 
 * @param {mixed} records 数据记录
 * 
 * @param {boolean} [isFireEvent = true] 是否触发插入事件
 * 
 */

 let me = this,
 {
   recordset
 } = me ;

 records = recordset.insert(index , records) ;

 if(records.length){

    if(isFireEvent){

      me.fireEvent('insert' , index , records) ;
    }
 }

 return records ;

    }

                return function(index , records , isFireEvent = true){

                    

                    

                    return main.call(this , index , records , isFireEvent) ;
                } ;

            })()]]>
    </class>

    <class motify="1559013373128" signature="<void> src::data.store.remove(<mixed> records , <boolean> isFireEvent)" entry-type="mixed boolean"  name="src::data.store.remove" imports="src::array.remove.index src::array.remove src::is.type src::is.array src::is.empty src::is.string src::array.from">
        <![CDATA[(() =>{

                let remove,from;

                let var_init_locked_1560479513174;

                

                

                function main(records , isFireEvent){

        
/**
 * 
 * 删除记录
 * 
 * @import remove from array.remove
 * 
 * @import from from array.from
 * 
 * @param {mixed} records 数据记录
 * 
 * @param {boolean} [isFireEvent = true] 是否触发删除事件
 * 
 */

 let me = this,
 {
    recordset
 } = me;

 records = recordset.remove(records) ;

 if(records.length && isFireEvent){

   me.fireEvent('remove' , records) ;
 }

 return records ;






    }

                return function(records , isFireEvent = true){

                    
        if(!var_init_locked_1560479513174){

            remove = include('array.remove');
from = include('array.from');

            var_init_locked_1560479513174 = true ;
        }
        

                    

                    return main.call(this , records , isFireEvent) ;
                } ;

            })()]]>
    </class>

    <class motify="1559024384827" signature="<void> src::data.store.load(<mixed> options , <boolean> isClear)" entry-type="mixed boolean"  name="src::data.store.load">
        <![CDATA[(() =>{

                

                

                

                

                function main(options , isClear){

        
/**
 * 
 * 加载数据
 * 
 * @param {mixed} options 数据或者配置
 * 
 * @param {boolean} [isClear = true] 是否在加载前清除
 * 
 */

let me = this,
{
    proxy
} = me;

if(isClear){

    me.clear() ;
}

proxy.read(options) ;

    }

                return function(options , isClear = true){

                    

                    

                    return main.call(this , options , isClear) ;
                } ;

            })()]]>
    </class>

    <class motify="1559024331104" signature="<void> src::data.store.clear()"  name="src::data.store.clear">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 清理
 * 
 * 
 */

let me = this,
    {
        recordset
    } = me ;

recordset.clear() ;

me.fireEvent('clear') ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559027085061" signature="<void> src::data.store()"  name="src::data.store" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear">
        <![CDATA[(() =>{

                let mixin_1560479512460__1,extend,constructor,method_add,method_insert,method_remove,method_load,method_clear;

                let var_init_locked_1560479513180;

                let var_class_1560479513180;

                

                return function(){

                    
        if(!var_init_locked_1560479513180){

            mixin_1560479512460__1 = include('mixin.observable');
extend = include('src::data.store.base')();
constructor = include('src::data.store.constructor');
method_add = include('src::data.store.add');
method_insert = include('src::data.store.insert');
method_remove = include('src::data.store.remove');
method_load = include('src::data.store.load');
method_clear = include('src::data.store.clear');

            var_init_locked_1560479513180 = true ;
        }
        

                    
        if(!var_class_1560479513180){

            class main extends mixins({extend , mixins:[include('mixin.observable')]}){

            

            

            constructor(...args){

            super(...args) ;

            constructor.apply(this , args) ;

        }

            add(...args){

            return method_add.apply(this , args) ;

        }
insert(...args){

            return method_insert.apply(this , args) ;

        }
remove(...args){

            return method_remove.apply(this , args) ;

        }
load(...args){

            return method_load.apply(this , args) ;

        }
clear(...args){

            return method_clear.apply(this , args) ;

        }

            

        }

            var_class_1560479513180 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513180 ;
                }

            } ;
        }
        

                    return var_class_1560479513180;
                } ;

            })()]]>
    </class>

    <class motify="1559101686204" signature="<data.Fields> src::data.model.fields()"  name="src::data.model.fields" imports="src::is.type src::is.string src::is.array src::is.empty src::array.from src::is.object.simple src::is.defined src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store">
        <![CDATA[(() =>{

                let isString,from,isObject,isDefined,getModel,Store;

                let var_init_locked_1560479513199;

                

                

                
/**
 * 
 * 获取数据字段定义集合
 * 
 * @import is.string
 * 
 * @import from from array.from
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.defined
 * 
 * @import getModel from data.model.get
 * 
 * @import Store from data.store value
 * 
 * @return {data.Fields} 字段定义集合 
 * 
 */

const createConvertFn = mapping => data => data[mapping],
    defaultGetFn = data => data,
    defaultEqualsFn = (value , oldValue) => value !== oldValue,
    defaultSetFn = function(value , name){

        this.data[name] = value ;
    },
    {
        assign,
        keys
    } = Object;

 function main(){

    let me = this,
    {
        $fields
    } = me;

    if($fields){

        return $fields ;
    }

    let {
        fieldConfigurations
    } = me,
    fields = [];

    for(let fieldConfig of fieldConfigurations){

        if(isString(fieldConfig)){

            fieldConfig = {
                name:fieldConfig,
                convert:createConvertFn(fieldConfig),
                get:defaultGetFn,
                equals:defaultEqualsFn,
                set:defaultSetFn
            } ;

        }else if(isObject(fieldConfig)){

            let {
                name,
                convert,
                mapping,
                persistent = false,
                get = defaultGetFn,
                equals = defaultEqualsFn,
                set = defaultSetFn,
                defaultValue,
                ...otherFieldConfig
            } = fieldConfig ;

            if(persistent){

                convert = () => defaultValue ;

            }else{

                if(mapping){

                    convert = createConvertFn(mapping) ;
                }

                convert = convert || createConvertFn(name) ;

                if(isDefined(defaultValue)){

                    let oldConvert = convert;

                    convert = (data) => {

                        let value = oldConvert(data) ;
                        
                        return isDefined(value) ? value : defaultValue ;

                    } ;
                }
            }

            fieldConfig = {
                name,
                convert,
                get,
                set,
                equals,
                ...otherFieldConfig
            } ;
        }

        if(isObject(fieldConfig)){

            let {
                hasMany,
                hasOne,
                belongsTo
            } = fieldConfig ;

            let association ;

            if(hasMany){

                association = {
                    type:'hasMany',
                    ...hasMany
                } ;

                delete fieldConfig.hasMany ;
            }

            if(hasOne){

                association = {
                    type:'hasOne',
                    ...hasOne
                } ;
                
                delete fieldConfig.hasOne ;
            }


            if(belongsTo){

                association = {
                    type:'belongsTo',
                    ...belongsTo
                } ;

            }

            if(association){

                assign(fieldConfig , getAssociationConfig(me , association)) ;
            }
        }

        fields.push(fieldConfig) ;
    }

    return me.$fields = new Fields(fields) ;
 }

 function getAssociationConfig(model , {
    model:AssociationModel,
    autoLoad,
    type,
    associationKey,
    assocationMode = 'local-data'
}){

   if(AssociationModel){

       AssociationModel = getModel(associationModel) ;
   
   }else{

       AssociationModel = model ;
   }

   switch(type){

       case 'hasMany':

           switch(assocationMode){

               case 'local-data':

                   return {
                       convert:data => new Store({
                           model:AssociationModel,
                           autoLoad,
                           data,
                           proxy:{
                               reader:{
                                   rootProperty:associationKey
                               }
                           }
                       })
                   } ;

               case 'local-key':

                   return {
                       convert:data => from(createConvertFn(associationKey)(data)),
                       get:keys => this.store.getByIds(keys)
                   } ;

               case 'remote-key':

                   // 等待远程 AJAX 代理实现

               break ;
           }

           break ;

       case 'hasOne':
       case 'belongsTo':

               switch(assocationMode){

                   case 'local-data':
   
                       return {
                           convert:data => new AssociationModel({
                               autoLoad,
                               data,
                               proxy:{
                                   reader:{
                                       rootProperty:associationKey
                                   }
                               }
                           })
                       } ;
   
                   case 'local-key':

                       return {
                           convert:createConvertFn(associationKey),
                           get(key){

                               let {
                                   store
                               } = this ;

                               if(store){

                                   return store.getById(key) ;
                               }

                               
                           }
                       } ;
   
                   case 'remote-key':

                       // 等待远程 AJAX 代理实现
   
                   break ;
               }
   }
}

class Fields{

    constructor(fields){

        let me = this,
            names = [],
            innerFields = [] ;

        for(let field of fields){

            let {
                name
            } = field ;

            if(!names.includes(name)){

                innerFields.push(field) ;

                names.push(name) ;
            
            }else{

                innerFields[names.indexOf(name)] = field ;
            }
        }

        me.fields = innerFields ;

        me.names = names ;
    }

    getField(name){

        let me = this,
            index = getFieldIndex.call(me , name);

        if(index !== -1){

           return me.fields[index] ;
        }
    }

    hasField(name){

        return getFieldIndex.call(this , name) !== -1 ;
    }

    get converts(){

        let {
            fields
        } = this,
        converts = {};
    
        for(let {
            name,
            convert
        } of fields){
    
            converts[name] = convert ;
        }

        return converts ;
    }
 }

 function getFieldIndex(name){

    let {
        names
    } = this ;

    return names.indexOf(name) ;
 }

                return function(){

                    
        if(!var_init_locked_1560479513199){

            isString = include('is.string');
from = include('array.from');
isObject = include('is.object.simple');
isDefined = include('is.defined');
getModel = include('data.model.get');
Store = include('data.store')();

            var_init_locked_1560479513199 = true ;
        }
        

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559093984950" signature="<boolean> src::data.model.store.isBind()"  name="src::data.model.store.isBind">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 检测当前记录是否绑定存储器
 * 
 * @return {boolean} 如果记录绑定存储器则返回 true , 否则返回 false 
 * 
 */

 return this.hasOwnProperty('store') ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302669" signature="<string> src::id.generate(<string> prefix)" entry-type="string"  name="src::id.generate">
        <![CDATA[(() =>{

                

                

                

                

                
/**
 * 
 * 生成唯一的编号
 * 
 * @param {string} prefix 编号前缀
 * 
 * @return {string} 生成后的唯一编号 
 * 
 */

 let count = 1 ; 

 function main(prefix = 'zb-'){

    return `${prefix}${count ++}` ;

 }

                return function(prefix){

                    

                    

                    return main.call(this , prefix) ;
                } ;

            })()]]>
    </class>

    <class motify="1559106394371" signature="<mixed> src::data.model.id()"  name="src::data.model.id" imports="src::id.generate">
        <![CDATA[(() =>{

                let getId;

                let var_init_locked_1560479513217;

                

                

                function main(){

        
/**
 * 
 * 返回数据记录编号
 * 
 * @import getId from id.generate
 * 
 * @return {mixed} 编号 
 * 
 */

let me = this,
{
    $id
} = me;

if($id){

    return $id ;
}

let {
    idProperty
} = me ;

if(me.has(idProperty)){

    return me.$id =  me.get(idProperty) ;

}

return me.$id = getId('model-') ;

    }

                return function(){

                    
        if(!var_init_locked_1560479513217){

            getId = include('id.generate');

            var_init_locked_1560479513217 = true ;
        }
        

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559093849700" signature="<mixed> src::data.model.store.bind(<data.Store> store)" entry-type="data.Store"  name="src::data.model.store.bind">
        <![CDATA[(() =>{

                

                

                

                

                function main(store){

        
/**
 * 
 * 绑定存储器
 * 
 * @param {data.Store} store 数据存储器
 * 
 * @return {mixed} 返回说明 
 * 
 */

let me = this ;

if(!me.isBindStore){

    me.store = store ;
}

    }

                return function(store){

                    

                    

                    return main.call(this , store) ;
                } ;

            })()]]>
    </class>

    <class motify="1559093939560" signature="<void> src::data.model.store.unbind()"  name="src::data.model.store.unbind">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 解绑存储器
 * 
 */

 delete this.store ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559107132508" signature="<boolean> src::data.model.has(<string> name)" entry-type="string"  name="src::data.model.has">
        <![CDATA[(() =>{

                

                

                

                

                function main(name){

        
/**
 * 
 * 判断是否拥有此字段
 * 
 * @param {string} name 字段名称
 * 
 * @return {boolean} 如果拥有指定字段则返回 true , 否则返回 false
 * 
 */

let {
    fields
} = this.ZBEE_CURRENT_CLASS ;

return fields.hasField(name) ;

    }

                return function(name){

                    

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1559532205399" signature="<void> src::data.model.value.set(<mixed> name , <mixed> value)" entry-type="mixed mixed"  name="src::data.model.value.set" imports="src::is.type src::is.string src::is.object.simple">
        <![CDATA[(() =>{

                let isString,isObject;

                let var_init_locked_1560479513224;

                

                

                function main(name , value){

        
/**
 * 
 * 设置属性
 * 
 * @import is.string
 * 
 * @import isObject from is.object.simple
 * 
 * @param {mixed} name 属性名称
 * 
 * @param {mixed} value 属性值
 * 
 */

let values ;

if(isString(name)){

    values = {
        [name]:value
    } ;

}else{

    values = name ;
}

if(isObject(values)){

    let me = this,
    {
        ZBEE_CURRENT_CLASS
    } = me,
    {
        fields
    } = ZBEE_CURRENT_CLASS,
    names = Object.keys(values),
    updateValues = {};

    for(let name of names){

        let field = fields.getField(name);

        if(field){

            let value = values[name],
                oldValue = me.get(name);

            if(field.equals.call(me , value , oldValue)){

                field.set.call(me , value , name) ;

                updateValues[name] = value ;

                me.fireEvent('update' , name , value , oldValue) ;
            }
        }
    }

    return updateValues ;
}

    }

                return function(name , value){

                    
        if(!var_init_locked_1560479513224){

            isString = include('is.string');
isObject = include('is.object.simple');

            var_init_locked_1560479513224 = true ;
        }
        

                    

                    return main.call(this , name , value) ;
                } ;

            })()]]>
    </class>

    <class motify="1559107520750" signature="<mixed> src::data.model.value.get(<mixed> name)" entry-type="mixed"  name="src::data.model.value.get">
        <![CDATA[(() =>{

                

                

                

                

                function main(name){

        
/**
 * 
 * 获取属性
 * 
 * @param {mixed} name 属性名称
 * 
 * @return {mixed} 返回说明 
 * 
 */

let me = this,
{
    data,
    ZBEE_CURRENT_CLASS
} = me,
{
    fields
} = ZBEE_CURRENT_CLASS,
field = fields.getField(name);

if(field){

    return field.get.call(me , data[name]) ;
}

    }

                return function(name){

                    

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1559108080291" signature="<void> src::data.model.load(<mixed> options)" entry-type="mixed"  name="src::data.model.load">
        <![CDATA[(() =>{

                

                

                

                

                function main(options){

        
/**
 * 
 * 加载数据
 * 
 * @param {mixed} options 加载配置
 * 
 * 
 */

this.proxy.read(options) ;

    }

                return function(options){

                    

                    

                    return main.call(this , options) ;
                } ;

            })()]]>
    </class>

    <class motify="1556617357251" signature="<mixed> src::data.model.destroy(<mixed> data)" entry-type="mixed"  name="src::data.model.destroy">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 函数实现说明
 * 
 * @param {mixed} data 参数说明
 * 
 * @return {mixed} 返回说明 
 * 
 */

 // 代码实现

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559108541577" signature="<void> src::data.model()"  name="src::data.model" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy">
        <![CDATA[(() =>{

                let mixin_1560479512446__1,extend,static_get_fields,get_isBindStore,get_id,method_bindStore,method_unbindStore,method_has,method_set,method_get,method_load,method_destroy;

                let var_init_locked_1560479513231;

                let var_class_1560479513231;

                

                return function(){

                    
        if(!var_init_locked_1560479513231){

            mixin_1560479512446__1 = include('mixin.observable');
extend = include('src::data.model.base')();
static_get_fields = include('src::data.model.fields');
get_isBindStore = include('src::data.model.store.isBind');
get_id = include('src::data.model.id');
method_bindStore = include('src::data.model.store.bind');
method_unbindStore = include('src::data.model.store.unbind');
method_has = include('src::data.model.has');
method_set = include('src::data.model.value.set');
method_get = include('src::data.model.value.get');
method_load = include('src::data.model.load');
method_destroy = include('src::data.model.destroy');

            var_init_locked_1560479513231 = true ;
        }
        

                    
        if(!var_class_1560479513231){

            class main extends mixins({extend , mixins:[include('mixin.observable')]}){

            

            static get fields(){

                return static_get_fields.call(this) ;
    
            }

            

            bindStore(...args){

            return method_bindStore.apply(this , args) ;

        }
unbindStore(...args){

            return method_unbindStore.apply(this , args) ;

        }
has(...args){

            return method_has.apply(this , args) ;

        }
set(...args){

            return method_set.apply(this , args) ;

        }
get(...args){

            return method_get.apply(this , args) ;

        }
load(...args){

            return method_load.apply(this , args) ;

        }
destroy(...args){

            return method_destroy.apply(this , args) ;

        }

            get isBindStore(){

                return get_isBindStore.call(this) ;
    
            }
get id(){

                return get_id.call(this) ;
    
            }

        }

            var_class_1560479513231 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513231 ;
                }

            } ;
        }
        

                    return var_class_1560479513231;
                } ;

            })()]]>
    </class>

    <class motify="1558348188349" signature="<boolean> src::is.class.from(<mixed> data , <mixed> baseClass)" entry-type="mixed mixed"  name="src::is.class.from" imports="src::is.type src::is.class src::is.string">
        <![CDATA[(() =>{

                let isClass,isString;

                let var_init_locked_1560479513255;

                

                

                function main(data , baseClass){

        
/**
 * 
 * 判定数据是否为指定类
 * 
 * @import is.class
 * 
 * @import is.string
 * 
 * @param {mixed} data 测试数据
 * 
 * @param {mixed} baseClass 基准类
 * 
 * @return {boolean} 如果数据为基准类时则返回 true ,  否则返回 false
 * 
 */

 if(isString(baseClass)){

    baseClass = include(baseClass)() ;
 }

 return isClass(data) && isClass(baseClass) && (data === baseClass || data.prototype instanceof baseClass) ;

    }

                return function(data , baseClass){

                    
        if(!var_init_locked_1560479513255){

            isClass = include('is.class');
isString = include('is.string');

            var_init_locked_1560479513255 = true ;
        }
        

                    

                    return main.call(this , data , baseClass) ;
                } ;

            })()]]>
    </class>

    <class motify="1558348224813" signature="<boolean> src::is.data.model.class(<mixed> data)" entry-type="mixed"  name="src::is.data.model.class" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::data.model.get src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from">
        <![CDATA[(() =>{

                let dataModel,isClass;

                let var_init_locked_1560479513257;

                

                

                function main(data){

        
/**
 * 
 * 判断是否为数据模型类
 * 
 * 
 * @import data.model
 * 
 * @import isClass from is.class.from
 * 
 * @param {mixed} data 参照数据
 * 
 * @return {boolean} 如果是数据模型类则返回 true , 否则返回 false 
 * 
 */

 return isClass(data , 'data.model') ;



    }

                return function(data){

                    
        if(!var_init_locked_1560479513257){

            dataModel = include('data.model');
isClass = include('is.class.from');

            var_init_locked_1560479513257 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1558581661959" signature="<data.Model> src::data.model.get(<mixed> model)" entry-type="mixed"  name="src::data.model.get" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::is.defined src::class.create.option src::object.proxy src::is.object src::object.key.join src::object.value.get src::is.empty src::array.from src::data.reader.json src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class">
        <![CDATA[(() =>{

                let Model,isModelClass,isString,isFunction;

                let var_init_locked_1560479513271;

                

                

                function main(model){

        /**
* 
* 获取数据模型类引用
* 
* @import Model from data.model value
* 
* @import isModelClass from is.data.model.class
* 
* @import is.string
* 
* @import is.function
* 
* @param {mixed} model 数据模型名称
* 
* @return {data.Model} 模型类引用
* 
*/

if(isString(model)){

   model = include(`data.model.${model}`) ;
}

if(isModelClass(model)){

   return model ;
}

return Model ;

    }

                return function(model){

                    
        if(!var_init_locked_1560479513271){

            Model = include('data.model')();
isModelClass = include('is.data.model.class');
isString = include('is.string');
isFunction = include('is.function');

            var_init_locked_1560479513271 = true ;
        }
        

                    

                    return main.call(this , model) ;
                } ;

            })()]]>
    </class>

    <class motify="1558672651143" signature="<function> src::data.reader.json({<string> rootProperty , <function> model , <boolean> isModelData})"  name="src::data.reader.json" imports="src::is.type src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get src::is.string src::is.function src::is.empty src::array.from src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::class.create.option src::object.proxy src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get">
        <![CDATA[(() =>{

                let objectValueGet,isString,isFunction,arrayFrom,isEmpty,getModel;

                let var_init_locked_1560479513287;

                

                

                /**
 * 
 * JSON 数据读取器
 * 
 * @import object.value.get
 * 
 * @import is.string
 * 
 * @import is.function
 * 
 * @import array.from
 * 
 * @import is.empty
 * 
 * @import getModel from data.model.get
 * 
 * @param {object} [config = {}] 读取参数设置
 * 
 * @param {string} [config.rootProperty = '.'] 读取数据的根
 * 
 * @param {function} [config.model] 数据模型类
 * 
 * @param {boolean} [config.isModelData = true] 是否解析成模型化的数据 
 * 
 * @return {function} 读取器所生成的解析函数
 * 
 */

 function main({
   rootProperty,
   model,
   isModelData
 }){

   const Model = getModel(model) ;

   let {
      fields
   } = Model ;

   return  (new Function('data' , `

      var me = this,
         include = me.include,
         converts = me.converts,
         createModel = me.createModel,
         get = include('object.value.get'),
         from = include('array.from'),
         isEmpty = include('is.empty');

      ${generate_get_root_data(rootProperty)}

      data = from(data) ;

      var result = [],
          len = data.length;

      for(var i = 0 ; i < len ; i ++){

         var item = {},
             currentItem = data[i];

         ${generate_get_field_data(fields)}

         result.push(createModel(item)) ;
      }

      return result;

    `)).bind({
       include,
       converts:fields.converts,
       createModel:data => isModelData ? new Model({
         innerData:data
       }) : data
    });
 }

 function generate_get_root_data(rootProperty){

   if(rootProperty !== '.'){

      return `data = get(data , '${rootProperty}');` ;
   }

   return '' ;
 }

 function generate_get_field_data({
   names
 }){

   let result = [] ;

   for(let name of names){

      result.push(`item['${name}'] = converts['${name}'](currentItem);`) ;

      result.push(`if(isEmpty(item['${name}'])){

         delete item['${name}'];
      
      }`) ;
   }

   return result.join('') ;
 }

                return function({rootProperty = '.' , model , isModelData = true} = {}){

                    
        if(!var_init_locked_1560479513287){

            objectValueGet = include('object.value.get');
isString = include('is.string');
isFunction = include('is.function');
arrayFrom = include('array.from');
isEmpty = include('is.empty');
getModel = include('data.model.get');

            var_init_locked_1560479513287 = true ;
        }
        

                    

                    return main.call(this , {rootProperty , model , isModelData}) ;
                } ;

            })()]]>
    </class>

    <class motify="1557986783258" signature="<void> src::data.connection.ajax.request(<string> url , {<string> method , <object> query , <object> params , <object> path , <boolean> requestJSON , <boolean> responseHeaders})"  name="src::data.connection.ajax.request" imports="src::is.type src::is.string src::url.append src::regexp.int src::url.template.apply src::is.object.simple src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get src::is.function src::is.empty src::array.from src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::is.class src::class.create src::class.create.option src::object.proxy src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.keys src::string.split src::object.value.set src::object.assign.if src::data.model.base src::class.define src::data.model.create src::object.assign src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json" dependent-modules="axios:^0.18.0;qs:^6.7.0">
        <![CDATA[(() =>{

                let append,apply,isObject,createReader;

                let var_init_locked_1560479513306;

                

                

                function main(url , {method , query , params , path , requestJSON , responseHeaders}){

        
/**
 * 
 * 基于 AJAX 进行数据交互
 * 
 * @import append from url.append
 * 
 * @import apply from url.template.apply
 * 
 * @import isObject from is.object.simple
 * 
 * @import createReader from data.reader.json
 * 
 * @require axios
 * 
 * @require qs
 * 
 * @param {string} url 请求路径
 * 
 * @param {object} [config] 请求配置
 * 
 * @param {string} [config.method = 'GET'] 请求方式，默认是 GET 请求
 * 
 * @param {object} [config.query] GET请求的参数集合
 * 
 * @param {object} [config.params = {}] 请求主体的参数集合
 * 
 * @param {object} [config.path] 以路径参数形式提交的参数集合
 * 
 * @param {boolean} [config.requestJSON = true] 是否以 JSON方式提交数据
 * 
 * @param {boolean} [config.responseHeaders = false] 是否返回头部信息
 * 
 */

if(query){

    url = append(url , query) ;
}

if(path){

    url = apply(url , path) ;
}

const axios = require('axios'),
{
    stringify
} = require('qs');

switch(method){

    case 'GET':
    case 'DELETE':

        url = append(url , params) ;

        break ;

    case 'POST':
    case 'PUT':

        if(requestJSON === false){

            params = stringify(params) ;
        }
}

let result = axios[method.toLowerCase()](url , params) ;

if(responseHeaders){

    return result.then(({
        data,
        headers
    }) => {
        data,
        headers
    }) ;
}

return result.then(({
    data
}) => data) ;

    }

                return function(url , {method = 'GET' , query , params = {} , path , requestJSON = true , responseHeaders = false}){

                    
        if(!var_init_locked_1560479513306){

            append = include('url.append');
apply = include('url.template.apply');
isObject = include('is.object.simple');
createReader = include('data.reader.json');

            var_init_locked_1560479513306 = true ;
        }
        

                    

                    return main.call(this , url , {method , query , params , path , requestJSON , responseHeaders}) ;
                } ;

            })()]]>
    </class>

    <class motify="1560159095746" signature="<void> src::data.connection.ajax(<object> options)" entry-type="object"  name="src::data.connection.ajax" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create src::data.connection.base src::data.connection.accept src::data.connection.subscribe src::data.connection.unsubscribe src::data.connection.subscribes src::data.connection.unsubscribes src::data.connection.resubscribes src::data.connection src::url.append src::regexp.int src::url.template.apply src::array.from src::class.create.option src::object.proxy src::data.proxy.constructor src::is.promise src::data.proxy.read src::data.proxy src::data.proxy.memory src::data.proxy.create src::is.proxy.memory src::object.assign.if src::data.model.base src::class.define src::data.model.create src::array.remove.index src::array.remove src::array.insert src::is.data.model src::array.clone src::data.recordset src::data.store.base src::object.link src::data.store.constructor src::data.store.add src::data.store.insert src::data.store.remove src::data.store.load src::data.store.clear src::data.store src::data.model.fields src::data.model.store.isBind src::id.generate src::data.model.id src::data.model.store.bind src::data.model.store.unbind src::data.model.has src::data.model.value.set src::data.model.value.get src::data.model.load src::data.model.destroy src::data.model src::is.class.from src::is.data.model.class src::data.model.get src::data.reader.json src::data.connection.ajax.request" dependent-modules="url-join:^4.0.0">
        <![CDATA[(() =>{

                let Connection,request;

                let var_init_locked_1560479513322;

                let var_class_1560479513322;

                

                return function(options){

                    
        if(!var_init_locked_1560479513322){

            Connection = include('data.connection')();
request = include('src::data.connection.ajax.request');

            var_init_locked_1560479513322 = true ;
        }
        

                    
        if(!var_class_1560479513322){

            
/**
 * 
 * 基于 AJAX 进行数据交互
 * 
 * @import Connection from data.connection value
 * 
 * @import request from .ajax.request
 * 
 * @require url-join
 * 
 * @param {object} options 配置
 * 
 */

 const join = require('url-join') ;

 class main extends Connection{

    constructor({
        ajax
    }){

        super() ;

        let {
            url:ajaxURL
        } = ajax ;

        this.ajaxURL = ajaxURL ;
    }

    processSubscribeParams(subscriber , params){

        let {
            ajaxURL
        } = this ;

        return [
            join(ajaxURL , subscriber.name),
            params
        ] ;
    }

    validateMessage(subscriber , {
        subscriber:messageSubscriber
    }){

        return subscriber === messageSubscriber ;
    }

    processMessage(subscriber , data){

        return {
            subscriber,
            data
        } ;
    }

    async doSubscriberOpen(subscriber , url , params){

        this.acceptMessage(subscriber , await request(url , params)) ;

    }
 }


            var_class_1560479513322 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513322 ;
                }

            } ;
        }
        

                    return new var_class_1560479513322(options);
                } ;

            })()]]>
    </class>

    <class motify="1560158091516" signature="<void> src::data.Subscriber.constructor(<string> name , {<boolean> accumulationMode , <object> extraParams , <object> defaultParams})"  name="src::data.Subscriber.constructor" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map">
        <![CDATA[(() =>{

                let createMap;

                let var_init_locked_1560479513340;

                

                

                function main(name , {accumulationMode , extraParams , defaultParams}){

        
/**
 * 
 * 初始化订阅器
 * 
 * @import createMap from map
 * 
 * @param {string} name 订阅名称
 * 
 * @param {object} config 订阅器配置
 * 
 * @param {boolean} [config.accumulationMode = false] 是否启动累积模型，当启动累积模型后则所有的接收消息都会被缓存，默认为 false
 * 
 * @param {object} [config.extraParams = {}] 附加参数
 * 
 * @param {object} [config.defaultParams = {}] 默认参数
 * 
 */

let me = this ;

me.name = name ;

me.extraParams = extraParams ;

me.defaultParams = defaultParams ;

me.accumulationMode = accumulationMode ;

me.cache = [] ;

me.bindCallbacks = createMap() ;

me.closed = true ;

    }

                return function(name , {accumulationMode = false , extraParams = {} , defaultParams = {}}){

                    
        if(!var_init_locked_1560479513340){

            createMap = include('map');

            var_init_locked_1560479513340 = true ;
        }
        

                    

                    return main.call(this , name , {accumulationMode , extraParams , defaultParams}) ;
                } ;

            })()]]>
    </class>

    <class motify="1559716967440" signature="<void> src::data.Subscriber.accept(<mixed> data)" entry-type="mixed"  name="src::data.Subscriber.accept" imports="src::is.defined">
        <![CDATA[(() =>{

                let isDefined;

                let var_init_locked_1560479513345;

                

                

                function main(data){

        
/**
 * 
 * 接收数据
 * 
 * @import is.defined
 * 
 * @param {mixed} data 数据
 * 
 * 
 */

let {
    closed,
    bindCallbacks,
    accumulationMode,
    cache,
    params
} = this,
results = [];

if(closed){

    return results;
}

bindCallbacks.forEach(callback => {

    let result = callback(data , params) ;

    if(isDefined(result)){

        results.push(result) ;
    }

}) ;

if(accumulationMode === false){

    cache.length = 0 ;
}

cache.push({
    params,
    data
}) ;

return results ;

    }

                return function(data){

                    
        if(!var_init_locked_1560479513345){

            isDefined = include('is.defined');

            var_init_locked_1560479513345 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717839544" signature="<void> src::data.Subscriber.bind(<fucntion> fn , <mixed> scope)" entry-type="fucntion mixed"  name="src::data.Subscriber.bind" imports="src::is.type src::is.string src::is.function src::function.empty src::function.get">
        <![CDATA[(() =>{

                let get;

                let var_init_locked_1560479513347;

                

                

                function main(fn , scope){

        
/**
 * 
 * 绑定函数
 * 
 * @import get from function.get
 * 
 * @param {fucntion} fn 绑定函数
 * 
 * @param {mixed} scope 绑定函数作用域
 * 
 */

let me = this,{
    bindCallbacks,
    cache
} = me;

fn = get(fn , scope) ;

for(let {
    data,
    params
} of cache){

    fn(data , params) ;
}

bindCallbacks.set(fn , scope , fn) ;

return me;

    }

                return function(fn , scope){

                    
        if(!var_init_locked_1560479513347){

            get = include('function.get');

            var_init_locked_1560479513347 = true ;
        }
        

                    

                    return main.call(this , fn , scope) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717646420" signature="<void> src::data.Subscriber.reopen()"  name="src::data.Subscriber.reopen">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 重新打开订阅器
 * 
 */

let me = this,
{
    closed,
    params
} = me ;

if(!closed){

    me.close() ;

    me.open(params) ;
}

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1560157843606" signature="<void> src::data.Subscriber.open(<object> params)" entry-type="object"  name="src::data.Subscriber.open" imports="src::is.object.simple src::object.keys src::is.type src::is.array src::is.object src::is.defined src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign">
        <![CDATA[(() =>{

                let equals,assign;

                let var_init_locked_1560479513351;

                

                

                function main(params){

        
/**
 * 
 * 打开订阅器
 * 
 * @import equals from object.equals
 * 
 * @import assign from object.assign
 * 
 * @param {object} [params = {}] 订阅参数
 * 
 */

let me = this,
{
    extraParams,
    defaultParams,
    params:oldParams
} = me ;

params = assign({} , defaultParams , params , extraParams) ;

if(!oldParams || !equals(params , oldParams)){

    me.close() ;

    me.params = params ;

    me.closed = false ;
    
    me.fireEvent('open' , params , oldParams) ;
}

    }

                return function(params = {}){

                    
        if(!var_init_locked_1560479513351){

            equals = include('object.equals');
assign = include('object.assign');

            var_init_locked_1560479513351 = true ;
        }
        

                    

                    return main.call(this , params) ;
                } ;

            })()]]>
    </class>

    <class motify="1560158075765" signature="<void> src::data.Subscriber.close()"  name="src::data.Subscriber.close">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 关闭订阅器
 * 
 */

let me = this,
{
    closed,
    params,
    cache
} = me;

if(closed){

    return ;
}

delete me.params ;

cache.length = 0 ;

me.closed = true ;

me.fireEvent('close' , params) ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1559717802351" signature="<void> src::data.Subscriber.destroy()"  name="src::data.Subscriber.destroy">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 销毁
 * 
 */

let me = this ;

me.close() ;

let {
     bindCallbacks
} = this ;

bindCallbacks.clear() ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1560136555092" signature="<void> src::data.Subscriber()"  name="src::data.Subscriber" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.Subscriber.constructor src::is.defined src::data.Subscriber.accept src::data.Subscriber.bind src::data.Subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.Subscriber.open src::data.Subscriber.close src::data.Subscriber.destroy">
        <![CDATA[(() =>{

                let mixin_1560479512497__1,extend,constructor,method_accept,method_bind,method_reopen,method_open,method_close,method_destroy;

                let var_init_locked_1560479513357;

                let var_class_1560479513357;

                

                return function(){

                    
        if(!var_init_locked_1560479513357){

            mixin_1560479512497__1 = include('mixin.observable');
extend = include('class.empty')();
constructor = include('src::data.Subscriber.constructor');
method_accept = include('src::data.Subscriber.accept');
method_bind = include('src::data.Subscriber.bind');
method_reopen = include('src::data.Subscriber.reopen');
method_open = include('src::data.Subscriber.open');
method_close = include('src::data.Subscriber.close');
method_destroy = include('src::data.Subscriber.destroy');

            var_init_locked_1560479513357 = true ;
        }
        

                    
        if(!var_class_1560479513357){

            class main extends mixins({extend , mixins:[include('mixin.observable')]}){

            

            

            constructor(...args){

            super(...args) ;

            constructor.apply(this , args) ;

        }

            accept(...args){

            return method_accept.apply(this , args) ;

        }
bind(...args){

            return method_bind.apply(this , args) ;

        }
reopen(...args){

            return method_reopen.apply(this , args) ;

        }
open(...args){

            return method_open.apply(this , args) ;

        }
close(...args){

            return method_close.apply(this , args) ;

        }
destroy(...args){

            return method_destroy.apply(this , args) ;

        }

            

        }

            var_class_1560479513357 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513357 ;
                }

            } ;
        }
        

                    return var_class_1560479513357;
                } ;

            })()]]>
    </class>

    <class motify="1560146137621" signature="<void> src::data.connection.message.address(<string> name , <object> options)" entry-type="string object"  name="src::data.connection.message.address" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::is.object.simple src::is.type src::is.function src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::is.string src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::is.array src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.Subscriber.constructor src::is.defined src::data.Subscriber.accept src::data.Subscriber.bind src::data.Subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.Subscriber.open src::data.Subscriber.close src::data.Subscriber.destroy src::data.Subscriber">
        <![CDATA[(() =>{

                let Subscriber;

                let var_init_locked_1560479513367;

                let var_class_1560479513367;

                

                return function(name , options){

                    
        if(!var_init_locked_1560479513367){

            Subscriber = include('data.Subscriber')();

            var_init_locked_1560479513367 = true ;
        }
        

                    
        if(!var_class_1560479513367){

            
/**
 * 
 * 消息地址
 * 
 * @import Subscriber from data.Subscriber value
 * 
 * @param {string} name 消息地址
 * 
 * @param {object} options 消息配置
 * 
 */

 class main extends Subscriber{

    send(to , data){

        let me = this ;

        me.fireEvent('send' , {
            from:me.name,
            to,
            data
        }) ;
    }

    accept(data){

        let me = this,
            results = super.accept(data),
            {
                from
            } = data;

        if(from){

            for(let result of results){

                if(result instanceof Promise){

                    result.then(data => me.send(from , data)) ;
                
                }else{

                    me.send(from , result) ;
                }
            }
        }
    }
 }

 

            var_class_1560479513367 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513367 ;
                }

            } ;
        }
        

                    return new var_class_1560479513367(name , options);
                } ;

            })()]]>
    </class>

    <class motify="1560146723970" signature="<void> src::data.connection.message()"  name="src::data.connection.message" imports="src::is.object.simple src::is.type src::is.string src::is.function src::is.boolean src::is.array src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::mixin.observable.constructor src::mixin.observable.fire.data.last src::mixin.observable.listeners.clear.all src::mixin.observable.listeners.clear src::mixin.observable.listeners.add src::mixin.observable.listeners.remove src::function.empty src::function.get src::mixin.observable.listener.add src::mixin.observable.listener.remove src::mixin.observable.listener.has src::mixin.observable.fire src::mixin.observable.events.suspend src::mixin.observable.events.resume src::mixin.observable src::data.subscriber.constructor src::is.defined src::data.subscriber.accept src::data.subscriber.bind src::data.subscriber.reopen src::object.keys src::is.object src::object.key.join src::object.value.get src::object.equals src::is.empty src::string.split src::object.value.set src::object.assign src::data.subscriber.open src::data.subscriber.close src::data.subscriber.destroy src::data.subscriber src::is.class src::class.create src::data.connection.base src::data.connection.accept src::data.connection.subscribe src::data.connection.unsubscribe src::data.connection.subscribes src::data.connection.unsubscribes src::data.connection.resubscribes src::data.connection src::data.connection.socket src::data.Subscriber.constructor src::data.Subscriber.accept src::data.Subscriber.bind src::data.Subscriber.reopen src::data.Subscriber.open src::data.Subscriber.close src::data.Subscriber.destroy src::data.Subscriber src::data.connection.message.address">
        <![CDATA[(() =>{

                let Socket,isObject,isString,createAddress,isDefined;

                let var_init_locked_1560479513375;

                let var_class_1560479513375;

                

                return function(){

                    
        if(!var_init_locked_1560479513375){

            Socket = include('data.connection.socket')();
isObject = include('is.object.simple');
isString = include('is.string');
createAddress = include('data.connection.message.address');
isDefined = include('is.defined');

            var_init_locked_1560479513375 = true ;
        }
        

                    
        if(!var_class_1560479513375){

            /**
 * 
 * 消息订阅
 * 
 * @import Socket from data.connection.socket value
 * 
 * @import isObject from is.object.simple
 * 
 * @import is.string
 * 
 * @import createAddress from data.connection.message.address
 * 
 * @import is.defined
 * 
 * @singleton
 * 
 */

 class main extends Socket{

    constructor(){

        super({
            subscriber:createAddress
        }) ;
    }

    processMessage({
        from,
        to,
        data
    }){

        return {
            params:{
                address:to
            },
            data:{
                from,
                to,
                data
            }
        } ;
    }

    get subscriberListeners(){

        return {
            ...super.subscriberListeners,
            send:'onMessageSend'
        } ;
    }

    subscribe(name){

        return super.subscribe(name , {
            params:{
                address:name
            }
        }) ;
    }

    onMessageSend(address , message){

        this.acceptMessage(message) ;
    }

    send(address , data){

        if(isString(address)){

            address = {
                to:address
            } ;
        }

        if(isObject(address)){

            if(!address.hasOwnProperty('data')){

                address = {
                    ...address,
                    data
                } ;
            }

            this.acceptMessage(address) ;
        }
    }
 }

            var_class_1560479513375 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513375 ;
                }

            } ;
        }
        

                    return new var_class_1560479513375();
                } ;

            })()]]>
    </class>

    <class motify="1560332229758" signature="<mixed> src::data.connection.react(<object> mixins , <mixed> componentClass)" entry-type="object mixed"  name="src::data.connection.react" imports="src::is.type src::is.string src::is.object.simple">
        <![CDATA[(() =>{

                let isString,isObject;

                let var_init_locked_1560479513390;

                

                

                function main(mixins , componentClass){

        /**
 * 
 * 基于数据连接的 React 封装
 * 
 * @import is.string
 * 
 * @import isObject from is.object.simple
 * 
 * @param {object} mixins Socket 对象
 * 
 * @param {mixed} componentClass 组件类引用
 * 
 * @return {mixed} 组件类引用
 * 
 * @non-standard
 * 
 */

 const {
     socket,
     ajax
 } = mixins;

class Component extends componentClass{

    constructor(props){

        super(props) ;

        this.connection_subscribed = false ;
    }

    componentDidMount() {

        let me = this,
        {
            connection_subscribed
        } = me;

        if(!connection_subscribed){

            if(socket){
                
                let {
                    subscribers = {}
                } = me ;

                me.subscribers = socket.subscribes({
                    ...subscribers,
                    scope:me
                }) ;
            }

            if(ajax){
        
                let {
                    loaders = {}
                } = me ;

                me.loaders = ajax.subscribes({
                    ...loaders,
                    scope:me
                }) ;
            }

            me.connection_subscribed = true ;
        }

        if (super.componentDidMount) {

            super.componentDidMount();
        }
    }

    componentWillUnmount(){

        if (super.componentWillUnmount) {

            super.componentWillUnmount();
        }

        let me = this,
        {
            connection_subscribed
        } = me;

        if(connection_subscribed){

            let {
                subscribers = {},
                loaders = {}
            } = me,
            {
                keys
            } = Object;

            if(socket){

                socket.unsubscribes(keys(subscribers)) ;
            }

            if(ajax){

                ajax.unsubscribes(keys(loaders)) ;
            }

            me.connection_subscribed = false ;
        }
    }
    
} ;

return props => <Component {...props} socket={socket} ajax={ajax}/> ;

    }

                return function(mixins , componentClass){

                    
        if(!var_init_locked_1560479513390){

            isString = include('is.string');
isObject = include('is.object.simple');

            var_init_locked_1560479513390 = true ;
        }
        

                    

                    return main.call(this , mixins , componentClass) ;
                } ;

            })()]]>
    </class>

    <class motify="1560410065076" signature="<mixed> src::data.connection.vue(<object> mixins , <mixed> component)" entry-type="object mixed"  name="src::data.connection.vue" imports="src::function.empty">
        <![CDATA[(() =>{

                let empty;

                let var_init_locked_1560479513393;

                

                

                function main(mixins , component){

        
/**
 * 
 * 基于数据连接的 VUE 封装
 * 
 * @import empty from function.empty value
 * 
 * @param {object} mixins Socket 对象
 * 
 * @param {mixed} component 组件定义对象
 * 
 * @return {mixed} 组件定义对象
 * 
 */

 const {
    socket,
    ajax
 } = mixins,{
    mounted = empty,
    destroyed = empty,
    subscribers = {},
    loaders = {},
    ...options
 } = component,
 {
    keys
 } = Object;

 return {
    mounted(){

        let me = this;

        if(socket){
            
            me.$subscribers = socket.subscribes({
                ...subscribers,
                scope:me
            }) ;
        }

        if(ajax){

            me.$loaders = ajax.subscribes({
                ...loaders,
                scope:me
            }) ;
        }

        mounted.call(me) ;
    },

    destroyed(){

        let me = this ;

        destroyed.call(me) ;

        if(socket){

            socket.unsubscribes(keys(subscribers)) ;
        }

        if(ajax){

            ajax.unsubscribes(keys(loaders)) ;
        }
    },

    ...options
 } ;

    }

                return function(mixins , component){

                    
        if(!var_init_locked_1560479513393){

            empty = include('function.empty')();

            var_init_locked_1560479513393 = true ;
        }
        

                    

                    return main.call(this , mixins , component) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302752" signature="<Map> src::map.set.multi(<Map> map , <array> ...values)" entry-type="Map array"  name="src::map.set.multi" imports="src::is.type src::is.array">
        <![CDATA[(() =>{

                let isArray;

                let var_init_locked_1560479513395;

                

                

                function main(map , ...values){

        
/**
 * 
 * 设置复合值
 * 
 * @import is.array
 * 
 * @param {Map} map Map 对象
 * 
 * @param {array} [...values] 包含多维键，以及相应值
 * 
 * @return {Map} 返回 Map 对象引用
 * 
 */

let {
    length
} = values;

if(length >= 2){

    let key = values.slice(0 , length - 1),
        value = values[length - 1],
        oldValues = map.get(...key);

    if(isArray(oldValues)){

        if(!oldValues.includes(value)){

            oldValues.push(value) ;
        }
        
    }else{

        oldValues = [
            value
        ] ;
    }

    map.set(...key , oldValues) ;
}

return map ;

 

    }

                return function(map , ...values){

                    
        if(!var_init_locked_1560479513395){

            isArray = include('is.array');

            var_init_locked_1560479513395 = true ;
        }
        

                    

                    return main.call(this , map , ...values) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529938" signature="<boolean> src::is.number(<mixed> data)" entry-type="mixed"  name="src::is.number" imports="src::is.type">
        <![CDATA[(() =>{

                let isType;

                let var_init_locked_1560479513397;

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为数值类型
 * 
 * @import is.type
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为数值类型则返回 true , 否则返回 false 
 * 
 */

return isType(data , 'number') && isFinite(data);

    }

                return function(data){

                    
        if(!var_init_locked_1560479513397){

            isType = include('is.type');

            var_init_locked_1560479513397 = true ;
        }
        

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302054" signature="<void> src::canvas.draw.line.bezierCurve(<canvas.Context> context , {<array> points , <object> ...styles})"  name="src::canvas.draw.line.bezierCurve" imports="src::is.object.simple src::object.keys src::is.type src::is.object src::is.array src::is.empty src::string.split src::object.value.set src::is.defined src::object.key.join src::object.value.get src::object.assign">
        <![CDATA[(() =>{

                let assign;

                let var_init_locked_1560479513399;

                

                

                function main(context , {points , ...styles}){

        
/**
 * 
 * 绘制贝赛尔曲线
 * 
 * @import assign from object.assign
 * 
 * @param {canvas.Context} context 画板的上下文对象
 * 
 * @param {object} [config = {}] 画线配置
 * 
 * @param {array} [config.points = []] 画线点集合
 * 
 * @param {object} [...config.styles] 画线样式
 * 
 */

 if(points.length === 8){

    context.beginPath();

    assign(context , styles) ;

    context.moveTo(...points.slice(0 , 2));
    
    context.bezierCurveTo(...points.slice(2));
    
    context.stroke();
 }

    }

                return function(context , {points = [] , ...styles} = {}){

                    
        if(!var_init_locked_1560479513399){

            assign = include('object.assign');

            var_init_locked_1560479513399 = true ;
        }
        

                    

                    return main.call(this , context , {points , ...styles}) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529945" signature="<number> src::math.degree2radian(<number> degree)" entry-type="number"  name="src::math.degree2radian">
        <![CDATA[(() =>{

                

                

                

                

                function main(degree){

        
/**
 * 
 * 将角度转换成弧度
 * 
 * @param {number} degree 角度
 * 
 * @return {number} 弧度 
 * 
 */

return Math.PI / 180 * degree ;


    }

                return function(degree){

                    

                    

                    return main.call(this , degree) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302046" signature="<void> src::canvas.draw.line.arc(<canvas.Context> context , {<number> x , <number> y , <number> r , <number> start , <number> end , <number> counterclockwise , <object> ...styles})"  name="src::canvas.draw.line.arc" imports="src::is.object.simple src::object.keys src::is.type src::is.object src::is.array src::is.empty src::string.split src::object.value.set src::is.defined src::object.key.join src::object.value.get src::object.assign src::math.degree2radian">
        <![CDATA[(() =>{

                let assign,degree2radian;

                let var_init_locked_1560479513404;

                

                

                function main(context , {x , y , r , start , end , counterclockwise , ...styles}){

        
/**
 * 
 * 绘制弧线
 * 
 * @import assign from object.assign
 * 
 * @import degree2radian from math.degree2radian
 * 
 * @param {canvas.Context} context 画板的上下文对象
 * 
 * @param {object} [config = {}] 画线配置
 * 
 * @param {number} config.x 圆中心点横坐标
 * 
 * @param {number} config.y 圆中心点纵坐标
 * 
 * @param {number} config.r 圆的半径
 * 
 * @param {number} [config.start = -90] 圆起始角度
 * 
 * @param {number} config.end 圆终止角度
 * 
 * @param {number} [config.counterclockwise = false] 如果为 false 则为顺时针，反之为逆时针
 * 
 * @param {object} [...config.styles] 画线样式
 * 
 */

context.beginPath();

assign(context , styles) ;

context.arc(x , y , r , degree2radian(start) , degree2radian(end) , counterclockwise) ;

context.stroke();

    }

                return function(context , {x , y , r , start = -90 , end , counterclockwise = false , ...styles} = {}){

                    
        if(!var_init_locked_1560479513404){

            assign = include('object.assign');
degree2radian = include('math.degree2radian');

            var_init_locked_1560479513404 = true ;
        }
        

                    

                    return main.call(this , context , {x , y , r , start , end , counterclockwise , ...styles}) ;
                } ;

            })()]]>
    </class>

    <class motify="1557885936285" signature="<Date> src::date.get({<number> year , <number> month , <number> day , <number> hours , <number> minutes , <number> seconds})"  name="src::date.get" imports="src::is.defined">
        <![CDATA[(() =>{

                let isDefined;

                let var_init_locked_1560479513409;

                

                

                function main({year , month , day , hours , minutes , seconds}){

        
/**
 * 
 * 获得日期对象
 * 
 * @import is.defined
 * 
 * @param {object} [config = {}] 日期配置
 * 
 * @param {number} [config.year] 年份
 * 
 * @param {number} [config.month] 月份
 * 
 * @param {number} [config.day] 日
 * 
 * @param {number} [config.hours] 小时
 * 
 * @param {number} [config.minutes] 分钟
 * 
 * @param {number} [config.seconds] 秒
 * 
 * @return {Date} 日期对象 
 * 
 */

 let data = new Date() ;

 data.setMonth(0) ;

 data.setDate(1) ;

 data.setMilliseconds(0) ;

 if(isDefined(year)){

   data.setFullYear(year) ;
 }

 if(isDefined(month)){

   data.setMonth(month - 1) ;
 }

 if(isDefined(day)){

   data.setDate(day) ;
 
 }

 if(isDefined(hours)){

   data.setHours(hours) ;
 }

 if(isDefined(minutes)){

   data.setMinutes(minutes) ;
 }

 if(isDefined(seconds)){

   data.setSeconds(seconds) ;
 }

 return data ;



    }

                return function({year , month , day , hours , minutes , seconds} = {}){

                    
        if(!var_init_locked_1560479513409){

            isDefined = include('is.defined');

            var_init_locked_1560479513409 = true ;
        }
        

                    

                    return main.call(this , {year , month , day , hours , minutes , seconds}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513303426" signature="<array> src::week.days(<number> startDay)" entry-type="number"  name="src::week.days">
        <![CDATA[(() =>{

                

                

                

                

                function main(startDay){

        
/**
 * 
 * 获得一周周期排列
 * 
 * @param {number} [startDay = 0] 确定起始周几
 * 
 * @return {array} 一周周期排列数字集合
 * 
 */

 let result = [
     startDay
 ];

while(result.length < 7){

    startDay ++ ;

    if(startDay <= 6){

        result.push(startDay) ;
    
    }else{

        result.push(startDay = 0) ;
    }
}

return result ;


    }

                return function(startDay = 0){

                    

                    

                    return main.call(this , startDay) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302555" signature="<object> src::date.get.properties(<Date> date , <string[]> names)" entry-type="Date string[]"  name="src::date.get.properties" imports="src::is.type src::is.array src::is.empty src::is.string src::array.from">
        <![CDATA[(() =>{

                let from;

                let var_init_locked_1560479513415;

                

                

                function main(date , names){

        
/**
 * 
 * 获得指定日期的属性值
 * 
 * @import from from array.from
 * 
 * @param {Date} date 日期对象
 * 
 * @param {string[]} [names] 属性名称集合
 * 
 * @return {object} 日期描述
 * 
 */

 names = from(names) ;

 let result = {} ;

 for(name of names){

    let value ;

    switch(name){

        case 'year':

            value = date.getFullYear() ;

            break ;

        case 'month':

            value = date.getMonth() + 1 ;

            break ;

        case 'day':

            value = date.getDate() ;
    }

    result[name] = value ;
 }

 return result ;

    }

                return function(date , names){

                    
        if(!var_init_locked_1560479513415){

            from = include('array.from');

            var_init_locked_1560479513415 = true ;
        }
        

                    

                    return main.call(this , date , names) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529933" signature="<boolean> src::is.date(<mixed> data)" entry-type="mixed"  name="src::is.date">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        /**
 * 
 * 判定数据是否为日期类型
 * 
 * @param {mixed} data 检验数据
 * 
 * @return {boolean} 如果给定值为日期类型则返回 true , 否则返回 false 
 * 
 */


 return Object.prototype.toString.call(data) === '[object Date]' ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302574" signature="<Date> src::date.prev(<Date> date , <number> step)" entry-type="Date number"  name="src::date.prev" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date">
        <![CDATA[(() =>{

                let get,getProperty,isDate;

                let var_init_locked_1560479513419;

                

                

                function main(date , step){

        /**
 * 
 * 基于当前日历向前移一次
 * 
 * @import get from date.get
 * 
 * @import getProperty from date.get.properties
 * 
 * @import is.date
 * 
 * @param {Date} date 基准日期
 * 
 * @param {number} [step = 1] 步长
 * 
 * @return {Date} 移过的日期 
 * 
 */

if(isDate(date)){

   date = getProperty(date , [
      'year',
      'month',
      'day'
   ]) ;
 }

 let {
   day,
   ...other
 } = date ;

 day -= step ;

 return get({
   day,
   ...other
 }) ;

    }

                return function(date , step = 1){

                    
        if(!var_init_locked_1560479513419){

            get = include('date.get');
getProperty = include('date.get.properties');
isDate = include('is.date');

            var_init_locked_1560479513419 = true ;
        }
        

                    

                    return main.call(this , date , step) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302561" signature="<Date> src::date.next(<Date|object> date , <number> step)" entry-type="Date number"  name="src::date.next" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date">
        <![CDATA[(() =>{

                let get,getProperty,isDate;

                let var_init_locked_1560479513423;

                

                

                function main(date , step){

        /**
 * 
 * 基于当前日历向后移一次
 * 
 * @import get from date.get
 * 
 * @import getProperty from date.get.properties
 * 
 * @import is.date
 * 
 * @param {Date | object} date 基准日期
 * 
 * @param {number} [step = 1] 步长
 * 
 * @return {Date} 移过的日期 
 * 
 */

 if(isDate(date)){

   date = getProperty(date , [
     'year',
     'month',
     'day'
   ]) ;
 }

 let {
   day,
   ...other
 } = date ;

 day += step ;

 return get({
   day,
   ...other
 }) ;

    }

                return function(date , step = 1){

                    
        if(!var_init_locked_1560479513423){

            get = include('date.get');
getProperty = include('date.get.properties');
isDate = include('is.date');

            var_init_locked_1560479513423 = true ;
        }
        

                    

                    return main.call(this , date , step) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302862" signature="<Date> src::month.date.last(<number> year , <number> month)" entry-type="number number"  name="src::month.date.last" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev">
        <![CDATA[(() =>{

                let get,prev,getLastDate;

                let var_init_locked_1560479513426;

                

                

                function main(year , month){

        
/**
 * 
 * 指定月份的最后日期
 * 
 * @import get from date.get
 * 
 * @import prev from date.prev
 * 
 * @import getLastDate from ..last
 * 
 * @param {number} year 年份
 * 
 * @param {number} month 月份
 * 
 * @return {Date} 日期对象 
 * 
 */

 let date = get({
      year,
      month,
      day:31
   }) ;

 if(month < 1 || month > 12){

    return getLastDate(date.getFullYear() , date.getMonth() + 1) ;
 }

 while(date.getMonth() + 1 !== month){

    date = prev(date) ;
 }

 return date ;


    }

                return function(year , month){

                    
        if(!var_init_locked_1560479513426){

            get = include('date.get');
prev = include('date.prev');
getLastDate = include('src::month.date.last');

            var_init_locked_1560479513426 = true ;
        }
        

                    

                    return main.call(this , year , month) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301888" signature="<array> src::calendar.month(<number> year , <number> month , {<number> row , <number> weekStartDay , <number> day , <boolean> ignoreNotCurrentMonthLastRow})"  name="src::calendar.month" imports="src::is.defined src::date.get src::week.days src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::date.next src::month.date.last">
        <![CDATA[(() =>{

                let get,getDays,prev,next,getLastDate;

                let var_init_locked_1560479513431;

                

                

                function main(year , month , {row , weekStartDay , day , ignoreNotCurrentMonthLastRow}){

        
/**
 * 
 * 显示以月份显示的日历数据
 * 
 * @import get from date.get
 * 
 * @import getDays from week.days
 * 
 * @import prev from date.prev
 * 
 * @import next from date.next
 * 
 * @import getLastDate from month.date.last
 * 
 * @param {number} year 年份
 * 
 * @param {number} month 月份
 * 
 * @param {object} [config = {}] 日历构造配置
 * 
 * @param {number} [config.row = 6] 日历显示行数
 * 
 * @param {number} [config.weekStartDay = 1] 每周从周几进行显示
 * 
 * @param {number} [config.day] 指定日期所在周作为日历的第一周
 * 
 * @param {boolean} [config.ignoreNotCurrentMonthLastRow = true] 是否忽略不是本月的尾行
 * 
 * @return {array} 一组日历数据 
 * 
 */


if(!day){

    day = 1 ;

}

let lastDay = getLastDate(year , month).getDate() ;

if(day > lastDay){

    day = lastDay ;
}

let date = get({
    year,
    month,
    day
}) ;

let days = getDays(weekStartDay),
    prevCount = days.indexOf(date.getDay()),
    nextCount = 6 - prevCount,
    result = [
        date
    ];

let currentDate = date ;

while(prevCount -- > 0){

    result.unshift(date = prev(date)) ;
}

date = currentDate ;

while(nextCount -- > 0){

    result.push(date = next(date)) ;
}

let count = (row - 1) ;

while(count -- > 0){

    date = next(date) ;

    if(ignoreNotCurrentMonthLastRow && date.getMonth() + 1 !== month){

        break ;
    }

    result.push(date) ;

    for(let i = 0 ; i < 6 ; i ++){

        result.push(date = next(date)) ;
    }

    
}

return result ;





    }

                return function(year , month , {row = 6 , weekStartDay = 1 , day , ignoreNotCurrentMonthLastRow = true} = {}){

                    
        if(!var_init_locked_1560479513431){

            get = include('date.get');
getDays = include('week.days');
prev = include('date.prev');
next = include('date.next');
getLastDate = include('month.date.last');

            var_init_locked_1560479513431 = true ;
        }
        

                    

                    return main.call(this , year , month , {row , weekStartDay , day , ignoreNotCurrentMonthLastRow}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301937" signature="<void> src::calendar.month.view.deselect()"  name="src::calendar.month.view.deselect">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 清除当前日历所有选定
 * 
 */

 let me = this,
 {
    proxy,
    dates,
    selectedDate
 } = me ;

 if(selectedDate){

    selectedDate.selected = false ;

    proxy.call('deselect' , dates.indexOf(selectedDate) , selectedDate) ;
    
 }

 delete me.selectedDate ;
 

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301955" signature="<void> src::calendar.month.view.select(<number> year , <number> month , <number> day)" entry-type="number number number"  name="src::calendar.month.view.select" imports="src::calendar.month.view.deselect src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::month.date.last">
        <![CDATA[(() =>{

                let deselect,getLastDate,get;

                let var_init_locked_1560479513437;

                let var_current_scope_1560479513437;

                

                function main(year , month , day){

        
/**
 * 
 * 选定
 * 
 * @import deselect from ..deselect scoped
 * 
 * @import getLastDate from month.date.last
 * 
 * @import get from date.get.properties
 * 
 * @param {number} year 选定年份
 * 
 * @param {number} month 选定月份
 * 
 * @param {number} day 选定日期
 * 
 */

 let me = this,
 {
    proxy,
    selectedDate,
    dates
 } = me;

 deselect() ;

 let {
    day:lastDay
 } = get(getLastDate(year , month) , [
    'day'
 ]) ;

 if(day > lastDay){

   day = lastDay ;
 }

 let count = -1 ;

 for(let date of dates){

   let {
      year:itemYear,
      month:itemMonth,
      day:itemDay
   } = date ;

   count ++ ;

   if(itemYear === year && itemMonth === month && itemDay === day){

      me.selectedDate = date ;

      date.selected = true ;

      proxy.call('select' , count , date) ;

      break ;
   }
 }

 





    }

                return function(year , month , day){

                    
        if(!var_init_locked_1560479513437){

            getLastDate = include('month.date.last');
get = include('date.get.properties');

            var_init_locked_1560479513437 = true ;
        }
        

                    
        if(!var_current_scope_1560479513437 !== this){

            deselect = include('src::calendar.month.view.deselect').bind(this);

            var_current_scope_1560479513437 = this ;
        }
        

                    return main.call(this , year , month , day) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301988" signature="<void> src::calendar.month.view.selectMonth(<number> year , <number> month)" entry-type="number number"  name="src::calendar.month.view.selectMonth" imports="src::is.defined src::date.get src::week.days src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select">
        <![CDATA[(() =>{

                let getDates,deselect,select,getProperty;

                let var_init_locked_1560479513445;

                let var_current_scope_1560479513445;

                

                function main(year , month){

        
/**
 * 
 * 选定月份
 * 
 * @import getDates from ......month
 * 
 * @import deselect from ..deselect scoped
 * 
 * @import select from ..select scoped
 * 
 * @import getProperty from date.get.properties
 * 
 * @param {number} year 年份
 * 
 * @param {number} month 月份
 * 
 */

 let me = this,
 {
    selectedDate,
    weekStartDay,
    viewConfig
 } = me;

 deselect() ;

 let fields = [
        'year',
        'month',
        'day'
     ],
     dates = me.dates = getDates(year , month , {
        ...viewConfig,
        weekStartDay
     }).map(date =>{

        let {
            year:itemYear,
            month:itemMonth,
            day
        } = getProperty(date , fields),
        activate = year === itemYear && month === itemMonth;
        
        return {
            activate,
            year:itemYear,
            month:itemMonth,
            day,
            selected:false,
            key:date.getTime()
        } ;

    }) ;

me.year = year ;

me.month = month ;

me.proxy.call('load' , year , month , dates) ;

if(selectedDate){

    let {
        day
    } = selectedDate,
    {
        year,
        month
    } = me;

    select(year , month , day) ;
}

    }

                return function(year , month){

                    
        if(!var_init_locked_1560479513445){

            getDates = include('src::calendar.month');
getProperty = include('date.get.properties');

            var_init_locked_1560479513445 = true ;
        }
        

                    
        if(!var_current_scope_1560479513445 !== this){

            deselect = include('src::calendar.month.view.deselect').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513445 = this ;
        }
        

                    return main.call(this , year , month) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301904" signature="<void> src::calendar.month.view.constructor(<mixed> target , {<object> selectedDate , <number> weekStartDay , <object> viewConfig})"  name="src::calendar.month.view.constructor" imports="src::object.proxy src::is.defined src::date.get src::week.days src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth">
        <![CDATA[(() =>{

                let getProxy,selectMonth,select,getProperty;

                let var_init_locked_1560479513450;

                let var_current_scope_1560479513450;

                

                function main(target , {selectedDate , weekStartDay , viewConfig}){

        
/**
 * 
 * 构建一个月基日历
 * 
 * @import getProxy from object.proxy
 * 
 * @import selectMonth from ..selectMonth scoped
 * 
 * @import select from ..select scoped
 * 
 * @import getProperty from date.get.properties
 * 
 * @param {mixed} target 可提供日历显示的套件
 * 
 * @param {object} [config = {}] 初始化配置
 * 
 * @param {object} [config.selectedDate] 初始化选择日期
 * 
 * @param {number} [config.weekStartDay = 0] 默认从星期天进行计算
 * 
 * @param {object} [config.viewConfig = {}] 日历视图设置
 * 
 */

 let me = this ;

 me.viewConfig = viewConfig ;

 me.weekStartDay = weekStartDay ;

 me.proxy = getProxy(target) ;

 me.selectedDates = [] ;

 me.dates = [] ;

 if(!selectedDate){

    selectedDate = getProperty(new Date() , [
        'year',
        'month',
        'day'
    ]) ;
 }

 let {
     year,
     month,
     day
 } = selectedDate ;

 selectMonth(year , month) ;

 select(year , month , day) ;

    }

                return function(target , {selectedDate , weekStartDay = 0 , viewConfig = {}} = {}){

                    
        if(!var_init_locked_1560479513450){

            getProxy = include('object.proxy');
getProperty = include('date.get.properties');

            var_init_locked_1560479513450 = true ;
        }
        

                    
        if(!var_current_scope_1560479513450 !== this){

            selectMonth = include('src::calendar.month.view.selectMonth').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513450 = this ;
        }
        

                    return main.call(this , target , {selectedDate , weekStartDay , viewConfig}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302697" signature="<boolean> src::is.week.day.first(<Date> date , <number> weekStartDay)" entry-type="Date number"  name="src::is.week.day.first">
        <![CDATA[(() =>{

                

                

                

                

                function main(date , weekStartDay){

        
/**
 * 
 * 判断指定日期是否为一周的第一天
 * 
 * @param {Date} date 校验日期
 * 
 * @param {number} [weekStartDay = 1] 确认一周是从周几算起
 *  
 * @return {boolean} 如果是第一天的话，则返回 true , 否则返回 false
 * 
 */

 return date.getDay() === weekStartDay ;

 

    }

                return function(date , weekStartDay = 1){

                    

                    

                    return main.call(this , date , weekStartDay) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302884" signature="<Date> src::month.prev(<Date|object> date)" entry-type="Date"  name="src::month.prev" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date">
        <![CDATA[(() =>{

                let get,getProperty,isDate;

                let var_init_locked_1560479513456;

                

                

                function main(date){

        /**
 * 
 * 获得指定月份的上一个月份
 * 
 * @import get from date.get
 * 
 * @import getProperty from date.get.properties
 * 
 * @import is.date
 * 
 * @param {Date | object} date 包括月份的日期对象 
 * 
 * @return {Date} 上一个月份 
 * 
 */

 if(isDate(date)){

    date = getProperty(date , [
        'year',
        'month'
    ]) ;
 }

 let {
    month,
    ...other
 } = date ;

 month -- ;

 console.log(month , get({
   month,
  ...other
}).toJSON()) ;

 return get({
     month,
    ...other
 }) ;

    }

                return function(date){

                    
        if(!var_init_locked_1560479513456){

            get = include('date.get');
getProperty = include('date.get.properties');
isDate = include('is.date');

            var_init_locked_1560479513456 = true ;
        }
        

                    

                    return main.call(this , date) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302008" signature="<void> src::calendar.month.view.selectPrevMonth()"  name="src::calendar.month.view.selectPrevMonth" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::month.prev src::week.days src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth">
        <![CDATA[(() =>{

                let prev,getProperty,selectMonth;

                let var_init_locked_1560479513459;

                let var_current_scope_1560479513459;

                

                function main(){

        
/**
 * 
 * 向上移动月份
 * 
 * @import prev from month.prev
 * 
 * @import getProperty from date.get.properties
 * 
 * @import selectMonth from ..selectMonth scoped
 * 
 */

let me = this,
{
    year,
    month
} = me,
{
   year:selectedYear,
   month:selectedMonth
} = getProperty(prev({
    year,
    month
}) , [
    'year',
    'month'
]) ;

selectMonth(selectedYear , selectedMonth) ;

    }

                return function(){

                    
        if(!var_init_locked_1560479513459){

            prev = include('month.prev');
getProperty = include('date.get.properties');

            var_init_locked_1560479513459 = true ;
        }
        

                    
        if(!var_current_scope_1560479513459 !== this){

            selectMonth = include('src::calendar.month.view.selectMonth').bind(this);

            var_current_scope_1560479513459 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301977" signature="<void> src::calendar.month.view.selectLeft()"  name="src::calendar.month.view.selectLeft" imports="src::is.week.day.first src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::month.prev src::week.days src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth src::calendar.month.view.selectPrevMonth">
        <![CDATA[(() =>{

                let isFirst,get,prevMonth,prevDate,getProperty,select;

                let var_init_locked_1560479513464;

                let var_current_scope_1560479513464;

                

                function main(){

        /**
 * 
 * 向左移一个格
 * 
 * @import isFirst from is.week.day.first
 * 
 * @import get from date.get
 * 
 * @import prevMonth from ..selectPrevMonth scoped
 * 
 * @import prevDate from date.prev
 * 
 * @import getProperty from date.get.properties
 * 
 * @import select from ..select scoped
 * 
 */

 let {
    selectedDate,
    weekStartDay,
    month
 } = this ;

 if(selectedDate){

    let date = get(selectedDate) ;

    if(isFirst(date , weekStartDay)){

        prevMonth() ;
    
    }else{

        date = prevDate(date) ;

        let {
            year:prevYearValue,
            month:prevMonthValue,
            day
        } = getProperty(date , [
            'year',
            'month',
            'day'
        ]) ;

        if(prevMonthValue !== month){

            prevMonth() ;
        }

        select(prevYearValue , prevMonthValue , day) ;
    }
 }

    }

                return function(){

                    
        if(!var_init_locked_1560479513464){

            isFirst = include('is.week.day.first');
get = include('date.get');
prevDate = include('date.prev');
getProperty = include('date.get.properties');

            var_init_locked_1560479513464 = true ;
        }
        

                    
        if(!var_current_scope_1560479513464 !== this){

            prevMonth = include('src::calendar.month.view.selectPrevMonth').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513464 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302702" signature="<boolean> src::is.week.day.last(<Date> date , <number> weekStartDay)" entry-type="Date number"  name="src::is.week.day.last" imports="src::week.days">
        <![CDATA[(() =>{

                let getDays;

                let var_init_locked_1560479513468;

                

                

                function main(date , weekStartDay){

        
/**
 * 
 * 判断指定日期是否为一周的最后一天
 * 
 * @import getDays from week.days
 * 
 * @param {Date} date 校验日期
 * 
 * @param {number} [weekStartDay = 1] 确认一周是从周几算起
 *  
 * @return {boolean} 如果是最后一天的话，则返回 true , 否则返回 false
 * 
 */

let days = getDays(weekStartDay) ;

return date.getDay() === days[days.length - 1] ;

    }

                return function(date , weekStartDay = 1){

                    
        if(!var_init_locked_1560479513468){

            getDays = include('week.days');

            var_init_locked_1560479513468 = true ;
        }
        

                    

                    return main.call(this , date , weekStartDay) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302882" signature="<Date> src::month.next(<Date|object> date)" entry-type="Date"  name="src::month.next" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date">
        <![CDATA[(() =>{

                let get,getProperty,isDate;

                let var_init_locked_1560479513470;

                

                

                function main(date){

        /**
 * 
 * 获得指定月份的下一个月份
 * 
 * @import get from date.get
 * 
 * @import getProperty from date.get.properties
 * 
 * @import is.date
 * 
 * @param {Date | object} date 包括月份的日期对象 
 * 
 * @return {Date} 下一个月份 
 * 
 */

 if(isDate(date)){

    date = getProperty(date , [
        'year',
        'month'
    ]) ;
 }

 let {
    month,
    ...other
 } = date ;

 month ++ ;

 return get({
     month,
    ...other
 }) ;

    }

                return function(date){

                    
        if(!var_init_locked_1560479513470){

            get = include('date.get');
getProperty = include('date.get.properties');
isDate = include('is.date');

            var_init_locked_1560479513470 = true ;
        }
        

                    

                    return main.call(this , date) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301996" signature="<void> src::calendar.month.view.selectNextMonth()"  name="src::calendar.month.view.selectNextMonth" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::month.next src::week.days src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth">
        <![CDATA[(() =>{

                let next,getProperty,selectMonth;

                let var_init_locked_1560479513473;

                let var_current_scope_1560479513473;

                

                function main(){

        
/**
 * 
 * 向下移动月份
 * 
 * @import next from month.next
 * 
 * @import getProperty from date.get.properties
 * 
 * @import selectMonth from ..selectMonth scoped
 * 
 */

 let me = this,
 {
     year,
     month
 } = me,
 {
    year:selectedYear,
    month:selectedMonth
 } = getProperty(next({
     year,
     month
 }) , [
     'year',
     'month'
 ]) ;


 selectMonth(selectedYear , selectedMonth) ;

    }

                return function(){

                    
        if(!var_init_locked_1560479513473){

            next = include('month.next');
getProperty = include('date.get.properties');

            var_init_locked_1560479513473 = true ;
        }
        

                    
        if(!var_current_scope_1560479513473 !== this){

            selectMonth = include('src::calendar.month.view.selectMonth').bind(this);

            var_current_scope_1560479513473 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302019" signature="<void> src::calendar.month.view.selectRight()"  name="src::calendar.month.view.selectRight" imports="src::week.days src::is.week.day.last src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::month.next src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth src::calendar.month.view.selectNextMonth">
        <![CDATA[(() =>{

                let isLast,get,nextMonth,nextDate,getProperty,select;

                let var_init_locked_1560479513478;

                let var_current_scope_1560479513478;

                

                function main(){

        
/**
 * 
 * 向右移一个格日期
 * 
 * @import isLast from is.week.day.last
 * 
 * @import get from date.get
 * 
 * @import nextMonth from ..selectNextMonth scoped
 * 
 * @import nextDate from date.next
 * 
 * @import getProperty from date.get.properties
 * 
 * @import select from ..select scoped
 * 
 */


let {
    selectedDate,
    weekStartDay,
    month
 } = this ;

 if(selectedDate){

    let date = get(selectedDate) ;

    if(isLast(date , weekStartDay)){

        nextMonth() ;
    
    }else{

        date = nextDate(date) ;

        let {
            year:nextYearValue,
            month:nextMonthValue,
            day
        } = getProperty(date , [
            'year',
            'month',
            'day'
        ]) ;

        if(nextMonthValue !== month){

            nextMonth() ;
        }

        select(nextYearValue , nextMonthValue , day) ;
    }
 }

    }

                return function(){

                    
        if(!var_init_locked_1560479513478){

            isLast = include('is.week.day.last');
get = include('date.get');
nextDate = include('date.next');
getProperty = include('date.get.properties');

            var_init_locked_1560479513478 = true ;
        }
        

                    
        if(!var_current_scope_1560479513478 !== this){

            nextMonth = include('src::calendar.month.view.selectNextMonth').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513478 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302856" signature="<Date> src::month.date.first(<number> year , <number> month)" entry-type="number number"  name="src::month.date.first" imports="src::is.defined src::date.get">
        <![CDATA[(() =>{

                let get;

                let var_init_locked_1560479513482;

                

                

                function main(year , month){

        
/**
 * 
 * 指定月份的第一个日期
 * 
 * @import get from date.get
 * 
 * @param {number} year 年份
 * 
 * @param {number} month 月份
 * 
 * @return {Date} 日期对象 
 * 
 */

 return get({
      year,
      month,
      day:1
   }) ;

    }

                return function(year , month){

                    
        if(!var_init_locked_1560479513482){

            get = include('date.get');

            var_init_locked_1560479513482 = true ;
        }
        

                    

                    return main.call(this , year , month) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302874" signature="<Date[]> src::month.dates.week.first(<number> year , <number> month , <number> weekStartDay)" entry-type="number number number"  name="src::month.dates.week.first" imports="src::week.days src::is.defined src::date.get src::month.date.first src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.next">
        <![CDATA[(() =>{

                let getDays,getFirstDate,next;

                let var_init_locked_1560479513486;

                

                

                function main(year , month , weekStartDay){

        
/**
 * 
 * 获得指定月份的第一周的所有日期
 * 
 * @import getDays from week.days
 * 
 * @import getFirstDate from month.date.first
 * 
 * @import next from date.next
 * 
 * @param {number} year 年份 
 * 
 * @param {number} month 月份
 * 
 * @param {number} [weekStartDay = 1] 确定一周从周几进行计算
 * 
 * @return {Date[]} 一周里所有的日期 
 * 
 */

let days = getDays(weekStartDay),
    date = getFirstDate(year , month),
    firstIndex = days.indexOf(date.getDay()),
    result = [
        date
    ];

for(let i = firstIndex + 1; i < 7 ; i ++){

    result.push(date = next(date)) ;
}

return result ;



 

    }

                return function(year , month , weekStartDay = 1){

                    
        if(!var_init_locked_1560479513486){

            getDays = include('week.days');
getFirstDate = include('month.date.first');
next = include('date.next');

            var_init_locked_1560479513486 = true ;
        }
        

                    

                    return main.call(this , year , month , weekStartDay) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301692" signature="<boolean> src::array.dates.includes(<Date[]> dates , <Date> date , <array> fields)" entry-type="Date[] Date array"  name="src::array.dates.includes" imports="src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties">
        <![CDATA[(() =>{

                let get;

                let var_init_locked_1560479513491;

                

                

                function main(dates , date , fields){

        
/**
 * 
 * 基于日历数组进行包含性检测
 * 
 * @import get from date.get.properties
 * 
 * @param {Date[]} dates 日历数组
 * 
 * @param {Date} date 校验匹配数据项
 * 
 * @param {array} [fields = ['year' , 'month' , 'day']] 校验字段项
 * 
 * @return {boolean} 如果日历数组中包含校验项则返回 true , 否则返回 false 
 * 
 */

 let {
    year,
    month,
    day
 } = get(date , fields) ;

 for(let date of dates){

    let {
        year:itemYear,
        month:itemMonth,
        day:itemDay
    } = get(date , fields) ;

    if(itemYear === year && itemMonth === month && itemDay === day){

        return true ;
    }
 }

 return false ;
 



 

    }

                return function(dates , date , fields = ['year' , 'month' , 'day']){

                    
        if(!var_init_locked_1560479513491){

            get = include('date.get.properties');

            var_init_locked_1560479513491 = true ;
        }
        

                    

                    return main.call(this , dates , date , fields) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302578" signature="<Date> src::date.prev.week(<Date|object> date)" entry-type="Date"  name="src::date.prev.week" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev">
        <![CDATA[(() =>{

                let prev;

                let var_init_locked_1560479513493;

                

                

                function main(date){

        
/**
 * 
 * 基于当前日期的上一周的日期
 * 
 * @import prev from date.prev
 * 
 * @param {Date | object} date 基准日期
 * 
 * @return {Date} 移过的日期 
 * 
 */

return prev(date , 7) ;


    }

                return function(date){

                    
        if(!var_init_locked_1560479513493){

            prev = include('date.prev');

            var_init_locked_1560479513493 = true ;
        }
        

                    

                    return main.call(this , date) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302032" signature="<void> src::calendar.month.view.selectUp()"  name="src::calendar.month.view.selectUp" imports="src::week.days src::is.defined src::date.get src::month.date.first src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.next src::month.dates.week.first src::array.dates.includes src::month.prev src::date.prev src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth src::calendar.month.view.selectPrevMonth src::date.prev.week">
        <![CDATA[(() =>{

                let getFirstWeekDates,includes,get,prevMonth,prevDate,getProperty,select;

                let var_init_locked_1560479513496;

                let var_current_scope_1560479513496;

                

                function main(){

        
/**
 * 
 * 向上移一格日期
 * 
 * @import getFirstWeekDates from month.dates.week.first
 * 
 * @import includes from array.dates.includes
 * 
 * @import get from date.get
 * 
 * @import prevMonth from ..selectPrevMonth scoped
 * 
 * @import prevDate from date.prev.week
 * 
 * @import getProperty from date.get.properties
 * 
 * @import select from ..select scoped
 * 
 */

let {
    selectedDate,
    weekStartDay,
    year,
    month
 } = this ;

 if(selectedDate){

    let dates = getFirstWeekDates(year , month , weekStartDay),
        date = get(selectedDate) ;

    if(includes(dates , date)){

        prevMonth() ;
    
    }else{

        date = prevDate(date) ;

        let {
            year:prevYearValue,
            month:prevMonthValue,
            day
        } = getProperty(date , [
            'year',
            'month',
            'day'
        ]) ;

        if(prevMonthValue !== month){

            prevMonth() ;
        }

        select(prevYearValue , prevMonthValue , day) ;
    }
 }

    }

                return function(){

                    
        if(!var_init_locked_1560479513496){

            getFirstWeekDates = include('month.dates.week.first');
includes = include('array.dates.includes');
get = include('date.get');
prevDate = include('date.prev.week');
getProperty = include('date.get.properties');

            var_init_locked_1560479513496 = true ;
        }
        

                    
        if(!var_current_scope_1560479513496 !== this){

            prevMonth = include('src::calendar.month.view.selectPrevMonth').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513496 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302878" signature="<Date[]> src::month.dates.week.last(<number> year , <number> month , <number> weekStartDay)" entry-type="number number number"  name="src::month.dates.week.last" imports="src::week.days src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::month.date.last">
        <![CDATA[(() =>{

                let getDays,getLastDate,prev;

                let var_init_locked_1560479513502;

                

                

                function main(year , month , weekStartDay){

        
/**
 * 
 * 获得指定月份的最后一周的所有日期
 * 
 * @import getDays from week.days
 * 
 * @import getLastDate from month.date.last
 * 
 * @import prev from date.prev
 * 
 * @param {number} year 年份 
 * 
 * @param {number} month 月份
 * 
 * @param {number} [weekStartDay = 1] 确定一周从周几进行计算
 * 
 * @return {Date[]} 一周里所有的日期 
 * 
 */

let days = getDays(weekStartDay),
    date = getLastDate(year , month),
    lastIndex = days.indexOf(date.getDay()),
    result = [
        date
    ];

for(let i = lastIndex - 1; i >= 0 ; i --){

    result.push(date = prev(date)) ;
}

return result ;

    }

                return function(year , month , weekStartDay = 1){

                    
        if(!var_init_locked_1560479513502){

            getDays = include('week.days');
getLastDate = include('month.date.last');
prev = include('date.prev');

            var_init_locked_1560479513502 = true ;
        }
        

                    

                    return main.call(this , year , month , weekStartDay) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302570" signature="<Date> src::date.next.week(<Date|object> date)" entry-type="Date"  name="src::date.next.week" imports="src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.next">
        <![CDATA[(() =>{

                let next;

                let var_init_locked_1560479513505;

                

                

                function main(date){

        
/**
 * 
 * 基于当前日期的下一周的日期
 * 
 * @import next from date.next
 * 
 * @param {Date | object} date 基准日期
 * 
 * @return {Date} 移过的日期 
 * 
 */

 return next(date , 7) ;

 

    }

                return function(date){

                    
        if(!var_init_locked_1560479513505){

            next = include('date.next');

            var_init_locked_1560479513505 = true ;
        }
        

                    

                    return main.call(this , date) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301965" signature="<void> src::calendar.month.view.selectDown()"  name="src::calendar.month.view.selectDown" imports="src::week.days src::is.defined src::date.get src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::month.date.last src::month.dates.week.last src::array.dates.includes src::month.next src::date.next src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth src::calendar.month.view.selectNextMonth src::date.next.week">
        <![CDATA[(() =>{

                let getLastWeekDates,includes,get,nextMonth,nextDate,getProperty,select;

                let var_init_locked_1560479513508;

                let var_current_scope_1560479513508;

                

                function main(){

        
/**
 * 
 * 向下移一格日期
 * 
 * @import getLastWeekDates from month.dates.week.last
 * 
 * @import includes from array.dates.includes
 * 
 * @import get from date.get
 * 
 * @import nextMonth from ..selectNextMonth scoped
 * 
 * @import nextDate from date.next.week
 * 
 * @import getProperty from date.get.properties
 * 
 * @import select from ..select scoped
 * 
 */

 let {
    selectedDate,
    weekStartDay,
    year,
    month
 } = this ;

 if(selectedDate){

    let dates = getLastWeekDates(year , month , weekStartDay),
        date = get(selectedDate) ;

    if(includes(dates , date)){

        nextMonth() ;
    
    }else{

        date = nextDate(date) ;

        let {
            year:nextYearValue,
            month:nextMonthValue,
            day
        } = getProperty(date , [
            'year',
            'month',
            'day'
        ]) ;

        if(nextMonthValue !== month){

            nextMonth() ;
        }

        select(nextYearValue , nextMonthValue , day) ;
    }
 }



    }

                return function(){

                    
        if(!var_init_locked_1560479513508){

            getLastWeekDates = include('month.dates.week.last');
includes = include('array.dates.includes');
get = include('date.get');
nextDate = include('date.next.week');
getProperty = include('date.get.properties');

            var_init_locked_1560479513508 = true ;
        }
        

                    
        if(!var_current_scope_1560479513508 !== this){

            nextMonth = include('src::calendar.month.view.selectNextMonth').bind(this);
select = include('src::calendar.month.view.select').bind(this);

            var_current_scope_1560479513508 = this ;
        }
        

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301894" signature="<void> src::calendar.month.view(<mixed> target , <mixed> config)" entry-type=" "  name="src::calendar.month.view" imports="src::class.empty src::object.proxy src::is.defined src::date.get src::week.days src::is.type src::is.array src::is.empty src::is.string src::array.from src::date.get.properties src::is.date src::date.prev src::date.next src::month.date.last src::calendar.month src::calendar.month.view.deselect src::calendar.month.view.select src::calendar.month.view.selectMonth src::calendar.month.view.constructor src::is.week.day.first src::month.prev src::calendar.month.view.selectPrevMonth src::calendar.month.view.selectLeft src::is.week.day.last src::month.next src::calendar.month.view.selectNextMonth src::calendar.month.view.selectRight src::month.date.first src::month.dates.week.first src::array.dates.includes src::date.prev.week src::calendar.month.view.selectUp src::month.dates.week.last src::date.next.week src::calendar.month.view.selectDown">
        <![CDATA[(() =>{

                let extend,constructor,method_select,method_selectLeft,method_selectRight,method_selectUp,method_selectDown,method_selectMonth,method_selectNextMonth,method_selectPrevMonth,method_deselect;

                let var_init_locked_1560479513513;

                let var_class_1560479513513;

                

                return function(target , config){

                    
        if(!var_init_locked_1560479513513){

            extend = include('class.empty')();
constructor = include('src::calendar.month.view.constructor');
method_select = include('src::calendar.month.view.select');
method_selectLeft = include('src::calendar.month.view.selectLeft');
method_selectRight = include('src::calendar.month.view.selectRight');
method_selectUp = include('src::calendar.month.view.selectUp');
method_selectDown = include('src::calendar.month.view.selectDown');
method_selectMonth = include('src::calendar.month.view.selectMonth');
method_selectNextMonth = include('src::calendar.month.view.selectNextMonth');
method_selectPrevMonth = include('src::calendar.month.view.selectPrevMonth');
method_deselect = include('src::calendar.month.view.deselect');

            var_init_locked_1560479513513 = true ;
        }
        

                    
        if(!var_class_1560479513513){

            class main {

            

            

            constructor(...args){

            

            constructor.apply(this , args) ;

        }

            select(...args){

            return method_select.apply(this , args) ;

        }
selectLeft(...args){

            return method_selectLeft.apply(this , args) ;

        }
selectRight(...args){

            return method_selectRight.apply(this , args) ;

        }
selectUp(...args){

            return method_selectUp.apply(this , args) ;

        }
selectDown(...args){

            return method_selectDown.apply(this , args) ;

        }
selectMonth(...args){

            return method_selectMonth.apply(this , args) ;

        }
selectNextMonth(...args){

            return method_selectNextMonth.apply(this , args) ;

        }
selectPrevMonth(...args){

            return method_selectPrevMonth.apply(this , args) ;

        }
deselect(...args){

            return method_deselect.apply(this , args) ;

        }

            

        }

            var_class_1560479513513 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513513 ;
                }

            } ;
        }
        

                    return new var_class_1560479513513(target , config);
                } ;

            })()]]>
    </class>

    <class motify="1556513301873" signature="<boolean> src::browser.support.pointer()"  name="src::browser.support.pointer">
        <![CDATA[(() =>{

                

                

                

                let var_once_value_1560479513521;

                function main(){

        
/**
 * 
 * 判断当前浏览器是否支持点触
 * 
 * @return {boolean} 如果是支持点触则返回 true ，否则返回 false 
 * 
 * @once
 * 
 */

return window.hasOwnProperty('onpointerdown');

    }

                return function(){

                    

                    

                    
        if(var_once_value_1560479513521){

            return var_once_value_1560479513521 ;

        }
        return var_once_value_1560479513521 = main.call(this ) ;
        
                } ;

            })()]]>
    </class>

    <class motify="1556513301879" signature="<boolean> src::browser.support.touch()"  name="src::browser.support.touch">
        <![CDATA[(() =>{

                

                

                

                let var_once_value_1560479513522;

                function main(){

        
/**
 * 
 * 判断当前浏览器是否支持触摸
 * 
 * @return {boolean} 如果是支持触摸则返回 true ，否则返回 false 
 * 
 * @once
 * 
 */

return window.hasOwnProperty('ontouchstart');

    }

                return function(){

                    

                    

                    
        if(var_once_value_1560479513522){

            return var_once_value_1560479513522 ;

        }
        return var_once_value_1560479513522 = main.call(this ) ;
        
                } ;

            })()]]>
    </class>

    <class motify="1556513301747" signature="<string> src::browser.event.name(<string> name)" entry-type="string"  name="src::browser.event.name" imports="src::browser.support.pointer src::browser.support.touch">
        <![CDATA[(() =>{

                let isPointer,isTouch;

                let var_init_locked_1560479513524;

                

                

                
/**
 * 
 * 获得事件的兼容名称
 * 
 * @import isPointer from browser.support.pointer
 * 
 * @import isTouch from browser.support.touch
 * 
 * @param {string} name 事件名称
 * 
 * @return {string} 对应事件的兼容名称 
 * 
 */

 function get_event_name(name){

    switch(name){

        case 'start':

            if(isPointer()){

                return 'pointerdown' ;

            }else if(isTouch()){

                return 'touchstart' ;
            }

            return 'mousedown' ;

        case 'move':

            if(isPointer()){

                return 'pointermove' ;

            }else if(isTouch()){

                return 'touchmove' ;
            }

            return 'mousemove' ;

        case 'end':

            if(isPointer()){

                return 'pointerup' ;

            }else if(isTouch()){

                return 'touchend' ;
            }

            return 'mouseup' ;
    }
 }

 function main(name){

    switch(name){

        case 'pointerdown':
        case 'touchstart':
        case 'mousedown':
    
            return get_event_name('start') ;
    
        case 'pointermove':
        case 'touchmove':
        case 'mousemove':
    
            return get_event_name('move') ;
    
        case 'pointerup':
        case 'touchend':
        case 'mousedup':
    
            return get_event_name('end') ;
    }

    return name ;
 }

 

                return function(name){

                    
        if(!var_init_locked_1560479513524){

            isPointer = include('browser.support.pointer');
isTouch = include('browser.support.touch');

            var_init_locked_1560479513524 = true ;
        }
        

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301804" signature="<Map> src::browser.global.listener.map()"  name="src::browser.global.listener.map" imports="src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map">
        <![CDATA[(() =>{

                let map;

                let var_init_locked_1560479513525;

                

                let var_once_value_1560479513525;

                function main(){

        
/**
 * 
 * 维护全局事件监听对象
 * 
 * @import map value
 * 
 * @return {Map} 集合对象 
 * 
 * @once
 * 
 */

 return map ;

    }

                return function(){

                    
        if(!var_init_locked_1560479513525){

            map = include('map')();

            var_init_locked_1560479513525 = true ;
        }
        

                    

                    
        if(var_once_value_1560479513525){

            return var_once_value_1560479513525 ;

        }
        return var_once_value_1560479513525 = main.call(this ) ;
        
                } ;

            })()]]>
    </class>

    <class motify="1556513301836" signature="<boolean> src::browser.selector.is(<HTMLElement> el , <string> selector)" entry-type="HTMLElement string"  name="src::browser.selector.is">
        <![CDATA[(() =>{

                

                

                

                

                function main(el , selector){

        
/**
 * 
 * 判断元素是否匹配选择器
 * 
 * @param {HTMLElement} el 元素
 * 
 * @param {string} selector 选择器字符串
 * 
 * @return {boolean} 如果元素匹配选择器则返回 true , 否则返回 false 
 * 
 */

 let {
    ownerDocument
 } = el ;

 let els = Array.from(ownerDocument.querySelectorAll(selector)) ;

 return els.includes(el) ;

    }

                return function(el , selector){

                    

                    

                    return main.call(this , el , selector) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513301840" signature="<boolean> src::browser.selector.parent(<HTMLElement> el , <string> selector)" entry-type="HTMLElement string"  name="src::browser.selector.parent" imports="src::browser.selector.is">
        <![CDATA[(() =>{

                let is;

                let var_init_locked_1560479513530;

                

                

                function main(el , selector){

        
/**
 * 
 * 判断元素及其元素父祖级元素是否匹配选择器
 * 
 * @import is from ..is
 * 
 * @param {HTMLElement} el 元素
 * 
 * @param {string} selector 选择器
 * 
 * @return {boolean} 如果匹配则返回 true , 否则返回 false 
 * 
 */

 while(el){

    if(is(el , selector)){

        return el ;
    }

    el = el.parentElement ;
 }

    }

                return function(el , selector){

                    
        if(!var_init_locked_1560479513530){

            is = include('src::browser.selector.is');

            var_init_locked_1560479513530 = true ;
        }
        

                    

                    return main.call(this , el , selector) ;
                } ;

            })()]]>
    </class>

    <class motify="1558487457401" signature="<mixed> src::browser.global.listener.add(<string> event , <function> fn , <string> selector)" entry-type="string function string"  name="src::browser.global.listener.add" imports="src::browser.support.pointer src::browser.support.touch src::browser.event.name src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::browser.global.listener.map src::browser.selector.is src::browser.selector.parent">
        <![CDATA[(() =>{

                let getEventName,getMap,is;

                let var_init_locked_1560479513532;

                

                

                function main(event , fn , selector){

        
/**
 * 
 * 监听全局事件
 * 
 * @import getEventName from browser.event.name
 * 
 * @import getMap from ..map
 * 
 * @import is from browser.selector.parent
 * 
 * @param {string} event 目标监听事件
 * 
 * @param {function} fn 目标监听回调
 * 
 * @param {string} selector 选择器
 * 
 * @return {mixed} 返回说明 
 * 
 */

event = getEventName(event) ;
 
let map = getMap(),
    listenerFn = e =>{

        let {
            target
        } = e ;

        if(selector){

            if(is(target , selector)){

                fn(e) ;
            }
            
        }else{

            fn(e) ;
        }
    };

map.set(event , fn , selector , listenerFn) ;

window.addEventListener(event , listenerFn) ;




    }

                return function(event , fn , selector){

                    
        if(!var_init_locked_1560479513532){

            getEventName = include('browser.event.name');
getMap = include('src::browser.global.listener.map');
is = include('browser.selector.parent');

            var_init_locked_1560479513532 = true ;
        }
        

                    

                    return main.call(this , event , fn , selector) ;
                } ;

            })()]]>
    </class>

    <class motify="1558487463710" signature="<mixed> src::browser.global.listener.remove(<string> event , <function> fn , <string> selector)" entry-type="string function string"  name="src::browser.global.listener.remove" imports="src::browser.support.pointer src::browser.support.touch src::browser.event.name src::class.empty src::map.constructor src::map.size.get src::map.find src::map.set src::map.get src::map.has src::map.delete src::map.forEach src::map.clear src::map src::browser.global.listener.map">
        <![CDATA[(() =>{

                let getEventName,getMap;

                let var_init_locked_1560479513537;

                

                

                function main(event , fn , selector){

        
/**
 * 
 * 去除监听全局事件
 * 
 * @import getEventName from browser.event.name
 * 
 * @import getMap from ..map
 * 
 * @param {string} event 目标监听事件
 * 
 * @param {function} fn 目标监听回调
 * 
 * @param {string} selector 选择器
 * 
 * @return {mixed} 返回说明 
 * 
 */

 event = getEventName(event) ;

 let map = getMap(),
    listenerFn = map.get(event , fn , selector);

if(listenerFn){

    window.removeEventListener(event , listenerFn) ;
}

    }

                return function(event , fn , selector){

                    
        if(!var_init_locked_1560479513537){

            getEventName = include('browser.event.name');
getMap = include('src::browser.global.listener.map');

            var_init_locked_1560479513537 = true ;
        }
        

                    

                    return main.call(this , event , fn , selector) ;
                } ;

            })()]]>
    </class>

    <class motify="1559115972842" signature="<mixed> src::browser.event.key(<Event> event)" entry-type="Event"  name="src::browser.event.key">
        <![CDATA[(() =>{

                

                

                

                

                
/**
 * 
 * 得到对应代码的值键值 
 * 
 * @param {Event} event 键事件对象
 * 
 * @return {mixed} 键值 
 * 
 */

 const KEY_CODES = {
    39:'DIRECTION::RIGHT',
    37:'DIRECTION::LEFT',
    38:'DIRECTION::UP',
    40:'DIRECTION::DOWN',
    13:'ENTER',
    46:'DELETE',
    9:'TAB',
    107:'+',
    187:'=',
    27:'ESC'
 };

 function main({
    shiftKey,
    keyCode
 }){

    return {
       shift:shiftKey,
       key:KEY_CODES[keyCode],
       code:keyCode
    } ;
 }

                return function(event){

                    

                    

                    return main.call(this , event) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302835" signature="<void> src::message.center.constructor()"  name="src::message.center.constructor">
        <![CDATA[(() =>{

                

                

                

                

                function main(){

        
/**
 * 
 * 初始化消息中心
 * 
 */

 this.addresses = {} ;

    }

                return function(){

                    

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302801" signature="<void> src::message.address.constructor(<string> name)" entry-type="string"  name="src::message.address.constructor">
        <![CDATA[(() =>{

                

                

                

                

                function main(name){

        
/**
 * 
 * 初始化地址
 * 
 * @param {string} name 地址名称
 * 
 * 
 */

 let me = this ;

me.name = name ;

me.messages = [] ;

    }

                return function(name){

                    

                    

                    return main.call(this , name) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302823" signature="<void> src::message.address.send(<mixed> message)" entry-type="mixed"  name="src::message.address.send" imports="src::class.empty src::message.center.constructor src::message.address.constructor src::is.defined src::message.address.doAction src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple">
        <![CDATA[(() =>{

                let getCenter,isString,isObject;

                let var_init_locked_1560479513545;

                

                

                function main(message){

        /**
 * 
 * 发送消息
 * 
 * @import getCenter from message.center
 * 
 * @import is.string
 * 
 * @import isObject from is.object.simple
 * 
 * @param {mixed} message 消息配置
 * 
 * 
 */

let center = getCenter() ;

if(isString(message)){

    center.receive({
        to:message
    }) ;

}else if(isObject(message)){

    let {
        from
    } = message;

    if(from){

        let {
            name
        } = this ;

        message.from = `${name}::${from}` ;
    }

    center.receive(message) ;
}

    }

                return function(message){

                    
        if(!var_init_locked_1560479513545){

            getCenter = include('message.center');
isString = include('is.string');
isObject = include('is.object.simple');

            var_init_locked_1560479513545 = true ;
        }
        

                    

                    return main.call(this , message) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302806" signature="async <void> src::message.address.doAction(<mixed> target , <object> message)" entry-type="mixed object"  name="src::message.address.doAction" imports="src::is.defined src::class.empty src::message.center.constructor src::message.address.constructor src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple src::message.address.send">
        <![CDATA[(() =>{

                let isDefined,send;

                let var_init_locked_1560479513551;

                let var_current_scope_1560479513551;

                

                async function main(target , message){

        
/**
 * 
 * 执行绑定对象相关函数
 * 
 * @import is.defined
 * 
 * @import send from .send scoped
 * 
 * @param {mixed} target 作用对象
 * 
 * @param {object} message 消息
 * 
 */

 let {
    toAction,
    from,
    payload
 } = message ;

if(toAction in target){

    let result = await target[toAction](payload , message) ;

    if(from && isDefined(result)){

        send({
            to:from,
            replyPayload:payload,
            payload:result
        }) ;
    }
}

    }

                return async function(target , message){

                    
        if(!var_init_locked_1560479513551){

            isDefined = include('is.defined');

            var_init_locked_1560479513551 = true ;
        }
        

                    
        if(!var_current_scope_1560479513551 !== this){

            send = include('src::message.address.send').bind(this);

            var_current_scope_1560479513551 = this ;
        }
        

                    return await main.call(this , target , message) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302796" signature="<void> src::message.address.bind(<mixed> target)" entry-type="mixed"  name="src::message.address.bind" imports="src::is.defined src::class.empty src::message.center.constructor src::message.address.constructor src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction">
        <![CDATA[(() =>{

                let doAction;

                let var_init_locked_1560479513556;

                let var_current_scope_1560479513556;

                

                function main(target){

        
/**
 * 
 * 绑定目标对象
 * 
 * @import doAction from .doAction scoped
 * 
 * @param {mixed} target 目标对象
 * 
 */

 let me = this,
 {
    target:currentTarget,
    messages
 } = me;

 if(!currentTarget){

    for(let message of messages){

      doAction(target , message) ;

    }

    messages.length = 0 ;

    me.target = target ;

    return true ;

 }else if(currentTarget === me){

    return true ;
 }

 return false ;


    }

                return function(target){

                    

                    
        if(!var_current_scope_1560479513556 !== this){

            doAction = include('src::message.address.doAction').bind(this);

            var_current_scope_1560479513556 = this ;
        }
        

                    return main.call(this , target) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302826" signature="<void> src::message.address.unbind()"  name="src::message.address.unbind" imports="src::array.remove.index src::array.remove">
        <![CDATA[(() =>{

                let remove;

                let var_init_locked_1560479513559;

                

                

                function main(){

        
/**
 * 
 * 取消绑定目标对象
 * 
 * @import remove from array.remove
 * 
 */

 delete this.target ;

 

    }

                return function(){

                    
        if(!var_init_locked_1560479513559){

            remove = include('array.remove');

            var_init_locked_1560479513559 = true ;
        }
        

                    

                    return main.call(this ) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302819" signature="<void> src::message.address.receive(<Message> message)" entry-type="Message"  name="src::message.address.receive" imports="src::is.defined src::class.empty src::message.center.constructor src::message.address.constructor src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction">
        <![CDATA[(() =>{

                let doAction;

                let var_init_locked_1560479513561;

                let var_current_scope_1560479513561;

                

                function main(message){

        
/**
 * 
 * 接收消息
 * 
 * @import doAction from .doAction scoped
 * 
 * @param {Message} message 消息
 * 
 */

 let {
     target,
     messages
 } = this ;

 if(target){

    doAction(target , message) ;
 
}else{

    messages.push(message) ;
}

    }

                return function(message){

                    

                    
        if(!var_current_scope_1560479513561 !== this){

            doAction = include('src::message.address.doAction').bind(this);

            var_current_scope_1560479513561 = this ;
        }
        

                    return main.call(this , message) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302792" signature="<void> src::message.address()"  name="src::message.address" imports="src::class.empty src::message.address.constructor src::is.defined src::message.center.constructor src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive">
        <![CDATA[(() =>{

                let extend,constructor,method_bind,method_unbind,method_receive,method_send;

                let var_init_locked_1560479513566;

                let var_class_1560479513566;

                

                return function(){

                    
        if(!var_init_locked_1560479513566){

            extend = include('class.empty')();
constructor = include('src::message.address.constructor');
method_bind = include('src::message.address.bind');
method_unbind = include('src::message.address.unbind');
method_receive = include('src::message.address.receive');
method_send = include('src::message.address.send');

            var_init_locked_1560479513566 = true ;
        }
        

                    
        if(!var_class_1560479513566){

            class main {

            

            

            constructor(...args){

            

            constructor.apply(this , args) ;

        }

            bind(...args){

            return method_bind.apply(this , args) ;

        }
unbind(...args){

            return method_unbind.apply(this , args) ;

        }
receive(...args){

            return method_receive.apply(this , args) ;

        }
send(...args){

            return method_send.apply(this , args) ;

        }

            

        }

            var_class_1560479513566 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513566 ;
                }

            } ;
        }
        

                    return new var_class_1560479513566();
                } ;

            })()]]>
    </class>

    <class motify="1556513302843" signature="<void> src::message.center.register(<string> address)" entry-type="string"  name="src::message.center.register" imports="src::class.empty src::message.address.constructor src::is.defined src::message.center.constructor src::message.address.parse src::message.center.receive src::message.center src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address">
        <![CDATA[(() =>{

                let create;

                let var_init_locked_1560479513570;

                

                

                function main(address){

        
/**
 * 
 * 注册地址
 * 
 * @import create from message.address
 * 
 * @param {string} address 消息地址
 * 
 * 
 */

let {
    addresses
} = this ;

if(!addresses.hasOwnProperty(address)){

    addresses[address] = create(address) ;
}

return addresses[address] ;

    }

                return function(address){

                    
        if(!var_init_locked_1560479513570){

            create = include('message.address');

            var_init_locked_1560479513570 = true ;
        }
        

                    

                    return main.call(this , address) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302810" signature="<object> src::message.address.parse(<string> address)" entry-type="string"  name="src::message.address.parse">
        <![CDATA[(() =>{

                

                

                

                

                function main(address){

        
/**
 * 
 * 解析消息地址
 * 
 * @param {string} address 消息地址
 * 
 * @return {object} 地址解析后的结果 
 * 
 */

let match = address.match(/^([^\:]+)\:{2}([^\:]+)$/) ;

if(match){

    let [
        ,
        address,
        action
    ] = match ;

    return {
        address,
        action
    } ;
}

    }

                return function(address){

                    

                    

                    return main.call(this , address) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302839" signature="<void> src::message.center.receive({<string> from , <string> to , <mixed> payload})"  name="src::message.center.receive" imports="src::message.address.parse">
        <![CDATA[(() =>{

                let parse;

                let var_init_locked_1560479513580;

                

                

                function main({from , to , payload}){

        
/**
 * 
 * 接收消息
 * 
 * @import parse from message.address.parse
 * 
 * @param {object} message 消息
 * 
 * @param {string} [message.from] 消息来源地址
 * 
 * @param {string} message.to 消息发送地址
 * 
 * @param {mixed} [message.payload] 消息负荷
 * 
 */

 let result = parse(to) ;

 if(result){

    let {
        address:toAddress,
        action:toAction
    } = result;

    this.register(toAddress).receive({
        toAction,
        payload,
        from
    }) ;
 }


    }

                return function({from , to , payload}){

                    
        if(!var_init_locked_1560479513580){

            parse = include('message.address.parse');

            var_init_locked_1560479513580 = true ;
        }
        

                    

                    return main.call(this , {from , to , payload}) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302830" signature="<void> src::message.center()"  name="src::message.center" imports="src::class.empty src::message.center.constructor src::message.address.constructor src::is.defined src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address src::message.center.register src::message.address.parse src::message.center.receive">
        <![CDATA[(() =>{

                let extend,constructor,method_register,method_receive;

                let var_init_locked_1560479513582;

                let var_class_1560479513582;

                let var_once_value_1560479513582;

                return function(){

                    
        if(!var_init_locked_1560479513582){

            extend = include('class.empty')();
constructor = include('src::message.center.constructor');
method_register = include('src::message.center.register');
method_receive = include('src::message.center.receive');

            var_init_locked_1560479513582 = true ;
        }
        

                    
        if(!var_class_1560479513582){

            class main {

            

            

            constructor(...args){

            

            constructor.apply(this , args) ;

        }

            register(...args){

            return method_register.apply(this , args) ;

        }
receive(...args){

            return method_receive.apply(this , args) ;

        }

            

        }

            var_class_1560479513582 = class extends main{

                static get ZBEE_CLASS(){

                    return true ;
                }

                get ZBEE_CURRENT_CLASS(){

                    return var_class_1560479513582 ;
                }

            } ;
        }
        

                    
        if(var_once_value_1560479513582){

            return var_once_value_1560479513582 ;

        }

        return var_once_value_1560479513582 = new var_class_1560479513582() ;
        
                } ;

            })()]]>
    </class>

    <class motify="1556513302814" signature="<void> src::message.address.react(<ReactDOM> ReactDOM , <React.Component> reactClass , <string> address)" entry-type="ReactDOM React.Component string"  name="src::message.address.react" imports="src::class.empty src::message.center.constructor src::message.address.constructor src::is.defined src::is.type src::is.string src::is.object.simple src::message.address.send src::message.address.doAction src::message.address.bind src::array.remove.index src::array.remove src::message.address.unbind src::message.address.receive src::message.address src::message.center.register src::message.address.parse src::message.center.receive src::message.center src::id.generate">
        <![CDATA[(() =>{

                let getCenter,get;

                let var_init_locked_1560479513590;

                

                

                function main(ReactDOM , reactClass , address){

        /**
 * 
 * 基于 React 基于消息系统
 * 
 * @import getCenter from message.center
 * 
 * @import get from id.generate
 * 
 * @param {ReactDOM} ReactDOM ReactDOM 引用
 * 
 * @param {React.Component} reactClass 继承的 React 组件类
 * 
 * @param {string} [address] 组件注册的消息地址
 * 
 */

 let center = getCenter(),
     count = 1;

 return class extends reactClass{

    componentDidMount() {

        let me = this,
        {
            address:currentAddress
        } = me.props ;

        currentAddress = currentAddress || address || get('address-');

        let {
            $address
        } = me ;

        if($address){

            console.error('已拥有消息地址' , $address.name , currentAddress) ;

        }else{

            let messageAddress = center.register(currentAddress),
                isBind = messageAddress.bind(me) ;

            if(!isBind){

                console.error('消息地址已被注册' , currentAddress ,  ReactDOM.findDOMNode(me) , ReactDOM.findDOMNode(messageAddress.target)) ;

            }else{

                me.$address = messageAddress ;

            }
            
        }

        if (super.componentDidMount) {

            super.componentDidMount();
        }

    }

    componentWillUnmount(){

        if (super.componentWillUnmount) {

            super.componentWillUnmount();
        }

        let me = this,
        {
            $address:address
        } = me ;

        if(address){

            address.unbind() ;

            delete me.$address ; 
        }
    }

}

    }

                return function(ReactDOM , reactClass , address){

                    
        if(!var_init_locked_1560479513590){

            getCenter = include('message.center');
get = include('id.generate');

            var_init_locked_1560479513590 = true ;
        }
        

                    

                    return main.call(this , ReactDOM , reactClass , address) ;
                } ;

            })()]]>
    </class>

    <class motify="1535178529985" signature="<string> src::os.name()"  name="src::os.name">
        <![CDATA[(() =>{

                

                

                

                let var_once_value_1560479513595;

                function main(){

        /**
 * 
 * 返回当前操作系统的名称
 * 
 * @once
 * 
 * @return {string} 操作系统的名称
 * 
 */

const NAMES = {
    iphone: 'iOS',
    android:'Android',
    mac: 'MacOS',
    win: 'Windows',
    linux: 'Linux',
    other: 'Other'
};

let userAgent = navigator.userAgent.toLowerCase(),
    name = NAMES[(userAgent.match(/mac|win|linux/) || ['other'])[0]];

switch(name){

    case 'MacOS':
    case 'Linux':

        {

            let name = NAMES[(userAgent.match(/iphone|android/) || ['other'])[0]] ;

            if(name !== 'Other'){

                return name ;
            }
        }
}

return name ;

    }

                return function(){

                    

                    

                    
        if(var_once_value_1560479513595){

            return var_once_value_1560479513595 ;

        }
        return var_once_value_1560479513595 = main.call(this ) ;
        
                } ;

            })()]]>
    </class>

    <class motify="1535178529936" signature="<boolean> src::is.file(<string> path)" entry-type="string"  name="src::is.file">
        <![CDATA[(() =>{

                

                

                

                

                function main(path){

        
/**
 * 
 * 判断路径是否为文件路径
 * 
 * @param {string} path 路径
 * 
 * @return {boolean} 路径是文件则返回 true , 否则返回 false
 * 
 */

const {
    existsSync,
    statSync
} = require('fs') ;

return existsSync(path) && statSync(path).isFile() ;


    }

                return function(path){

                    

                    

                    return main.call(this , path) ;
                } ;

            })()]]>
    </class>

    <class motify="1537062026717" signature="<ArrayBuffer> src::file.read(<string> path)" entry-type="string"  name="src::file.read" imports="src::is.file">
        <![CDATA[(() =>{

                let isFile;

                let var_init_locked_1560479513598;

                

                

                function main(path){

        /**
 * 
 * 读取文件
 * 
 * @import is.file
 * 
 * @param {string} path 文本文件路径
 * 
 * @return {ArrayBuffer} 原生文件内容
 * 
 */

const {
    readFileSync
} = require('fs') ;

if(isFile(path)){

    return readFileSync(path) ;
}

    }

                return function(path){

                    
        if(!var_init_locked_1560479513598){

            isFile = include('is.file');

            var_init_locked_1560479513598 = true ;
        }
        

                    

                    return main.call(this , path) ;
                } ;

            })()]]>
    </class>

    <class motify="1537062026718" signature="<string> src::file.read.text(<string> path)" entry-type="string"  name="src::file.read.text" imports="src::is.file src::file.read">
        <![CDATA[(() =>{

                let read;

                let var_init_locked_1560479513600;

                

                

                function main(path){

        /**
 * 
 * 读取文本文件
 * 
 * @import read from file.read
 * 
 * @param {string} path 文本文件路径
 * 
 * @return {string} 文本文件内容
 * 
 */

let data = read(path) ;

if(data){

    return data.toString('utf8') ;
}

    }

                return function(path){

                    
        if(!var_init_locked_1560479513600){

            read = include('file.read');

            var_init_locked_1560479513600 = true ;
        }
        

                    

                    return main.call(this , path) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302711" signature="<mixed> src::json.parse(<string> data)" entry-type="string"  name="src::json.parse">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 将 JSON 字符串转换成 JSON 数据
 * 
 * @param {string} data JSON 字符串
 * 
 * @return {mixed} JSON 数据 
 * 
 */

try{

    return JSON.parse(data) ;

 }catch(err){


 }

 return {} ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302606" signature="<mixed> src::file.read.json(<string> path)" entry-type="string"  name="src::file.read.json" imports="src::is.file src::file.read src::file.read.text src::json.parse">
        <![CDATA[(() =>{

                let read,parse;

                let var_init_locked_1560479513603;

                

                

                function main(path){

        
/**
 * 
 * 读取 JSON 文件
 * 
 * @import read from file.read.text
 * 
 * @import parse from json.parse
 * 
 * @param {string} path JSON文件存储路径
 * 
 * @return {mixed} JSON数据 
 * 
 */

let data = read(path) ;

if(data){

    return parse(data) ;
}


    }

                return function(path){

                    
        if(!var_init_locked_1560479513603){

            read = include('file.read.text');
parse = include('json.parse');

            var_init_locked_1560479513603 = true ;
        }
        

                    

                    return main.call(this , path) ;
                } ;

            })()]]>
    </class>

    <class motify="1556513302686" signature="<boolean> src::is.object.empty(<mixed> data)" entry-type="mixed"  name="src::is.object.empty">
        <![CDATA[(() =>{

                

                

                

                

                function main(data){

        
/**
 * 
 * 判断对象是否没有字段
 * 
 * @param {mixed} data 检测数据
 * 
 * @return {boolean} 如果没有字段则返回 true , 否则返回 false
 * 
 */

 return Object.keys(data).length === 0 ;

    }

                return function(data){

                    

                    

                    return main.call(this , data) ;
                } ;

            })()]]>
    </class>

    <class motify="1557902435150" signature="<array> src::date.list(<Date> startDate , <Date> endDate , <number> count , <boolean> isNumber)" entry-type="Date Date number boolean"  name="src::date.list">
        <![CDATA[(() =>{

                

                

                

                

                function main(startDate , endDate , count , isNumber){

        
/**
 * 
 * 生成日期列表
 * 
 * @param {Date} startDate 起始日期
 * 
 * @param {Date} endDate 终止日期
 * 
 * @param {number} count 生成个数
 * 
 * @param {boolean} [isNumber = true] 是否以数字方式取代日期对象
 * 
 * @return {array} 日期列表
 * 
 */

let startTime = startDate.getTime(),
endTime = endDate.getTime(),
countTime = endTime - startTime ;

if(countTime % count !== 0){

   return [] ;
}

let time = countTime / count ;

if(time === 0){

   return [] ;
}

let result = [];

for(let i = startTime ; i <= endTime ; i += time){

   result.push(i) ;
}

if(!isNumber){

for(let i = 0 ; i < count ; i ++){

   result[i] = new Date(result[i]) ;
}
}

return result ;

    }

                return function(startDate , endDate , count , isNumber = true){

                    

                    

                    return main.call(this , startDate , endDate , count , isNumber) ;
                } ;

            })()]]>
    </class>

    <class motify="1557898516300" signature="<string> src::string.format(<string> format , <mixed> ...args)" entry-type="string mixed"  name="src::string.format">
        <![CDATA[(() =>{

                

                

                

                

                
/**
 * 
 * 字符串格式化
 * 
 * @param {string} format 格式字符串
 * 
 * @param {mixed} [...args] 格式参数
 * 
 * @return {string} 格式化后的字符串 
 * 
 */

 let formatRe = /\{(\d+)\}/g ;

 function main(format , ...args){

    return format.replace(formatRe , (match , index) => args[index]) ;
 }

                return function(format , ...args){

                    

                    

                    return main.call(this , format , ...args) ;
                } ;

            })()]]>
    </class>

    <class motify="1557899514665" signature="<Date> src::date.parse(<string> data , <Regex> regex , <string> format)" entry-type="string Regex string"  name="src::date.parse" imports="src::string.format">
        <![CDATA[(() =>{

                let doFormat;

                let var_init_locked_1560479513614;

                

                

                function main(data , regex , format){

        /**
 * 
 * 将字符串转换成日期
 * 
 * @import doFormat from string.format
 * 
 * @param {string} data 字符串
 * 
 * @param {Regex} regex 正则表达式
 * 
 * @param {string} format 日期格式
 * 
 * @return {Date} 日期对象 
 * 
 */

 let args = data.match(regex) ;

 if(args){

    return new Date(doFormat(format , ...args)) ;
 }

 

    }

                return function(data , regex , format){

                    
        if(!var_init_locked_1560479513614){

            doFormat = include('string.format');

            var_init_locked_1560479513614 = true ;
        }
        

                    

                    return main.call(this , data , regex , format) ;
                } ;

            })()]]>
    </class>

    <class motify="1557899641262" signature="<number> src::number.format(<mixed> data , <number> count)" entry-type="mixed number"  name="src::number.format">
        <![CDATA[(() =>{

                

                

                

                

                function main(data , count){

        
/**
 * 
 * 格式化数字
 * 
 * @param {mixed} data 数值
 * 
 * @param {number} count 数值
 * 
 * @return {number} 格式化后的数字字符串 
 * 
 */

 return String(data).padStart(count , '0') ;

    }

                return function(data , count){

                    

                    

                    return main.call(this , data , count) ;
                } ;

            })()]]>
    </class>


</classes>