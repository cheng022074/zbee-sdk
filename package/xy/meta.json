{
  "src::array.clear": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.clear(<array> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 清除数组\r\n * \r\n * @param {array} data 数组\r\n * \r\n * \r\n */\r\n\r\ndata.splice(0 , data.length) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.clear"
  },
  "src::array.clone": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.clone(<array> data)",
    "standard": true,
    "importNames": [
      "src::data.clone"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let clone;\n    \n                    let var_init_locked_1609121321902;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 对于数组进行拷贝\r\n * \r\n * @import clone from data.clone\r\n * \r\n * @param {array} data 数组\r\n * \r\n * \r\n */\r\n\r\n let result = [] ;\r\n\r\n for(let item of data){\r\n\r\n    result.push(clone(item)) ;\r\n }\r\n\r\n return result ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121321902){\n\n            clone = include('src::data.clone');\n\n            var_init_locked_1609121321902 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.clone"
  },
  "src::is.object.simple": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.object.simple(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为简单对象类型\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为简单对象类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn data instanceof Object && data.constructor === Object;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.object.simple"
  },
  "src::object.assign": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.assign(<object> dest , <object> ...sources)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::data.clone"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,clone;\n    \n                    let var_init_locked_1609121321962;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 积极深度合并\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import clone from data.clone\r\n * \r\n * @param {object} dest 目标数据\r\n * \r\n * @param {object} [...sources] 来源数据\r\n * \r\n * @return {object} 合并后数据\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nfunction assign(dest , source){\r\n\r\n    if(isObject(dest) && isObject(source)){\r\n\r\n        let names = Object.keys(source) ;\r\n\r\n        for(let name of names){\r\n\r\n            dest[name] = clone(source[name]) ;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction main(dest , ...sources){\r\n\r\n    for(let source of sources){\r\n\r\n        assign(dest , source) ;\r\n    }\r\n\r\n    return dest ;\r\n\r\n}\n    \n                    return function(dest , ...sources){\n    \n                        \n        if(!var_init_locked_1609121321962){\n\n            isObject = include('src::is.object.simple');\nclone = include('src::data.clone');\n\n            var_init_locked_1609121321962 = true ;\n        }\n        \n    \n                        return main.call(this , dest , ...sources) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.assign"
  },
  "src::date.clone": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.clone(<Date> date)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(date){\n\n        /**\r\n * \r\n * 复制日期\r\n * \r\n * @param {Date} date 日期\r\n * \r\n * @return {Date} 复制了与指定日期\r\n * \r\n */\r\n\r\nreturn new Date(date.valueOf()) ;\n\n    }\n    \n                    return function(date){\n    \n                        \n    \n                        return main.call(this , date) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.clone"
  },
  "src::is.type": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.type(<mixed> data , <string> type)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , type){\n\n        /**\r\n * \r\n * 对于 typeof 的简单封装\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @param {string} type 检验数据类型\r\n * \r\n * @return {boolean} 如果检验数据的数据类型与检验数据类型一致，则返回 true，否则返回 false \r\n * \r\n */\r\n\r\n return typeof data === type ;\n\n    }\n    \n                    return function(data , type){\n    \n                        \n    \n                        return main.call(this , data , type) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.type"
  },
  "src::is.array": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.array(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121322002;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为数组类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为数组类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return Array.isArray(data) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322002){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121322002 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.array"
  },
  "src::is.date": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.date(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为日期类型\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为日期类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n\r\n return Object.prototype.toString.call(data) === '[object Date]' ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.date"
  },
  "src::data.clone": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.clone(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::object.assign",
      "src::array.clone",
      "src::date.clone",
      "src::is.array",
      "src::is.date",
      "src::data.clone"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,assign,arrayClone,dateClone,isArray,isDate,clone;\n    \n                    let var_init_locked_1609121321925;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 数据拷贝\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import array.clone\r\n * \r\n * @import date.clone\r\n * \r\n * @import is.array\r\n * \r\n * @import is.date\r\n * \r\n * @import clone from .clone\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {mixed} 拷贝后的数据 \r\n * \r\n */\r\n\r\n if(isObject(data)){\r\n\r\n    return assign({} , data) ;\r\n\r\n }else if(isArray(data)){\r\n\r\n    return arrayClone(data) ;\r\n\r\n }else if(isDate(data)){\r\n\r\n    return dateClone(data) ;\r\n }\r\n\r\n return data ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121321925){\n\n            isObject = include('src::is.object.simple');\nassign = include('src::object.assign');\narrayClone = include('src::array.clone');\ndateClone = include('src::date.clone');\nisArray = include('src::is.array');\nisDate = include('src::is.date');\nclone = include('src::data.clone');\n\n            var_init_locked_1609121321925 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.clone"
  },
  "src::array.dates.includes": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::array.dates.includes(<Date[]> dates , <Date> date , <array> fields)",
    "standard": true,
    "importNames": [
      "src::date.get.properties"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121322092;\n    \n                    \n\n                    function main(dates , date , fields){\n\n        \r\n/**\r\n * \r\n * 基于日历数组进行包含性检测\r\n * \r\n * @import get from date.get.properties\r\n * \r\n * @param {Date[]} dates 日历数组\r\n * \r\n * @param {Date} date 校验匹配数据项\r\n * \r\n * @param {array} [fields = ['year' , 'month' , 'day']] 校验字段项\r\n * \r\n * @return {boolean} 如果日历数组中包含校验项则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n let {\r\n    year,\r\n    month,\r\n    day\r\n } = get(date , fields) ;\r\n\r\n for(let date of dates){\r\n\r\n    let {\r\n        year:itemYear,\r\n        month:itemMonth,\r\n        day:itemDay\r\n    } = get(date , fields) ;\r\n\r\n    if(itemYear === year && itemMonth === month && itemDay === day){\r\n\r\n        return true ;\r\n    }\r\n }\r\n\r\n return false ;\r\n \r\n\r\n\r\n\r\n \n\n    }\n    \n                    return function(dates , date , fields = ['year' , 'month' , 'day']){\n    \n                        \n        if(!var_init_locked_1609121322092){\n\n            get = include('src::date.get.properties');\n\n            var_init_locked_1609121322092 = true ;\n        }\n        \n    \n                        return main.call(this , dates , date , fields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.dates.includes"
  },
  "src::is.empty": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::is.empty(<mixed> data , <boolean> allowEmptyString)",
    "standard": true,
    "importNames": [
      "src::is.array"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray;\n    \n                    let var_init_locked_1609121322156;\n    \n                    \n\n                    function main(data , allowEmptyString){\n\n        /**\r\n * \r\n * 判定数据是否为空\r\n * \r\n * @import is.array\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @param {boolean} [allowEmptyString = false] 是否视空符串不为空，默认空符串为空\r\n * \r\n * @return {mixed} 如果给定值为空则返回 true , 否则返回 false  \r\n * \r\n */\r\n\r\nreturn (data == null) || (!allowEmptyString ? data === '' : false) || (isArray(data) && data.length === 0);\n\n    }\n    \n                    return function(data , allowEmptyString = false){\n    \n                        \n        if(!var_init_locked_1609121322156){\n\n            isArray = include('src::is.array');\n\n            var_init_locked_1609121322156 = true ;\n        }\n        \n    \n                        return main.call(this , data , allowEmptyString) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.empty"
  },
  "src::is.string": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.string(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121322176;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为字符串类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为字符串类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isType(data , 'string') ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322176){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121322176 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.string"
  },
  "src::array.from": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::array.from(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.empty",
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isEmpty,isString;\n    \n                    let var_init_locked_1609121322136;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 将非数组数据打包成数组数据\r\n * \r\n * @import is.empty\r\n * \r\n * @import is.string\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {array} 数组数据\r\n * \r\n */\r\n\r\nif(isEmpty(data)){\r\n\r\n    return [];\r\n}\r\n\r\nif (data && data.length !== undefined && !isString(data)) {\r\n\r\n    return Array.from(data);\r\n\r\n}\r\n\r\nreturn [\r\n    data\r\n];\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322136){\n\n            isEmpty = include('src::is.empty');\nisString = include('src::is.string');\n\n            var_init_locked_1609121322136 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.from"
  },
  "src::date.get.properties": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::date.get.properties(<Date> date , <string[]> names)",
    "standard": true,
    "importNames": [
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from;\n    \n                    let var_init_locked_1609121322116;\n    \n                    \n\n                    function main(date , names){\n\n        \r\n/**\r\n * \r\n * 获得指定日期的属性值\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {Date} date 日期对象\r\n * \r\n * @param {string[]} [names] 属性名称集合\r\n * \r\n * @return {object} 日期描述\r\n * \r\n */\r\n\r\n names = from(names) ;\r\n\r\n let result = {} ;\r\n\r\n for(name of names){\r\n\r\n    let value ;\r\n\r\n    switch(name){\r\n\r\n        case 'year':\r\n\r\n            value = date.getFullYear() ;\r\n\r\n            break ;\r\n\r\n        case 'month':\r\n\r\n            value = date.getMonth() + 1 ;\r\n\r\n            break ;\r\n\r\n        case 'day':\r\n\r\n            value = date.getDate() ;\r\n    }\r\n\r\n    result[name] = value ;\r\n }\r\n\r\n return result ;\n\n    }\n    \n                    return function(date , names){\n    \n                        \n        if(!var_init_locked_1609121322116){\n\n            from = include('src::array.from');\n\n            var_init_locked_1609121322116 = true ;\n        }\n        \n    \n                        return main.call(this , date , names) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.get.properties"
  },
  "src::array.includes": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::array.includes(<mixed> data , <mixed> checkItem)",
    "standard": true,
    "importNames": [
      "src::array.indexOf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let indexOf;\n    \n                    let var_init_locked_1609121322197;\n    \n                    \n\n                    function main(data , checkItem){\n\n        \r\n/**\r\n * \r\n * 函数实现说明\r\n * \r\n * @import indexOf from array.indexOf\r\n * \r\n * @param {mixed} data 数组\r\n * \r\n * @param {mixed} checkItem 检测项\r\n * \r\n * @return {boolean} 如果检测项存在数组中则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return indexOf(data , checkItem) !== -1 ;\n\n    }\n    \n                    return function(data , checkItem){\n    \n                        \n        if(!var_init_locked_1609121322197){\n\n            indexOf = include('src::array.indexOf');\n\n            var_init_locked_1609121322197 = true ;\n        }\n        \n    \n                        return main.call(this , data , checkItem) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.includes"
  },
  "src::is.number": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.number(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121322289;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为数值类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为数值类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isType(data , 'number') && isFinite(data);\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322289){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121322289 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.number"
  },
  "src::is.boolean": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.boolean(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121322308;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为布尔类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为布尔类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isType(data , 'boolean') ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322308){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121322308 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.boolean"
  },
  "src::is.function": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::is.function(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121322328;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为函数类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {mixed} 如果给定值为函数类型则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn isType(data , 'function') && !data.__ZBEE_IS_CLASS__;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322328){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121322328 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.function"
  },
  "src::data.type": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::data.type(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.array",
      "src::is.string",
      "src::is.number",
      "src::is.boolean",
      "src::is.date",
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,isArray,isString,isNumber,isBoolean,isDate,isFunction;\n    \n                    let var_init_locked_1609121322267;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 返回数据类型描述\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import is.string\r\n * \r\n * @import is.number\r\n * \r\n * @import is.boolean\r\n * \r\n * @import is.date\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {string} 数据类型描述 \r\n * \r\n */\r\n\r\n if(isObject(data)){\r\n\r\n    return 'object' ;\r\n }\r\n\r\n if(isArray(data)){\r\n\r\n    return 'array' ;\r\n }\r\n\r\n if(isString(data)){\r\n\r\n    return 'string' ;\r\n }\r\n\r\n if(isNumber(data)){\r\n\r\n   return 'number' ;\r\n }\r\n\r\n if(isBoolean(data)){\r\n\r\n   return 'boolean' ;\r\n }\r\n\r\n if(isDate(data)){\r\n\r\n  return 'date' ;\r\n  \r\n }\r\n\r\n if(isFunction(data)){\r\n\r\n   return 'function' ;\r\n }\r\n\r\n return 'other' ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121322267){\n\n            isObject = include('src::is.object.simple');\nisArray = include('src::is.array');\nisString = include('src::is.string');\nisNumber = include('src::is.number');\nisBoolean = include('src::is.boolean');\nisDate = include('src::is.date');\nisString = include('src::is.string');\nisFunction = include('src::is.function');\n\n            var_init_locked_1609121322267 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.type"
  },
  "src::data.equals": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.equals(<mixed> value1 , <mixeds> value2)",
    "standard": true,
    "importNames": [
      "src::data.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getType;\n    \n                    let var_init_locked_1609121322241;\n    \n                    \n\n                    /**\r\n * \r\n * 匹配两个对象数据是否匹配\r\n * \r\n * @import getType from data.type\r\n * \r\n * @param {mixed} value1 第一个对象数据\r\n * \r\n * @param {mixeds} value2 第二个对象数据\r\n * \r\n * @return {boolean} 如果对象数据匹配则返回 true ， 否则返回 false\r\n * \r\n */\r\n\r\n function main(value1 , value2){\r\n\r\n    if(value1 === value2){\r\n\r\n        return true ;\r\n    }\r\n\r\n    let type1 = getType(value1),\r\n        type2 = getType(value2) ;\r\n\r\n    if(type1 === type2){\r\n\r\n        if(value1 === value2){\r\n\r\n            return true ;\r\n        }\r\n\r\n        switch(type1){\r\n\r\n            case 'object':\r\n\r\n                return object_equals(value1 , value2) ;\r\n\r\n            case 'array':\r\n\r\n                return array_equals(value1 , value2) ;\r\n\r\n            case 'date':\r\n\r\n                return date_equals(value1 , value2) ;\r\n        }\r\n    }\r\n\r\n    return false ;\r\n }\r\n\r\n const {\r\n    keys\r\n } = Object ;\r\n\r\n function object_equals(value1 , value2){\r\n\r\n    let names1 = keys(value1),\r\n        names2 = keys(value2);\r\n\r\n    if(names1.length !== names2.length){\r\n\r\n        return false ;\r\n    }\r\n\r\n    for(let name of names1){\r\n\r\n        if(!names2.includes(name)){\r\n\r\n            return false ;\r\n        }\r\n\r\n        if(!main(value1[name] , value2[name])){\r\n\r\n            return false ;\r\n        }\r\n    }\r\n\r\n    return true ;\r\n }\r\n\r\n function array_equals(value1 , value2){\r\n\r\n    if(value1.length !== value2.length){\r\n\r\n        return false ;\r\n\r\n    }\r\n\r\n    let len = value1.length ;\r\n\r\n    for(let i = 0 ; i < len ; i ++){\r\n\r\n        if(!main(value1[i] , value2[i])){\r\n\r\n            return false ;\r\n        }\r\n    }\r\n\r\n    return true ;\r\n }\r\n\r\n function date_equals(value1 , value2){\r\n\r\n    return value1.getTime() === value2.getTime() ;\r\n }\n    \n                    return function(value1 , value2){\n    \n                        \n        if(!var_init_locked_1609121322241){\n\n            getType = include('src::data.type');\n\n            var_init_locked_1609121322241 = true ;\n        }\n        \n    \n                        return main.call(this , value1 , value2) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.equals"
  },
  "src::array.indexOf": {
    "meta": "code.meta.script.function",
    "signature": "<Number> src::array.indexOf(<mixed> data , <mixed> checkItem)",
    "standard": true,
    "importNames": [
      "src::data.equals"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let equals;\n    \n                    let var_init_locked_1609121322217;\n    \n                    \n\n                    function main(data , checkItem){\n\n        \r\n/**\r\n * \r\n * 返回指定项目对应的下标\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @param {mixed} data 数组\r\n * \r\n * @param {mixed} checkItem 检测项\r\n * \r\n * @return {Number} 数组下标\r\n * \r\n */\r\n\r\n let {\r\n     length\r\n } = data ;\r\n\r\nfor(let i = 0 ; i < length ; i ++){\r\n\r\n    if(equals(data[i] , checkItem)){\r\n\r\n        return i ;\r\n    }\r\n }\r\n\r\n return -1 ;\n\n    }\n    \n                    return function(data , checkItem){\n    \n                        \n        if(!var_init_locked_1609121322217){\n\n            equals = include('src::data.equals');\n\n            var_init_locked_1609121322217 = true ;\n        }\n        \n    \n                        return main.call(this , data , checkItem) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.indexOf"
  },
  "src::array.insert.after": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.insert.after(<array> data , <mixed> insertItem , <mixed> existItem)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , insertItem , existItem){\n\n        \r\n/**\r\n * \r\n * 在数组中指定项之后添加\r\n * \r\n * @param {array} data 目标数组\r\n * \r\n * @param {mixed} insertItem 需要添加的项\r\n * \r\n * @param {mixed} existItem 指定项\r\n * \r\n */\r\n\r\n let index = data.indexOf(existItem) ;\r\n\r\n if(index !== -1){\r\n\r\n    data.splice(index + 1 , 0 , insertItem) ;\r\n }\n\n    }\n    \n                    return function(data , insertItem , existItem){\n    \n                        \n    \n                        return main.call(this , data , insertItem , existItem) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.insert.after"
  },
  "src::array.insert.before": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.insert.before(<array> data , <mixed> insertItem , <mixed> existItem)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , insertItem , existItem){\n\n        \r\n/**\r\n * \r\n * 在数组中指定项之前添加\r\n * \r\n * @param {array} data 目标数组\r\n * \r\n * @param {mixed} insertItem 需要添加的项\r\n * \r\n * @param {mixed} existItem 指定项\r\n * \r\n */\r\n\r\n let index = data.indexOf(existItem) ;\r\n\r\n if(index !== -1){\r\n\r\n    data.splice(index , 0 , insertItem) ;\r\n }\n\n    }\n    \n                    return function(data , insertItem , existItem){\n    \n                        \n    \n                        return main.call(this , data , insertItem , existItem) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.insert.before"
  },
  "src::array.insert": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.insert(<array> data , <number> index , <mixed> ...items)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , index , ...items){\n\n        \r\n/**\r\n * \r\n * 在指定下标处插入项\r\n * \r\n * @param {array} data 数组\r\n * \r\n * @param {number} index 数组下标\r\n * \r\n * @param {mixed} [...items] 项\r\n * \r\n */\r\n\r\n data.splice(index , 0 , ...items) ;\n\n    }\n    \n                    return function(data , index , ...items){\n    \n                        \n    \n                        return main.call(this , data , index , ...items) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.insert"
  },
  "src::array.object.property": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::array.object.property(<array> data , <string> name)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , name){\n\n        \r\n/**\r\n * \r\n * 获取数组项对象中的属性形成新的数组\r\n * \r\n * @param {array} data 数组\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @return {array} 数组\r\n * \r\n */\r\n\r\n let result = [] ;\r\n\r\n for(let item of data){\r\n\r\n    result.push(item[name]) ;\r\n }\r\n\r\n return result ;\n\n    }\n    \n                    return function(data , name){\n    \n                        \n    \n                        return main.call(this , data , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.object.property"
  },
  "src::array.proxy": {
    "meta": "code.meta.script.function",
    "signature": "<array.Proxy> src::array.proxy(<mixed> target)",
    "standard": true,
    "importNames": [
      "src::object.proxy",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createProxy,from;\n    \n                    let var_init_locked_1609121322429;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 数组代理\r\n * \r\n * @import createProxy from object.proxy\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} target 需要代理的对象\r\n * \r\n * @return {array.Proxy} 代理对象引用 \r\n * \r\n */\r\n\r\n function main(target){\r\n\r\n    return new Proxy(target) ;\r\n }\r\n\r\n class Proxy extends Array{\r\n\r\n    constructor(target){\r\n\r\n        super() ;\r\n\r\n        this.push(...from(target)) ;\r\n    }\r\n\r\n    includes(target){\r\n\r\n        let proxies = this ;\r\n\r\n        for(let proxy of proxies){\r\n\r\n            if(proxy.target === target){\r\n\r\n                return true ;\r\n            }\r\n        }\r\n\r\n        return false ;\r\n    }\r\n\r\n    push(...items){\r\n\r\n        let proxies = [] ;\r\n\r\n        for(let item of items){\r\n\r\n            proxies.push(createProxy(item)) ;\r\n        }\r\n\r\n        super.push(...proxies) ;\r\n    }\r\n\r\n    call(...args){\r\n\r\n        return doExecute(this , 'call' , ...args) ;\r\n    }\r\n }\r\n\r\n function doExecute(proxies , method , ...args){\r\n\r\n    let result = [] ;\r\n\r\n    for(let proxy of proxies){\r\n\r\n        result.push(proxy[method](...args)) ;\r\n    }\r\n\r\n    return result ;\r\n }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121322429){\n\n            createProxy = include('src::object.proxy');\nfrom = include('src::array.from');\n\n            var_init_locked_1609121322429 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.proxy"
  },
  "src::class.empty": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::class.empty()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121322632;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 返回一个空类\r\n * \r\n * @once\r\n * \r\n * @return {function} 类引用 \r\n * \r\n */\r\n\r\n return class {\r\n\r\n } ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121322632){\n\n            return var_once_value_1609121322632 ;\n\n        }\n        return var_once_value_1609121322632 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "class.empty"
  },
  "src::map.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::map.constructor()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 初始化 Map 对象\r\n * \r\n */\r\n\r\nthis.map = new Map() ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.constructor"
  },
  "src::map.size": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::map.size()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 获得当前 Map 的键值对数量\r\n * \r\n * @return {number} 数量 \r\n * \r\n */\r\n\r\nreturn this.map.size ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.size"
  },
  "src::map.find": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::map.find(<array> keys)",
    "standard": true,
    "importNames": [
      "src::data.equals"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let equals;\n    \n                    let var_init_locked_1609121322752;\n    \n                    \n\n                    function main(keys){\n\n        \r\n/**\r\n * \r\n * 判断指定组合键是否存在\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @param {array} keys 组合键\r\n * \r\n * @return {object} 返回查询结果 \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    map\r\n} = me,\r\ncurrentKeys = map.keys(),\r\n{\r\n    length\r\n} = keys;\r\n\r\nfor(let groupKeys  of currentKeys){\r\n\r\n   if(length === groupKeys.length){\r\n\r\n       let isMatch = true ;\r\n\r\n       for(let i = 0 ; i < length ; i ++){\r\n\r\n           if(!equals(groupKeys[i] ,  keys[i])){\r\n\r\n               isMatch = false ;\r\n\r\n               break ;\r\n           }\r\n       }\r\n\r\n       if(isMatch){\r\n\r\n           return {\r\n               match:true,\r\n               key:groupKeys\r\n           } ;\r\n       }\r\n   }\r\n}\r\n\r\nreturn {\r\n    match:false\r\n} ;\n\n    }\n    \n                    return function(keys){\n    \n                        \n        if(!var_init_locked_1609121322752){\n\n            equals = include('src::data.equals');\n\n            var_init_locked_1609121322752 = true ;\n        }\n        \n    \n                        return main.call(this , keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.find"
  },
  "src::map.set": {
    "meta": "code.meta.script.function",
    "signature": "<Map> src::map.set(<array> ...values)",
    "standard": true,
    "importNames": [
      "src::map.find"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121322714 = new Map();\n    \n                    return function(...values){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121322714.has(this)){\n\n            var_current_scope_1609121322714.set(this , (() => {\n                const find = include('src::map.find').bind(this);\n\n                function main(...values){\n\n        \r\n/**\r\n * \r\n * 设置一个值\r\n * \r\n * @import find from .find scoped\r\n * \r\n * @param {array} [...values] 包含多维键，以及相应值\r\n * \r\n * @return {Map} 返回当前对象 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    map\r\n } = me,\r\n {\r\n     length\r\n } = values;\r\n\r\n if(length >= 2){\r\n\r\n    let keys = values.slice(0 , length - 1),\r\n        value = values[length - 1],\r\n        {\r\n            match,\r\n            key\r\n        } = find(keys);\r\n\r\n    if(match){\r\n\r\n        map.set(key ,value) ;\r\n    \r\n    }else{\r\n\r\n        map.set(keys , value) ;\r\n    }\r\n }\r\n\r\n return me ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121322714.get(this) ;\n\n        \n    \n                        return main.call(this , ...values) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.set"
  },
  "src::map.get": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::map.get(<array> ...keys)",
    "standard": true,
    "importNames": [
      "src::map.find"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121322782 = new Map();\n    \n                    return function(...keys){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121322782.has(this)){\n\n            var_current_scope_1609121322782.set(this , (() => {\n                const find = include('src::map.find').bind(this);\n\n                function main(...keys){\n\n        \r\n/**\r\n * \r\n * 判断指定组合键是否存在\r\n * \r\n * @import find from .find scoped\r\n * \r\n * @param {array} [...keys] 组合键\r\n * \r\n * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    map\r\n} = me ;\r\n\r\nlet {\r\n    match,\r\n    key\r\n} = find(keys) ;\r\n\r\nif(match){\r\n\r\n    return map.get(key) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121322782.get(this) ;\n\n        \n    \n                        return main.call(this , ...keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.get"
  },
  "src::map.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::map.has(<array> ...keys)",
    "standard": true,
    "importNames": [
      "src::map.find"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121322801 = new Map();\n    \n                    return function(...keys){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121322801.has(this)){\n\n            var_current_scope_1609121322801.set(this , (() => {\n                const find = include('src::map.find').bind(this);\n\n                function main(...keys){\n\n        \r\n/**\r\n * \r\n * 判断指定组合键是否存在\r\n * \r\n * @import find from .find scoped\r\n * \r\n * @param {array} [...keys] 组合键\r\n * \r\n * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n let {\r\n    match\r\n } = find(keys) ;\r\n\r\n return match ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121322801.get(this) ;\n\n        \n    \n                        return main.call(this , ...keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.has"
  },
  "src::map.delete": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::map.delete(<array> ...keys)",
    "standard": true,
    "importNames": [
      "src::map.find"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121322823 = new Map();\n    \n                    return function(...keys){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121322823.has(this)){\n\n            var_current_scope_1609121322823.set(this , (() => {\n                const find = include('src::map.find').bind(this);\n\n                function main(...keys){\n\n        \r\n\r\n/**\r\n * \r\n * 删除指定组合键\r\n * \r\n * @import find from .find scoped\r\n * \r\n * @param {array} [...keys] 组合键\r\n * \r\n * @return {boolean} 如果组合键存在，则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    map\r\n} = me ;\r\n\r\nlet {\r\n    match,\r\n    key\r\n} = find(keys) ;\r\n\r\nif(match){\r\n\r\n    return map.delete(key) ;\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121322823.get(this) ;\n\n        \n    \n                        return main.call(this , ...keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.delete"
  },
  "src::map.for": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::map.for(<function> fn)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(fn){\n\n        \r\n/**\r\n * \r\n * 循环\r\n * \r\n * @param {function} fn \r\n * \r\n */\r\n\r\n let {\r\n    map\r\n } = this ;\r\n\r\n map.forEach(fn) ;\n\n    }\n    \n                    return function(fn){\n    \n                        \n    \n                        return main.call(this , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.for"
  },
  "src::map.clear": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::map.clear()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 清空\r\n * \r\n */\r\n\r\n this.map.clear() ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.clear"
  },
  "src::is.defined": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.defined(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判断给定数据是否定义\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果数据定义则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn data !== undefined ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.defined"
  },
  "src::map.find.fuzzy": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::map.find.fuzzy(<array> ...keys)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121322879;\n    \n                    \n\n                    function main(...keys){\n\n        \r\n/**\r\n * \r\n * 以模糊寻找方式匹配键值\r\n * \r\n * @import is.defined\r\n * \r\n * @param {array} [...keys] 匹配键值\r\n * \r\n * @return {array} 搜索结果 \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    map\r\n} = me,\r\ncurrentKeys = map.keys(),\r\n{\r\n    length\r\n} = keys,\r\nresult = [];\r\n\r\nfor(let groupKeys  of currentKeys){\r\n\r\n    let isMatch = true ;\r\n\r\n    for(let i = 0 ; i < length ; i ++){\r\n\r\n        let key = keys[i] ;\r\n\r\n        if(!isDefined(key)){\r\n\r\n            continue ;\r\n        }\r\n\r\n        if(groupKeys[i] !== key){\r\n\r\n            isMatch = false ;\r\n\r\n            break ;\r\n        }\r\n    }\r\n\r\n    if(isMatch){\r\n\r\n        result.push({\r\n            key:groupKeys,\r\n            value:map.get(groupKeys)\r\n        }) ;\r\n    }\r\n}\r\n\r\nreturn result ;\n\n    }\n    \n                    return function(...keys){\n    \n                        \n        if(!var_init_locked_1609121322879){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121322879 = true ;\n        }\n        \n    \n                        return main.call(this , ...keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map.find.fuzzy"
  },
  "src::map": {
    "meta": "code.meta.class",
    "signature": "<void> src::map()",
    "standard": true,
    "importNames": [
      "src::class.empty",
      "src::map.constructor",
      "src::map.size",
      "src::map.set",
      "src::map.get",
      "src::map.has",
      "src::map.delete",
      "src::map.for",
      "src::map.clear",
      "src::map.find.fuzzy",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let extend,constructor,get_size,method_set,method_get,method_has,method_delete,method_forEach,method_clear,method_find,isObject;\n    \n                    let var_init_locked_1609121322612;\n    \n                    let var_class_1609121322612;\n    \n                    \n\n                    let var_global_main_1609121322612 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121322612){\n\n            extend = include('src::class.empty')();\nconstructor = include('src::map.constructor');\nget_size = include('src::map.size');\nmethod_set = include('src::map.set');\nmethod_get = include('src::map.get');\nmethod_has = include('src::map.has');\nmethod_delete = include('src::map.delete');\nmethod_forEach = include('src::map.for');\nmethod_clear = include('src::map.clear');\nmethod_find = include('src::map.find.fuzzy');\nisObject = include('src::is.object.simple');\n\n            class main {\n\n            \n\n            \n\n            constructor(...args){\n\n            \n\n            constructor.apply(this , args) ;\n\n        }\n\n            set(...args){\n\n            return method_set.apply(this , args) ;\n\n        }\nget(...args){\n\n            return method_get.apply(this , args) ;\n\n        }\nhas(...args){\n\n            return method_has.apply(this , args) ;\n\n        }\ndelete(...args){\n\n            return method_delete.apply(this , args) ;\n\n        }\nforEach(...args){\n\n            return method_forEach.apply(this , args) ;\n\n        }\nclear(...args){\n\n            return method_clear.apply(this , args) ;\n\n        }\nfind(...args){\n\n            return method_find.apply(this , args) ;\n\n        }\n\n            get size(){\n\n                return get_size.call(this) ;\n    \n            }\n\n        }\n\n            var_class_1609121322612 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121322612 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::map' ;\n                }\n\n            } ;\n\n            main = var_class_1609121322612 ;\n        \nvar_global_main_1609121322612 = main;\n\n            var_init_locked_1609121322612 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121322612() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "map"
  },
  "src::event.listeners": {
    "meta": "code.meta.script.function",
    "signature": "<Map> src::event.listeners()",
    "standard": true,
    "importNames": [
      "src::map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let map;\n    \n                    let var_init_locked_1609121322567;\n    \n                    let var_once_value_1609121322567;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 维护全局事件监听对象\r\n * \r\n * @import map value\r\n * \r\n * @return {Map} 集合对象 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn map ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121322567){\n\n            map = include('src::map')();\n\n            var_init_locked_1609121322567 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121322567){\n\n            return var_once_value_1609121322567 ;\n\n        }\n        return var_once_value_1609121322567 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listeners"
  },
  "src::event.listener.native.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::event.listener.native.remove(<mixed> target , <string> name , <function> fn , <object> options)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(target , name , fn , options){\n\n        \r\n/**\r\n * \r\n * 适配事件主体对象的移除事件的方法\r\n * \r\n * @param {mixed} target 事件主体\r\n * \r\n * @param {string} name 事件名称\r\n * \r\n * @param {function} fn 事件监听函数\r\n * \r\n * @param {object} [options] 事件监听函数配置\r\n * \r\n */\r\n\r\n if(target.removeEventListener){\r\n\r\n    target.removeEventListener(name , fn , options) ;\r\n \r\n }else{\r\n\r\n    const remove = target.off || target.un;\r\n\r\n    remove.call(target , name , fn) ;\r\n }\r\n\r\n\n\n    }\n    \n                    return function(target , name , fn , options){\n    \n                        \n    \n                        return main.call(this , target , name , fn , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listener.native.remove"
  },
  "src::event.listener.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::event.listener.remove(<mixed> target , <string|object|array> name , <mixed> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.object.simple",
      "src::is.array",
      "src::event.listener.remove",
      "src::event.listeners",
      "src::event.listener.native.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isObject,isArray,remove,listeners,native;\n    \n                    let var_init_locked_1609121322546;\n    \n                    \n\n                    function main(target , name , fn , scope){\n\n        /**\r\n * \r\n * 移除事件监听\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import remove from .remove\r\n * \r\n * @import listeners from ..listeners value\r\n * \r\n * @import native from .native.remove\r\n * \r\n * @param {mixed} target 事件主体\r\n * \r\n * @param {string|object|array} name 事件名称\r\n * \r\n * @param {mixed} fn 事件回调\r\n * \r\n * @param {mixed} [scope] 事件作用域\r\n * \r\n */\r\n\r\n scope = scope || target ;\r\n\r\n if(isString(name)){\r\n\r\n    if(fn){\r\n\r\n        let listener = listeners.get(target , name , fn , scope) ;\r\n\r\n        if(listener){\r\n\r\n            let {\r\n                fn:listenersFn,\r\n                options\r\n            } = listener ;\r\n\r\n            native(target , name , listenersFn , options) ;\r\n\r\n            listeners.delete(target , name , fn , scope) ;\r\n        }\r\n    \r\n    }else{\r\n\r\n        let result = listeners.find(target , name) ;\r\n\r\n        for(let {\r\n            key\r\n        } of result){\r\n\r\n            remove(target , name , key[2] , key[3]) ;\r\n        }\r\n    }\r\n \r\n }else if(isObject(name)){\r\n\r\n    let {\r\n        scope,\r\n        ...listeners\r\n    } = name,\r\n    names = Object.keys(listeners);\r\n\r\n    for(let name of names){\r\n\r\n        remove(target , name , listeners[name] , scope) ;\r\n    }\r\n\r\n }else if(isArray(name)){\r\n\r\n    let names = name ;\r\n\r\n    for(let name of names){\r\n\r\n        remove(target , name) ;\r\n    }\r\n }\n\n    }\n    \n                    return function(target , name , fn , scope){\n    \n                        \n        if(!var_init_locked_1609121322546){\n\n            isString = include('src::is.string');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\nremove = include('src::event.listener.remove');\nlisteners = include('src::event.listeners')();\nnative = include('src::event.listener.native.remove');\n\n            var_init_locked_1609121322546 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listener.remove"
  },
  "src::function.empty": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.empty()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    /**\r\n * \r\n * 返回一个空函数\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nconst emptyFn = () =>{\r\n} ;\r\n\r\nfunction main(){\r\n\r\n    return emptyFn ;\r\n}\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.empty"
  },
  "src::function.get": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::function.get(<string|function> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.function",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isFunction,empty;\n    \n                    let var_init_locked_1609121322953;\n    \n                    \n\n                    function main(fn , scope){\n\n        /**\r\n * \r\n * 获得一个函数引用\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import empty from function.empty\r\n * \r\n * @param {string | function} fn 函数描述\r\n * \r\n * @param {mixed} [scope] 函数作用域\r\n * \r\n * @return {function} 函数引用本身 \r\n * \r\n */\r\n\r\nif(isString(fn)){\r\n\r\n    if(scope && fn in scope){\r\n\r\n        fn = scope[fn] ;\r\n\r\n    }else{\r\n\r\n        try{\r\n\r\n            fn = include(fn) ;\r\n        \r\n        }catch(err){\r\n\r\n\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nif(isFunction(fn)){\r\n\r\n    if(scope){\r\n\r\n        return fn.bind(scope) ;\r\n    }\r\n\r\n    return fn ;\r\n}\r\n\r\nreturn empty() ;\n\n    }\n    \n                    return function(fn , scope){\n    \n                        \n        if(!var_init_locked_1609121322953){\n\n            isString = include('src::is.string');\nisFunction = include('src::is.function');\nempty = include('src::function.empty');\n\n            var_init_locked_1609121322953 = true ;\n        }\n        \n    \n                        return main.call(this , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.get"
  },
  "src::event.listener.native.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::event.listener.native.add(<mixed> target , <string> name , <function> fn , <object> options)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(target , name , fn , options){\n\n        \r\n/**\r\n * \r\n * 适配事件主体对象的添加事件的方法\r\n * \r\n * @param {mixed} target 事件主体\r\n * \r\n * @param {string} name 事件名称\r\n * \r\n * @param {function} fn 事件监听函数\r\n * \r\n * @param {object} [options] 事件参数\r\n * \r\n */\r\n\r\n if(target.addEventListener){\r\n\r\n    target.addEventListener(name , fn , options) ;\r\n \r\n }else{\r\n\r\n    target.on(name , fn) ;\r\n }\n\n    }\n    \n                    return function(target , name , fn , options){\n    \n                        \n    \n                        return main.call(this , target , name , fn , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listener.native.add"
  },
  "src::event.listener.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::event.listener.add(<mixed> target , <string|object> name , <mixed> fn , {<boolean> once , <object> options , <mixed> scope})",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.object.simple",
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::function.get",
      "src::event.listeners",
      "src::event.listener.native.add",
      "src::is.array"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isObject,add,remove,get,listeners,native,isArray;\n    \n                    let var_init_locked_1609121322509;\n    \n                    \n\n                    function main(target , name , fn , {once , options , scope}){\n\n        /**\r\n * \r\n * 添加事件监听\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import add from .add\r\n * \r\n * @import remove from .remove\r\n * \r\n * @import get from function.get\r\n * \r\n * @import listeners from ..listeners value\r\n * \r\n * @import native from .native.add\r\n * \r\n * @import is.array\r\n * \r\n * @param {mixed} target 事件主体\r\n * \r\n * @param {string|object} name 事件名称\r\n * \r\n * @param {mixed} fn 事件回调\r\n * \r\n * @param {object} [options = {}] 事件配置\r\n * \r\n * @param {boolean} [options.once = false] 只监听一次\r\n * \r\n * @param {object} [options.options] 浏览器事件监听所需要参数\r\n * \r\n * @param {mixed} [options.scope] 事件作用域\r\n * \r\n */\r\n\r\n scope = scope || target ;\r\n\r\n if(isString(name)){\r\n\r\n    if(listeners.has(target , name , fn , scope)){\r\n\r\n        return ;\r\n    }\r\n\r\n    let listener,\r\n        listenerFn = get(fn , scope) ;\r\n\r\n    if(listenerFn){\r\n\r\n        if(once){\r\n\r\n            listener = function(...args){\r\n\r\n                listenerFn(...args) ;\r\n\r\n                remove(target , name , fn , {\r\n                    scope\r\n                }) ;\r\n            } ;\r\n        \r\n        }else{\r\n\r\n            listener = listenerFn ;\r\n        }\r\n\r\n        native(target , name , listener , options) ;\r\n\r\n        listeners.set(target , name , fn , scope , {\r\n            fn:listener,\r\n            options\r\n        }) ;\r\n    }\r\n\r\n }else if(isObject(name)){\r\n\r\n    let {\r\n        scope,\r\n        ...listeners\r\n    } = name,\r\n    names = Object.keys(listeners) ;\r\n\r\n    for(let name of names){\r\n\r\n        let listener = listeners[name];\r\n\r\n        if(isObject(listener)){\r\n\r\n            let {\r\n                fn,\r\n                ...options\r\n            } = listener ;\r\n\r\n            options.scope = options.scope || scope ;\r\n\r\n            add(target , name , fn , options) ;\r\n        \r\n        }else{\r\n\r\n            add(target , name , listeners[name] , {\r\n                scope\r\n            }) ;\r\n        }        \r\n    }\r\n\r\n }else if(isArray(name)){\r\n\r\n    for(let config of name){\r\n\r\n        add(target , config) ;\r\n    }\r\n }\n\n    }\n    \n                    return function(target , name , fn , {once = false , options , scope} = {}){\n    \n                        \n        if(!var_init_locked_1609121322509){\n\n            isString = include('src::is.string');\nisObject = include('src::is.object.simple');\nadd = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\nget = include('src::function.get');\nlisteners = include('src::event.listeners')();\nnative = include('src::event.listener.native.add');\nisArray = include('src::is.array');\n\n            var_init_locked_1609121322509 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , fn , {once , options , scope}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listener.add"
  },
  "src::object.proxy": {
    "meta": "code.meta.script.function",
    "signature": "<object.Proxy> src::object.proxy(<mixed> target , <mixed> interceptor)",
    "standard": true,
    "importNames": [
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let add,remove,isFunction;\n    \n                    let var_init_locked_1609121322457;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 对象代理，如果对象没有需要的方法或者属性时，则会抛出异常\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} target 需要代理的对象\r\n * \r\n * @param {mixed} [interceptor = {}] 需要代理的对象\r\n * \r\n * @return {object.Proxy} 代理对象引用 \r\n * \r\n */\r\n\r\n function main(target , interceptor){\r\n\r\n    return new Proxy(target , interceptor) ;\r\n }\r\n\r\n class Proxy{\r\n\r\n    constructor(target , interceptor){\r\n\r\n        let me = this ;\r\n\r\n        me.target = target ;\r\n\r\n        me.interceptor = interceptor ;\r\n    }\r\n\r\n    call(method , ...args){\r\n\r\n        return call.call(this , true , method , ...args) ;\r\n    }\r\n\r\n    callIf(method , ...args){\r\n\r\n        return call.call(this , false , method , ...args) ;\r\n    }\r\n\r\n    set(name , value){\r\n\r\n        set.call(this , true , name , value) ;\r\n    }\r\n\r\n    setIf(name , value){\r\n\r\n        set.call(this , false , name , value) ;\r\n    }\r\n\r\n    get(name){\r\n\r\n        return get.call(this , true , name) ;\r\n    }\r\n\r\n    getIf(name){\r\n\r\n        return get.call(this , false , name) ;\r\n    }\r\n\r\n    fireEvent(name , ...args){\r\n\r\n        this.callIf('fireEvent' , name , ...args) ;\r\n    }\r\n\r\n    on(...args){\r\n\r\n        add(this.target , ...args) ;\r\n    }\r\n\r\n    off(...args){\r\n\r\n        remove(this.target , ...args) ;\r\n    }\r\n }\r\n\r\n function call(isThrowError , method , ...args){\r\n\r\n    let me = this,\r\n        {\r\n            target\r\n        } = me ;\r\n\r\n    if(method in target){\r\n\r\n        if(doIntercept.call(me , method , ...args)){\r\n\r\n            return ;\r\n        }\r\n\r\n        return target[method](...args) ;\r\n    \r\n    }else if(isThrowError){\r\n\r\n        throw new ProxyMethodNotFoundError(target , method) ;\r\n    }\r\n }\r\n\r\n function set(isThrowError , name , value){\r\n\r\n    let {\r\n        target\r\n    } = this ;\r\n\r\n    if(name in target){\r\n\r\n        if(doIntercept.call(me , name , value)){\r\n\r\n            return ;\r\n        }\r\n\r\n        target[name] = value ;\r\n    \r\n    }else if(isThrowError){\r\n\r\n        throw new ProxyPropertyNotFoundError(target , name , 'set') ;\r\n    }\r\n }\r\n\r\n function get(isThrowError , name){\r\n\r\n    let {\r\n        target\r\n    } = this ;\r\n\r\n    if(name in target){\r\n\r\n        return target[name] ;\r\n    \r\n    }else if(isThrowError){\r\n\r\n        throw new ProxyPropertyNotFoundError(target , name , 'get') ;\r\n    }\r\n }\r\n\r\n function doIntercept(method , ...args){\r\n\r\n    let {\r\n        target,\r\n        interceptor\r\n    } = this ;\r\n\r\n    if(isFunction(interceptor)){\r\n\r\n        return interceptor(target , method , ...args) === false;\r\n    }\r\n\r\n    if(method in interceptor){\r\n\r\n        return interceptor[method](target , ...args) === false ;\r\n    }\r\n\r\n    return false ;\r\n }\r\n\r\n class ProxyMethodNotFoundError extends Error{\r\n\r\n    constructor(target , method){\r\n\r\n        super(`无法访问名称为 ${method} 的方法`) ;\r\n\r\n        let me = this ;\r\n\r\n        me.proxyTarget = target ;\r\n\r\n        me.proxyMethod = method ;\r\n\r\n    }\r\n }\r\n\r\n class ProxyPropertyNotFoundError extends Error{\r\n\r\n    constructor(target , property , mode){\r\n\r\n        let modeMessage ;\r\n\r\n        switch(mode){\r\n\r\n            case 'set':\r\n\r\n                modeMessage = '设置' ;\r\n\r\n                break ;\r\n\r\n            case 'get':\r\n\r\n                modeMessage = '获取' ;\r\n        }\r\n\r\n        super(`无法${modeMessage}名称为 ${property} 的属性`) ;\r\n\r\n        let me = this ;\r\n\r\n        me.proxyTarget = target ;\r\n\r\n        me.proxyProperty = property ;\r\n\r\n    }\r\n }\n    \n                    return function(target , interceptor = {}){\n    \n                        \n        if(!var_init_locked_1609121322457){\n\n            add = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\nisFunction = include('src::is.function');\n\n            var_init_locked_1609121322457 = true ;\n        }\n        \n    \n                        return main.call(this , target , interceptor) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.proxy"
  },
  "src::array.remove.all": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.remove.all(<array> data , <mixed> item)",
    "standard": true,
    "importNames": [
      "src::array.remove.index",
      "src::array.indexOf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove,indexOf;\n    \n                    let var_init_locked_1609121323004;\n    \n                    \n\n                    function main(data , item){\n\n        \r\n/**\r\n * \r\n * 在数组中去除所有指定项目\r\n * \r\n * @import remove from .index\r\n * \r\n * @import indexOf from ..indexOf\r\n * \r\n * @param {array} data 数组\r\n * \r\n * @param {mixed} item 项目\r\n * \r\n */\r\n\r\nwhile(true){\r\n\r\n    let index = indexOf(data , item) ;\r\n\r\n    if(index !== -1){\r\n\r\n        remove(data , index) ;\r\n    \r\n    }else{\r\n\r\n        break ;\r\n    }\r\n}\n\n    }\n    \n                    return function(data , item){\n    \n                        \n        if(!var_init_locked_1609121323004){\n\n            remove = include('src::array.remove.index');\nindexOf = include('src::array.indexOf');\n\n            var_init_locked_1609121323004 = true ;\n        }\n        \n    \n                        return main.call(this , data , item) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.remove.all"
  },
  "src::array.remove.index": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::array.remove.index(<array> data , <number> index)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , index){\n\n        \r\n/**\r\n * \r\n * 根据数组下标删除对应项\r\n * \r\n * @param {array} data 作用数组\r\n * \r\n * @param {number} index 数组项的下标\r\n * \r\n * @return {boolean} 如果删除成功则返回 true , 否则返回　false \r\n * \r\n */\r\n\r\nif(index >= 0 && index < data.length){\r\n\r\n    data.splice(index , 1) ;\r\n\r\n    return true ;\r\n}\r\n\r\nreturn false ;\n\n    }\n    \n                    return function(data , index){\n    \n                        \n    \n                        return main.call(this , data , index) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.remove.index"
  },
  "src::array.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::array.remove(<array> data , <mixed> ...items)",
    "standard": true,
    "importNames": [
      "src::array.remove.index",
      "src::array.indexOf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove,indexOf;\n    \n                    let var_init_locked_1609121323042;\n    \n                    \n\n                    function main(data , ...items){\n\n        \r\n/**\r\n * \r\n * 在数组中去除项目\r\n * \r\n * @import remove from array.remove.index\r\n * \r\n * @import indexOf from array.indexOf\r\n * \r\n * @param {array} data 数组\r\n * \r\n * @param {mixed} [...items] 项目\r\n * \r\n */\r\n\r\n for(let item of items){\r\n\r\n    remove(data , indexOf(data , item)) ;\r\n }\n\n    }\n    \n                    return function(data , ...items){\n    \n                        \n        if(!var_init_locked_1609121323042){\n\n            remove = include('src::array.remove.index');\nindexOf = include('src::array.indexOf');\n\n            var_init_locked_1609121323042 = true ;\n        }\n        \n    \n                        return main.call(this , data , ...items) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "array.remove"
  },
  "src::data.channel.axios": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.axios()",
    "standard": true,
    "importNames": [
      "src::data.channel",
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::axios"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Channel,on,off,axios;\n    \n                    let var_init_locked_1609121323092;\n    \n                    let var_class_1609121323092;\n    \n                    \n\n                    let var_global_main_1609121323092 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323092){\n\n            Channel = include('src::data.channel')();\non = include('src::event.listener.add');\noff = include('src::event.listener.remove');\naxios = include('src::axios');\n\n            \r\n/**\r\n * \r\n * 基于 axios 通用客户端单向数据通道\r\n * \r\n * @import Channel from data.channel value\r\n * \r\n * @import on from event.listener.add\r\n * \r\n * @import off from event.listener.remove\r\n * \r\n * @import axios\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nclass main extends Channel{\r\n\r\n    constructor(receivers){\r\n\r\n        super(receivers) ;\r\n\r\n        let me = this ;\r\n\r\n        me.receiveConnected() ;\r\n\r\n        me.cancelTokens = {} ;\r\n    }\r\n\r\n    send(params){\r\n\r\n        return super.send(null , params) ;\r\n    }\r\n\r\n    processSendParams(params){\r\n\r\n        return params ;\r\n    }\r\n\r\n    processReceiveData(data){\r\n\r\n        return data ;\r\n    }\r\n\r\n    doSend({\r\n        type,\r\n        id,\r\n        params\r\n    }){\r\n\r\n        let me = this,\r\n        {\r\n            cancelTokens\r\n        } = me;\r\n\r\n        switch(type){\r\n\r\n            case 'send':\r\n\r\n                cancelTokens[id] = axios(me.processSendParams(params) , (isSuccess , data , response) => {\r\n\r\n                    if(isSuccess){\r\n\r\n                        me.receiveReplyValue({\r\n                            id,\r\n                            value:me.processReceiveData(data , response)\r\n                        }) ;\r\n                    }\r\n\r\n                }) ;\r\n\r\n            break ;\r\n\r\n            case 'cancel-send':\r\n\r\n                if(cancelTokens.hasOwnProperty(id)){\r\n\r\n                    cancelTokens[id]() ;\r\n\r\n                    delete cancelTokens[id] ;\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n}\n\n            var_class_1609121323092 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323092 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel.axios' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323092 ;\n        \nvar_global_main_1609121323092 = main;\n\n            var_init_locked_1609121323092 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323092 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.axios"
  },
  "src::id.zbee": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::id.zbee()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121323215;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * ZBEE 标识\r\n * \r\n * @return {string} 标识 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\n return `ZBEE${Date.now()}` ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121323215){\n\n            return var_once_value_1609121323215 ;\n\n        }\n        return var_once_value_1609121323215 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "id.zbee"
  },
  "src::object.property.inner.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::object.property.inner.name(<string> name)",
    "standard": true,
    "importNames": [
      "src::id.zbee"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let id;\n    \n                    let var_init_locked_1609121323198;\n    \n                    \n\n                    function main(name){\n\n        \r\n/**\r\n * \r\n * 返回属性内部名称\r\n * \r\n * @import id from id.zbee value\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @return {string} 属性内部名称\r\n * \r\n */\r\n\r\n return `__${id}_OBJECT_INNER_PROPERTY_${name}__` ;\n\n    }\n    \n                    return function(name){\n    \n                        \n        if(!var_init_locked_1609121323198){\n\n            id = include('src::id.zbee')();\n\n            var_init_locked_1609121323198 = true ;\n        }\n        \n    \n                        return main.call(this , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.inner.name"
  },
  "src::object.property.inner.define": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.inner.define(<object> target , <string|object> name , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.name",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerName,isObject;\n    \n                    let var_init_locked_1609121323179;\n    \n                    \n\n                    function main(target , name , value){\n\n        \r\n/**\r\n * \r\n * 定义内部属性\r\n * \r\n * @import innerName from .name\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {object} target  定义内部属性的宿主\r\n * \r\n * @param {string|object} name 内部属性名称\r\n * \r\n * @param {mixed} value 内部属性值\r\n * \r\n */\r\n\r\n if(isObject(name)){\r\n\r\n    let properties = name,\r\n        names = Object.keys(properties),\r\n        innerProperties = {};\r\n\r\n    for(let name of names){\r\n\r\n        innerProperties[innerName(name)] = {\r\n            value:properties[name],\r\n            configurable:true,\r\n            writable:true\r\n        }\r\n    }\r\n\r\n    Object.defineProperties(target , innerProperties) ;\r\n \r\n }else{\r\n\r\n    Object.defineProperty(target , innerName(name) , {\r\n        value,\r\n        configurable:true,\r\n        writable:true\r\n    }) ;\r\n }\n\n    }\n    \n                    return function(target , name , value){\n    \n                        \n        if(!var_init_locked_1609121323179){\n\n            innerName = include('src::object.property.inner.name');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121323179 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.inner.define"
  },
  "src::mixin.observable.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.constructor(<object> options)",
    "standard": true,
    "importNames": [
      "src::event.listener.add",
      "src::is.object.simple",
      "src::is.array",
      "src::object.property.inner.define"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let add,isObject,isArray,define;\n    \n                    let var_init_locked_1609121323165;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 初始化观察者\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import define from object.property.inner.define\r\n * \r\n * @param {object} options 配置\r\n * \r\n */\r\n\r\nconst EventEmitter = require('events') ;\r\n\r\nfunction main({\r\n    listeners\r\n}){\r\n    \r\n    let me = this,\r\n        emitter = new EventEmitter() ;\r\n\r\n    emitter.setMaxListeners(Infinity) ;\r\n\r\n    define(me , {\r\n        emitter,\r\n        suspendEvents:false\r\n    }) ;\r\n\r\n    if(isObject(listeners) || isArray(listeners)){\r\n\r\n        add(me , listeners) ;\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121323165){\n\n            add = include('src::event.listener.add');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\ndefine = include('src::object.property.inner.define');\n\n            var_init_locked_1609121323165 = true ;\n        }\n        \n    \n                        return main.call(this , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.constructor"
  },
  "src::object.property.inner.get": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::object.property.inner.get(<object> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerName;\n    \n                    let var_init_locked_1609121323254;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 获取内部属性的值\r\n * \r\n * @import innerName from .name\r\n * \r\n * @param {object} target  定义内部属性的宿主\r\n * \r\n * @param {string} name 内部属性名称\r\n * \r\n * @return {mixed} 内部属性值\r\n * \r\n * \r\n */\r\n\r\n return target[innerName(name)] ;\r\n\r\n \n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121323254){\n\n            innerName = include('src::object.property.inner.name');\n\n            var_init_locked_1609121323254 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.inner.get"
  },
  "src::mixin.observable.listener.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.listener.add(<string> event , <mixed> fn)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121323236;\n    \n                    \n\n                    function main(event , fn){\n\n        \r\n/**\r\n * \r\n * 添加事件监听\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @param {string} event 事件名称\r\n * \r\n * @param {mixed} fn 事件回调函数\r\n * \r\n */\r\n\r\nget(this , 'emitter').addListener(event , fn) ;\n\n    }\n    \n                    return function(event , fn){\n    \n                        \n        if(!var_init_locked_1609121323236){\n\n            get = include('src::object.property.inner.get');\n\n            var_init_locked_1609121323236 = true ;\n        }\n        \n    \n                        return main.call(this , event , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.listener.add"
  },
  "src::mixin.observable.listener.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mixin.observable.listener.has(<string> event)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121323274;\n    \n                    \n\n                    function main(event){\n\n        \r\n/**\r\n * \r\n * 判断是否拥有事件监听\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @param {string} event 事件\r\n * \r\n * @return {boolean} 如果拥有事件监则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn get(this , 'emitter').listenerCount(event) !== 0;\n\n    }\n    \n                    return function(event){\n    \n                        \n        if(!var_init_locked_1609121323274){\n\n            get = include('src::object.property.inner.get');\n\n            var_init_locked_1609121323274 = true ;\n        }\n        \n    \n                        return main.call(this , event) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.listener.has"
  },
  "src::mixin.observable.listener.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.listener.remove(<string> event , <function> fn)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121323289;\n    \n                    \n\n                    function main(event , fn){\n\n        \r\n/**\r\n * \r\n * 移除事件监听\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @param {string} event 事件名称\r\n * \r\n * @param {function} fn 事件回调函数\r\n * \r\n * \r\n */\r\n\r\nget(this , 'emitter').removeListener(event , fn) ;\r\n\n\n    }\n    \n                    return function(event , fn){\n    \n                        \n        if(!var_init_locked_1609121323289){\n\n            get = include('src::object.property.inner.get');\n\n            var_init_locked_1609121323289 = true ;\n        }\n        \n    \n                        return main.call(this , event , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.listener.remove"
  },
  "src::mixin.observable.event.fire": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.event.fire(<string> event , <mixed> ...args)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,get;\n    \n                    let var_init_locked_1609121323312;\n    \n                    \n\n                    \r\n/**\r\n *\r\n * 触发事件\r\n * \r\n * @import is.array\r\n * \r\n * @import get from object.property.inner.get\r\n *\r\n * @param {string} event 事件名称\r\n *\r\n * @param {mixed} [...args] 事件参数\r\n *\r\n */\r\n\r\n function main(event , ...args){\r\n\r\n    let me = this,\r\n        isSuspendEvents = get(me , 'suspendEvents');\r\n\r\n    if(isSuspendEvents === true || isArray(isSuspendEvents) && isSuspendEvents.includes(event)){\r\n\r\n        return ;\r\n    }\r\n\r\n    doFireBubbleEvent.call(me , event , me , ...args) ;\r\n }\r\n\r\n function doFireBubbleEvent(event , target , ...args){\r\n\r\n    let me = this;\r\n\r\n    get(me , 'emitter').emit(event , target ,  ...args) ;\r\n\r\n    let bubbleTarget = get(me , 'bubbleTarget') ;\r\n\r\n    if(bubbleTarget){\r\n\r\n        doFireBubbleEvent.call(bubbleTarget , event , target , ...args) ;\r\n    }\r\n }\n    \n                    return function(event , ...args){\n    \n                        \n        if(!var_init_locked_1609121323312){\n\n            isArray = include('src::is.array');\nget = include('src::object.property.inner.get');\n\n            var_init_locked_1609121323312 = true ;\n        }\n        \n    \n                        return main.call(this , event , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.event.fire"
  },
  "src::object.property.inner.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.inner.set(<object> target , <string> name , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerName;\n    \n                    let var_init_locked_1609121323354;\n    \n                    \n\n                    function main(target , name , value){\n\n        \r\n/**\r\n * \r\n * 设置内部属性的值\r\n * \r\n * @import innerName from .name\r\n * \r\n * @param {object} target  定义内部属性的宿主\r\n * \r\n * @param {string} name 内部属性名称\r\n * \r\n * @param {mixed} value 内部属性值\r\n * \r\n */\r\n\r\nreturn target[innerName(name)] = value;\r\n\r\n \n\n    }\n    \n                    return function(target , name , value){\n    \n                        \n        if(!var_init_locked_1609121323354){\n\n            innerName = include('src::object.property.inner.name');\n\n            var_init_locked_1609121323354 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.inner.set"
  },
  "src::mixin.observable.events.suspend": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.events.suspend(<mixed> events)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.set"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let set;\n    \n                    let var_init_locked_1609121323336;\n    \n                    \n\n                    function main(events){\n\n        \r\n/**\r\n * \r\n * @import set from object.property.inner.set\r\n * \r\n * @param {mixed} [events = true] 需要暂停的事件名称\r\n * \r\n * 暂停事件监听\r\n * \r\n */\r\n\r\nset(this , 'suspendEvents' , events) ;\n\n    }\n    \n                    return function(events = true){\n    \n                        \n        if(!var_init_locked_1609121323336){\n\n            set = include('src::object.property.inner.set');\n\n            var_init_locked_1609121323336 = true ;\n        }\n        \n    \n                        return main.call(this , events) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.events.suspend"
  },
  "src::mixin.observable.events.resume": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.events.resume()",
    "standard": true,
    "importNames": [
      "src::object.property.inner.set"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let set;\n    \n                    let var_init_locked_1609121323371;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * @import set from object.property.inner.set\r\n * \r\n * 恢复事件监听\r\n * \r\n */\r\n\r\n set(this , 'suspendEvents' , false) ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323371){\n\n            set = include('src::object.property.inner.set');\n\n            var_init_locked_1609121323371 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.events.resume"
  },
  "src::mixin.observable.listeners.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mixin.observable.listeners.remove()",
    "standard": true,
    "importNames": [
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121323391;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 清除所有事件监听\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n */\r\n\r\nget(this , 'emitter').removeAllListeners() ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323391){\n\n            get = include('src::object.property.inner.get');\n\n            var_init_locked_1609121323391 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable.listeners.remove"
  },
  "src::mixin.observable": {
    "meta": "code.meta.class",
    "signature": "<void> src::mixin.observable(<mixed> extend)",
    "standard": true,
    "importNames": [
      "src::mixin.observable.constructor",
      "src::mixin.observable.listener.add",
      "src::mixin.observable.listener.has",
      "src::mixin.observable.listener.remove",
      "src::mixin.observable.event.fire",
      "src::mixin.observable.events.suspend",
      "src::mixin.observable.events.resume",
      "src::mixin.observable.listeners.remove",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let constructor,method_addListener,method_hasListener,method_removeListener,method_fireEvent,method_suspendEvents,method_resumeEvents,method_removeAllListeners,isObject;\n    \n                    let var_init_locked_1609121323141;\n    \n                    \n\n                    function main(extend){\n\n                        return class extends extend{\n\n                            \n                \n                            \n                \n                            constructor(options){\n\n            super(options) ;\n\n            if(isObject(options)){\n\n                constructor.call(this , options) ;\n            \n            }else{\n\n                constructor.call(this , {}) ;\n            }\n\n        }\n                \n                            addListener(...args){\n\n            return method_addListener.apply(this , args) ;\n\n        }\non(...args){\n\n                return this.addListener(...args) ;\n    \n            }\nhasListener(...args){\n\n            return method_hasListener.apply(this , args) ;\n\n        }\nremoveListener(...args){\n\n            return method_removeListener.apply(this , args) ;\n\n        }\nun(...args){\n\n                return this.removeListener(...args) ;\n    \n            }\nfireEvent(...args){\n\n            return method_fireEvent.apply(this , args) ;\n\n        }\nsuspendEvents(...args){\n\n            return method_suspendEvents.apply(this , args) ;\n\n        }\nresumeEvents(...args){\n\n            return method_resumeEvents.apply(this , args) ;\n\n        }\nremoveAllListeners(...args){\n\n            return method_removeAllListeners.apply(this , args) ;\n\n        }\n                \n                            \n                \n                        }\n\n                }\n    \n                    return function(extend){\n    \n                        \n        if(!var_init_locked_1609121323141){\n\n            constructor = include('src::mixin.observable.constructor');\nmethod_addListener = include('src::mixin.observable.listener.add');\nmethod_hasListener = include('src::mixin.observable.listener.has');\nmethod_removeListener = include('src::mixin.observable.listener.remove');\nmethod_fireEvent = include('src::mixin.observable.event.fire');\nmethod_suspendEvents = include('src::mixin.observable.events.suspend');\nmethod_resumeEvents = include('src::mixin.observable.events.resume');\nmethod_removeAllListeners = include('src::mixin.observable.listeners.remove');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121323141 = true ;\n        }\n        \n    \n                        return main.call(this , extend) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mixin.observable"
  },
  "src::environment.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::environment.name()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121323427;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 检测当前环境，返回值有 browser、zbee、node\r\n * \r\n * @return {string} 环境名称 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\nconst {\r\n    toString\r\n} = Object.prototype,\r\nBROWSER_NAMES = {\r\n    micromessenger: 'weixin-browser',\r\n    ue4:'ue4-browser',\r\n    unity: 'unity-browser',\r\n    electron:'electron-browser',\r\n    browser:'browser'\r\n};\r\n\r\nif(typeof window === 'object' && toString.call(window) === '[object Window]' && typeof document === 'object' && toString.call(document) === '[object HTMLDocument]'){\r\n    \r\n    return BROWSER_NAMES[(navigator.userAgent.toLowerCase().match(/micromessenger|ue4|unity|electron/) || ['browser'])[0]];\r\n\r\n}else if(typeof process === 'object' && typeof global === 'object' && typeof require === 'function'){\r\n\r\n    try{\r\n\r\n        let [\r\n            path\r\n        ] = process.argv ;\r\n\r\n        return /electron\\.exe$/.test(path) ;\r\n\r\n    }catch(err){\r\n\r\n    }\r\n\r\n    return 'node' ;\r\n}\r\n\r\nreturn 'other' ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121323427){\n\n            return var_once_value_1609121323427 ;\n\n        }\n        return var_once_value_1609121323427 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "environment.name"
  },
  "src::id.generate": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::id.generate(<string> prefix)",
    "standard": true,
    "importNames": [
      "src::environment.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121323403;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 生成唯一的编号\r\n * \r\n * @import getName from environment.name\r\n * \r\n * @param {string} prefix 编号前缀\r\n * \r\n * @return {string} 生成后的唯一编号\r\n * \r\n * @require uuid\r\n * \r\n */\r\n\r\n let count = 1 ; \r\n\r\n function main(prefix = 'zb-'){\r\n\r\n    return `${prefix}${count ++}` ;\r\n\r\n }\n    \n                    return function(prefix){\n    \n                        \n        if(!var_init_locked_1609121323403){\n\n            getName = include('src::environment.name');\n\n            var_init_locked_1609121323403 = true ;\n        }\n        \n    \n                        return main.call(this , prefix) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "id.generate"
  },
  "src::is.object": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.object(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121323443;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为对象类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为对象类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn typeof data === 'object' ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121323443){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121323443 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.object"
  },
  "src::data.channel": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::id.generate",
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::is.object",
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,generate,on,off,isObject,isFunction;\n    \n                    let var_init_locked_1609121323116;\n    \n                    let var_class_1609121323116;\n    \n                    \n\n                    let var_global_main_1609121323116 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323116){\n\n            Observable = include('src::mixin.observable');\ngenerate = include('src::id.generate');\non = include('src::event.listener.add');\noff = include('src::event.listener.remove');\nisObject = include('src::is.object');\nisFunction = include('src::is.function');\n\n            \r\n/**\r\n * \r\n * 数据通信 \r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import on from event.listener.add\r\n * \r\n * @import off from event.listener.remove\r\n * \r\n * @import is.object\r\n * \r\n * @import is.function\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nclass main extends mixins({\r\n    mixins:[\r\n        Observable\r\n    ]\r\n}){\r\n\r\n    constructor(receivers = {}){\r\n\r\n        super() ;\r\n\r\n        let me = this ;\r\n\r\n        me.connected = false ;\r\n\r\n        me.receivers = receivers ;\r\n\r\n        me.connectState = 3 ;\r\n\r\n        me.cancelSendFunctions = {} ;\r\n    }\r\n\r\n    connect(){\r\n\r\n        let me = this,\r\n        {\r\n            connectState\r\n        } = me;\r\n\r\n        switch(connectState){\r\n\r\n            case 2:\r\n\r\n                on(me , 'disconnect' , () => me.connect() , {\r\n                    once:true\r\n                }) ;\r\n\r\n                break ;\r\n\r\n            case 3:\r\n\r\n                me.connectState = 0 ;\r\n\r\n                me.doConnect() ;\r\n        }\r\n    }\r\n\r\n    disconnect(){\r\n\r\n        let me = this,\r\n        {\r\n            connectState\r\n        } = me;\r\n\r\n        switch(connectState){\r\n\r\n            case 0:\r\n\r\n                on(me , 'connect' , () => me.disconnect() , {\r\n                    once:true\r\n                }) ;\r\n\r\n                break ;\r\n\r\n            case 1:\r\n\r\n                me.connectState = 2 ;\r\n\r\n                me.doDisconnect() ;\r\n        }\r\n    }\r\n\r\n    generateCallID(){\r\n\r\n        return generate(Date.now()) ;\r\n    }\r\n\r\n    receiveConnected(){\r\n\r\n        this.receiveConnectState(2) ;\r\n    }\r\n\r\n    receiveDisconnected(){\r\n\r\n        this.receiveConnectState(3) ;\r\n    }\r\n\r\n    receiveConnectState(state){\r\n\r\n        let me = this ;\r\n\r\n        me.connectState = state ;\r\n\r\n        switch(state){\r\n\r\n            case 2:\r\n\r\n                me.connected = true ;\r\n\r\n                me.fireEvent('connect') ;\r\n\r\n                break ;\r\n\r\n            case 3:\r\n\r\n                me.fireEvent('disconnect') ;\r\n        }\r\n\r\n    }\r\n\r\n    receiveData(data){\r\n\r\n        if(isObject(data)){\r\n\r\n            let {\r\n                type,\r\n                ...options\r\n            } = data,\r\n            me = this ;\r\n    \r\n            switch(type){\r\n    \r\n                case 'send':\r\n    \r\n                    me.receiveSendInstruction(options) ;\r\n    \r\n                    break ;\r\n    \r\n                case 'reply':\r\n    \r\n                    me.receiveReplyValue(options) ;\r\n\r\n                case 'cancel-send':\r\n\r\n                    me.receiveCancelSendData(options) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    receiveCancelSendData({\r\n        id\r\n    }){\r\n\r\n        let {\r\n            cancelSendFunctions\r\n        } = this ;\r\n\r\n        if(cancelSendFunctions.hasOwnProperty(id)){\r\n\r\n            cancelSendFunctions[id]() ;\r\n\r\n            delete cancelSendFunctions[id] ;\r\n        }\r\n    }\r\n\r\n    async receiveSendInstruction({\r\n        id,\r\n        name,\r\n        params\r\n    }){\r\n\r\n        let me = this,\r\n        {\r\n            receivers,\r\n            cancelSendFunctions\r\n        } = me;\r\n\r\n        if(receivers.hasOwnProperty(name)){\r\n\r\n            let reply = value => me.reply(id , value),\r\n                result = receivers[name].call(me , params , reply) ;\r\n\r\n            if(isFunction(result)){\r\n\r\n                cancelSendFunctions[id] = result ;\r\n                \r\n            }else{\r\n\r\n                reply(await result) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    receiveReplyValue({\r\n        id,\r\n        value\r\n    }){\r\n\r\n        this.fireEvent(id , value) ;\r\n    }\r\n\r\n    reply(id , value){\r\n\r\n        this.doReply({\r\n            type:'reply',\r\n            id,\r\n            value\r\n        }) ;\r\n    }\r\n\r\n    cancelSend(id){\r\n\r\n        let me = this ;\r\n\r\n        me.doSend({\r\n            type:'cancel-send',\r\n            id\r\n        }) ;\r\n\r\n        off(me , id) ;\r\n    }\r\n\r\n    async send(name , params , callback){\r\n\r\n        let me = this,\r\n        {\r\n            connected\r\n        } = me ;\r\n\r\n        if(connected){\r\n\r\n            let id = me.generateCallID() ;\r\n\r\n            me.doSend({\r\n                type:'send',\r\n                id,\r\n                name,\r\n                params\r\n            }) ;\r\n\r\n            if(isFunction(callback)){\r\n\r\n                on(me , id , (channel , data) => callback.call(channel , data)) ;\r\n\r\n                return id ;\r\n            }\r\n\r\n            return await new Promise(resolve => on(me , id , (channel , data) => {\r\n\r\n                channel.cancelSend(id) ;\r\n\r\n                resolve(data) ;\r\n\r\n            } , {\r\n                once:true\r\n            })) ;\r\n\r\n        }\r\n\r\n        return await new Promise(resolve => on(me , 'connect' , async () => resolve(await me.send(name , params , callback)) , {\r\n            once:true\r\n        })) ;\r\n    }\r\n\r\n    doSend(data){\r\n\r\n\r\n    }\r\n\r\n    doReply(data){\r\n\r\n\r\n    }\r\n\r\n    doConnect(){\r\n\r\n\r\n    }\r\n\r\n    doDisconnect(){\r\n\r\n    }\r\n}\n\n            var_class_1609121323116 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323116 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323116 ;\n        \nvar_global_main_1609121323116 = main;\n\n            var_init_locked_1609121323116 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323116 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel"
  },
  "src::axios": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::axios(<object> params , <function> callback)",
    "standard": true,
    "importNames": [
      "src::array.from",
      "src::id.generate",
      "src::is.function",
      "src::is.string"
    ],
    "dependentModules": {
      "axios": "^0.18.0"
    },
    "data": "(() =>{\n\n                    let from,generate,isFunction,isString;\n    \n                    let var_init_locked_1609121323454;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 基于 axios 的再封装\r\n * \r\n * @import from from array.from\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import is.function\r\n * \r\n * @import is.string\r\n * \r\n * @param {object} params 请求参数\r\n * \r\n * @param {function} [callback] 请求回调\r\n * \r\n * @return {function} 取消请求函数  \r\n * \r\n * @require axios\r\n * \r\n * @require fs\r\n * \r\n */\r\n\r\n const \r\n axios = require('axios'),\r\n {\r\n    stringify\r\n } = require('qs'),\r\n CancelToken = axios.CancelToken;\r\n\r\n function main(params , callback){\r\n\r\n    if(isFunction(callback)){\r\n\r\n        let source = CancelToken.source() ;\r\n\r\n        axios({\r\n            ...processParams(params),\r\n            cancelToken: source.token\r\n        })\r\n            .then(response => callback(true , response.data , response))\r\n            .catch(error => {\r\n\r\n                if(!axios.isCancel(error)){\r\n\r\n                    callback(false , error.message , error) ;\r\n                }\r\n\r\n            });\r\n\r\n        return () => source.cancel() ;\r\n    }\r\n\r\n    return new Promise((resolve , reject) => axios(processParams(params))\r\n                .then(({\r\n                    data\r\n                }) => resolve(data))\r\n                .catch(error => reject(error))) ;\r\n }\r\n\r\n function processMethod(method){\r\n\r\n    if(isString(method)){\r\n\r\n        return method.toUpperCase() ;\r\n    }\r\n\r\n    return 'GET' ;\r\n }\r\n\r\n function processParams({\r\n     form = false,\r\n     params,\r\n     files,\r\n     ...options\r\n }){\r\n\r\n    options.method = processMethod(options.method) ;\r\n\r\n    if(form && options.method !== 'GET'){\r\n\r\n       return processForm(options , params) ;\r\n    }\r\n\r\n    if(files){\r\n\r\n        return processUpload(options , from(files)) ;\r\n    }\r\n\r\n    return {\r\n        params,\r\n        ...options\r\n    } ;\r\n }\r\n\r\n function processForm(options , params){\r\n\r\n    return {\r\n        ...options,\r\n        data:stringify(params)\r\n    } ;\r\n }\r\n\r\n function processUpload(options , files){\r\n\r\n    let data = new FormData() ;\r\n\r\n    for(let file of files){\r\n\r\n        data.append(generate('file-') , file) ;\r\n    }\r\n\r\n    options.method = 'POST' ;\r\n\r\n    return {\r\n        ...options,\r\n        data\r\n    } ;\r\n }\n    \n                    return function(params , callback){\n    \n                        \n        if(!var_init_locked_1609121323454){\n\n            from = include('src::array.from');\ngenerate = include('src::id.generate');\nisFunction = include('src::is.function');\nisString = include('src::is.string');\n\n            var_init_locked_1609121323454 = true ;\n        }\n        \n    \n                        return main.call(this , params , callback) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "axios"
  },
  "src::data.channel.client.axios": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.client.axios()",
    "standard": true,
    "importNames": [
      "src::data.channel.client"
    ],
    "dependentModules": {
      "axios": "^0.18.0"
    },
    "data": "(() =>{\n\n                    let Channel;\n    \n                    let var_init_locked_1609121323473;\n    \n                    let var_class_1609121323473;\n    \n                    \n\n                    let var_global_main_1609121323473 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323473){\n\n            Channel = include('src::data.channel.client')();\n\n            \r\n/**\r\n * \r\n * 基于 Axios 数据通道客户端实现\r\n * \r\n * @import Channel from ..client value\r\n * \r\n * @require axios\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nconst axios = require('axios');\r\n\r\nclass main extends Channel{\r\n\r\n    doSend(params , fireDataEvent , fireErrorEvent){\r\n        \r\n        axios(params)\r\n            .then(({\r\n                data\r\n            }) => fireDataEvent(data))\r\n            .catch(({\r\n                status,\r\n                data\r\n            }) => fireErrorEvent({\r\n                status,\r\n                data\r\n            }));\r\n    }\r\n\r\n    processSendParams(params){\r\n\r\n        return params ;\r\n    }\r\n\r\n    processReceiveData(data){\r\n\r\n        return data ;\r\n    }\r\n}\n\n            var_class_1609121323473 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323473 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel.client.axios' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323473 ;\n        \nvar_global_main_1609121323473 = main;\n\n            var_init_locked_1609121323473 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323473 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.client.axios"
  },
  "src::data.channel.client": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.client()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::is.defined",
      "src::event.listener.add",
      "src::event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,isDefined,on,off;\n    \n                    let var_init_locked_1609121323488;\n    \n                    let var_class_1609121323488;\n    \n                    \n\n                    let var_global_main_1609121323488 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323488){\n\n            Observable = include('src::mixin.observable');\nisDefined = include('src::is.defined');\non = include('src::event.listener.add');\noff = include('src::event.listener.remove');\n\n            \r\n/**\r\n * \r\n * 数据通道客户端基本实现\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import is.defined\r\n * \r\n * @import on from event.listener.add\r\n * \r\n * @import off from event.listener.remove\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n class main extends mixins({\r\n    mixins:[\r\n        Observable\r\n    ]\r\n}){\r\n\r\n    getEventNameBySendParams(params){\r\n\r\n        return JSON.stringify(params) ;\r\n    }\r\n\r\n    getEventNameByReceiveParams(){\r\n        \r\n    }\r\n\r\n    processSendParams(params){\r\n\r\n        return params ;\r\n    }\r\n\r\n    processReceiveData(){\r\n\r\n        return {} ;\r\n    }\r\n\r\n    send(params , isReturnData = false){\r\n\r\n        let me = this,\r\n            eventName = me.getEventNameBySendParams(params),\r\n            dataEvent = eventName,\r\n            errorEvent = `${eventName}-error`,\r\n            fireDataEvent = (...params) => {\r\n\r\n                let receiveData = me.processReceiveData(...params) ;\r\n\r\n                let receiveDataEvent = me.getEventNameByReceiveParams(receiveData) ;\r\n\r\n                if(isDefined(receiveDataEvent) && receiveDataEvent !== dataEvent){\r\n\r\n                    return ;\r\n                }\r\n\r\n                me.fireEvent(dataEvent , receiveData) ;\r\n\r\n            },\r\n            fireErrorEvent = data => me.fireEvent(errorEvent , data);\r\n\r\n        params = me.processSendParams(params) ;\r\n\r\n        if(isReturnData){\r\n\r\n            return new Promise((resolve , reject) => {\r\n\r\n                let listeners = {\r\n                    [dataEvent](client , data){\r\n\r\n                        off(me , listeners) ;\r\n                    \r\n                        resolve(data) ;\r\n                    },\r\n                    [errorEvent](client , data){\r\n\r\n                        off(me , listeners) ;\r\n\r\n                        reject(data) ;\r\n                    }\r\n                } ;\r\n\r\n                on(me , listeners) ;\r\n\r\n                me.doSend(params , fireDataEvent , fireErrorEvent) ;\r\n\r\n            }) ;\r\n        }\r\n\r\n        me.doSend(params , fireDataEvent , fireErrorEvent) ;\r\n    }\r\n\r\n    doSend(){\r\n\r\n\r\n    }\r\n\r\n }\n\n            var_class_1609121323488 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323488 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel.client' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323488 ;\n        \nvar_global_main_1609121323488 = main;\n\n            var_init_locked_1609121323488 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323488 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.client"
  },
  "src::data.channel.client.socket.io": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.client.socket.io()",
    "standard": true,
    "importNames": [
      "src::data.channel.client",
      "src::mixin.observable",
      "src::socket.io",
      "src::event.listener.add",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Channel,Observable,createSocket,add,from;\n    \n                    let var_init_locked_1609121323503;\n    \n                    let var_class_1609121323503;\n    \n                    \n\n                    let var_global_main_1609121323503 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323503){\n\n            Channel = include('src::data.channel.client')();\nObservable = include('src::mixin.observable');\ncreateSocket = include('src::socket.io');\nadd = include('src::event.listener.add');\nfrom = include('src::array.from');\n\n            \r\n/**\r\n * \r\n * 基于 Socket.io 数据通道客户端实现\r\n * \r\n * @import Channel from ....client value\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import createSocket from socket.io\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import from from array.from\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n\r\nclass main extends Channel{\r\n\r\n    doSend({\r\n        event,\r\n        params,\r\n        ...options\r\n    } , fireDataEvent , fireErrorEvent){\r\n\r\n        getSocket.call(this , {\r\n            ...options,\r\n            fireDataEvent,\r\n            fireErrorEvent\r\n        }).emit(event , ...from(params)) ;\r\n    }\r\n}\r\n\r\nconst sockets = new Map() ;\r\n\r\nfunction getSocket({\r\n    url,\r\n    path = '/socket.io',\r\n    fireDataEvent,\r\n    fireErrorEvent,\r\n    ...options\r\n}){\r\n\r\n    let key = `${url}:${path}` ;\r\n\r\n    if(!sockets.has(key)){\r\n\r\n        let socket = createSocket({\r\n            url,\r\n            path,\r\n            ...options\r\n        });\r\n\r\n        add(socket , {\r\n            data(client , ...params){\r\n\r\n                fireDataEvent(...params) ;\r\n\r\n            },\r\n            connect_error:fireErrorEvent\r\n        });\r\n\r\n        sockets.set(key , socket) ;\r\n    }\r\n\r\n    return sockets.get(key) ;\r\n}\n\n            var_class_1609121323503 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323503 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel.client.socket.io' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323503 ;\n        \nvar_global_main_1609121323503 = main;\n\n            var_init_locked_1609121323503 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323503 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.client.socket.io"
  },
  "src::socket.parser": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::socket.parser()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121323560;\n\n                    function main(){\n\n        /**\r\n * \r\n * 修复 socket.io 解析器无法连接的问题\r\n * \r\n * @once\r\n * \r\n */\r\n\r\nconst {\r\n    Encoder,\r\n    BINARY_EVENT,\r\n    BINARY_ACK,\r\n    ERROR\r\n} = require('socket.io-parser') ;\r\n\r\nfunction stringify(data){\r\n\r\n    try{\r\n\r\n    return JSON.stringify(data);\r\n    \r\n    }catch(e){\r\n    \r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nconst {\r\n    encode\r\n} = Encoder.prototype ;\r\n\r\nEncoder.prototype.encode = function(obj, callback){\r\n\r\n    let {\r\n        type\r\n    } = obj ;\r\n\r\n    switch(type){\r\n\r\n        case BINARY_EVENT:\r\n        case BINARY_ACK:\r\n\r\n        encode.call(this , obj , callback) ;\r\n\r\n        break ;\r\n\r\n        default:\r\n\r\n            callback([\r\n            encodeAsString(obj)\r\n            ]);\r\n    }\r\n};\r\n  \r\nfunction encodeAsString(obj) {\r\n\r\n    let {\r\n        type,\r\n        nsp,\r\n        id,\r\n        data,\r\n        attachments\r\n        } = obj ;\r\n\r\n    let str = `${type}`;\r\n\r\n    switch(type){\r\n\r\n        case BINARY_EVENT:\r\n        case BINARY_ACK:\r\n\r\n        str += attachments + '-';\r\n    }\r\n\r\n    if (nsp && '/' !== nsp) {\r\n\r\n        str += `${nsp}`;\r\n\r\n    }\r\n\r\n    if(id || data){\r\n\r\n        str += ',' ;\r\n    }\r\n\r\n    if (null != id) {\r\n        \r\n        str += id;\r\n\r\n    }\r\n\r\n    if (null != data) {\r\n\r\n        let payload = stringify(data);\r\n        \r\n        if (payload !== false) {\r\n\r\n        str += payload;\r\n        \r\n        }else{\r\n        \r\n        return `${ERROR}\"encode error\"`;\r\n        }\r\n    }\r\n\r\n    return str;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121323560){\n\n            return var_once_value_1609121323560 ;\n\n        }\n        return var_once_value_1609121323560 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "socket.parser"
  },
  "src::socket.io": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::socket.io(<object> options)",
    "standard": true,
    "importNames": [
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::environment.name",
      "src::mixin.observable",
      "src::socket.parser",
      "src::is.defined",
      "src::is.number",
      "src::is.object.simple"
    ],
    "dependentModules": {
      "socket.io-client": "2.3.0"
    },
    "data": "(() =>{\n\n                    let add,remove,environment,Observable,socketParser,isDefined,isNumber,isObject;\n    \n                    let var_init_locked_1609121323521;\n    \n                    let var_class_1609121323521;\n    \n                    \n\n                    let var_global_main_1609121323521 ;\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121323521){\n\n            add = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\nenvironment = include('src::environment.name')();\nObservable = include('src::mixin.observable');\nsocketParser = include('src::socket.parser')();\nisDefined = include('src::is.defined');\nisNumber = include('src::is.number');\nisObject = include('src::is.object.simple');\n\n            \r\n/**\r\n * \r\n * 针对 Socket.io 再封装\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @import environment from environment.name value\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import .parser value\r\n * \r\n * @import is.defined\r\n * \r\n * @import is.number\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {object} options Socket.io 配置\r\n * \r\n * @require socket.io-client\r\n * \r\n */\r\n\r\n const IO = require('socket.io-client') ;\r\n\r\n const browserRe = /browser$/ ;\r\n\r\n class main extends mixins({\r\n     mixins:[\r\n        Observable\r\n     ]\r\n }){\r\n\r\n    constructor({\r\n        url,\r\n        path,\r\n        dataEventName = 'data',\r\n        reconnection = true\r\n    }){\r\n\r\n        super() ;\r\n\r\n        let me = this ;\r\n\r\n        me.dataEventName = dataEventName ;\r\n        \r\n        me.reconnectionMax = Number.MAX_VALUE ;\r\n\r\n        if(isDefined(reconnection)){\r\n\r\n            if(reconnection === true){\r\n\r\n                me.reconnectionDelay = 1000 ;\r\n            \r\n            }else if(isNumber(reconnection)){\r\n\r\n                me.reconnectionDelay = reconnection ;\r\n            \r\n            }else if(isObject(reconnection)){\r\n\r\n                let {\r\n                    delay = 1000,\r\n                    max = 5000 \r\n                } = reconnection ;\r\n\r\n                me.reconnectionDelay = delay ;\r\n\r\n                me.reconnectionMax = max ;\r\n            }\r\n        }\r\n\r\n        me.url = url ;\r\n\r\n        me.path = path ;\r\n\r\n        me.state = 3 ;\r\n\r\n        me.connect() ;\r\n\r\n        if(browserRe.test(environment)){\r\n\r\n            add(window , {\r\n                offline:'onOffline',\r\n                online:'onOnline',\r\n                visibilitychange:'onVisibilityChange',\r\n                scope:me\r\n            }) ;\r\n        }\r\n    }\r\n\r\n    onOnline(){\r\n\r\n        this.connect() ;\r\n    }\r\n\r\n    onOffline(){\r\n\r\n        this.disconnect() ;\r\n    }\r\n\r\n    onVisibilityChange(){\r\n\r\n        let me = this ;\r\n\r\n        if(document.visibilityState){\r\n\r\n            me.connect() ;\r\n        \r\n        }else{\r\n\r\n            me.disconnect() ;\r\n        }\r\n    }\r\n\r\n    isDisconnected(){\r\n\r\n        return this.state === 3 ;\r\n    }\r\n\r\n    isConnected(){\r\n\r\n        return this.state === 1 ;\r\n    }\r\n\r\n    isConnecting(){\r\n\r\n        return this.state = 0 ;\r\n    }\r\n\r\n    isDisconnecting(){\r\n\r\n        return this.state === 2 ;\r\n    }\r\n\r\n    async connect(){\r\n\r\n        let me = this ;\r\n\r\n        if(me.isConnected()){\r\n\r\n            return ;\r\n        }\r\n\r\n        if(me.isDisconnected()){\r\n\r\n            me.state = 0 ;\r\n\r\n            createSocket.call(me) ;\r\n\r\n            return await (me.transitionState = new Promise(callback => add(me , 'connect' , () => callback() , {\r\n                once:true\r\n            }))) ;\r\n\r\n        }\r\n\r\n        await me.transitionState ;\r\n\r\n        if(me.isDisconnected()){\r\n\r\n            await me.connect() ;\r\n        }\r\n    }\r\n\r\n    async disconnect(){\r\n\r\n        let me = this ;\r\n\r\n        if(me.isDisconnected()){\r\n\r\n            return ;\r\n        }\r\n\r\n        if(me.isConnected()){\r\n\r\n            me.state = 2 ;\r\n\r\n            me.socket.disconnect() ;\r\n\r\n            return await (me.transitionState =  new Promise(callback => add(me , 'disconnect' , () => callback() , {\r\n                once:true\r\n            }))) ;\r\n        }\r\n\r\n        await me.transitionState ;\r\n\r\n        if(me.isConnected()){\r\n\r\n            await me.disconnect() ;\r\n        }\r\n    }\r\n\r\n    onConnect(){\r\n\r\n        let me = this ;\r\n\r\n        me.state = 1 ;\r\n        \r\n        delete me.transitionState ;\r\n\r\n        me.fireEvent('connect') ;\r\n    }\r\n\r\n    onDisconnect(){\r\n\r\n        let me = this,\r\n        {\r\n            state:oldState\r\n        } = me;\r\n\r\n        me.state = 3 ;\r\n\r\n        delete me.transitionState ;\r\n\r\n        if(oldState === 2){\r\n\r\n            me.fireEvent('disconnect') ;\r\n        \r\n        }else{\r\n\r\n            me.autoReconnect() ;\r\n        }\r\n    }\r\n\r\n    autoReconnect(){\r\n\r\n        let me = this,\r\n        {\r\n            reconnectionCount = 0,\r\n            reconnectionMax,\r\n            reconnectionDelay\r\n        } = me;\r\n\r\n        if(!isDefined(reconnectionDelay)){\r\n\r\n            me.fireEvent('connect_error') ;\r\n\r\n            return ;\r\n        }\r\n\r\n        reconnectionCount ++ ;\r\n\r\n        if(reconnectionCount > reconnectionMax){\r\n\r\n            delete me.reconnectionCount ;\r\n\r\n            me.fireEvent('connect_error') ;\r\n\r\n        }else{\r\n\r\n            me.reconnectionCount = reconnectionCount ;\r\n\r\n            setTimeout(() => {\r\n\r\n                me.connect() ;\r\n\r\n                me.fireEvent('reconnecting' , reconnectionCount) ;\r\n\r\n            } , reconnectionDelay) ;\r\n        }\r\n    }\r\n\r\n    onData(...params){\r\n\r\n        this.fireEvent('data' , ...params) ;\r\n    }\r\n\r\n    onError(){\r\n\r\n        let me = this,\r\n        {\r\n            state\r\n        } = me ;\r\n\r\n        if(state === 0){\r\n\r\n            me.onDisconnect() ;\r\n        }\r\n    }\r\n\r\n    async emit(event , ...params){\r\n\r\n        let me = this,\r\n        {\r\n            socket\r\n        } = me;\r\n\r\n        if(me.isConnected()){\r\n    \r\n            socket.emit(event , ...params) ;\r\n        \r\n        }else{\r\n\r\n            await me.connect() ;\r\n\r\n            me.emit(event , ...params) ;\r\n        }\r\n    }\r\n }\r\n\r\n function createSocket(){\r\n\r\n    let me = this,\r\n    {\r\n        url,\r\n        path,\r\n        socket,\r\n        dataEventName\r\n    } = me ;\r\n\r\n    if(socket){\r\n\r\n        remove(socket , {\r\n            connect:'onConnect',\r\n            disconnect:'onDisconnect',\r\n            connect_error:'onError',\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    add(me.socket = IO(url , {\r\n        path,\r\n        forceNew: true,\r\n        transports: [\r\n            'websocket'\r\n        ],\r\n        reconnection:false\r\n    }) , {\r\n        connect:'onConnect',\r\n        disconnect:'onDisconnect',\r\n        connect_error:'onError',\r\n        [dataEventName]:'onData',\r\n        scope:me\r\n    }) ;\r\n }\n\n            var_class_1609121323521 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323521 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::socket.io' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323521 ;\n        \nvar_global_main_1609121323521 = main;\n\n            var_init_locked_1609121323521 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121323521(options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "socket.io"
  },
  "src::data.channel.message.client": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.message.client()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.message.client"
  },
  "src::data.channel.message.server": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.message.server()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.message.server"
  },
  "src::data.channel.window": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.channel.window()",
    "standard": true,
    "importNames": [
      "src::data.channel",
      "src::event.listener.add",
      "src::event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Channel,on,off;\n    \n                    let var_init_locked_1609121323591;\n    \n                    let var_class_1609121323591;\n    \n                    \n\n                    let var_global_main_1609121323591 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323591){\n\n            Channel = include('src::data.channel')();\non = include('src::event.listener.add');\noff = include('src::event.listener.remove');\n\n            \r\n/**\r\n * \r\n * 窗口之间的数据通道\r\n * \r\n * @import Channel from data.channel value\r\n * \r\n * @import on from event.listener.add\r\n * \r\n * @import off from event.listener.remove\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nclass main extends Channel{\r\n\r\n    constructor(name , target , receivers){\r\n\r\n        super(receivers) ;\r\n\r\n        let me = this;\r\n\r\n        on(window , 'message' , ({\r\n            data,\r\n            ports\r\n        }) => {\r\n\r\n            let {\r\n                receivePort\r\n            } = me ;\r\n\r\n            if(data === `${name}-connect` && !receivePort){\r\n\r\n                let port = ports[0] ;\r\n\r\n                port.onmessage = ({\r\n                    data\r\n                }) => me.receiveData(data) ;\r\n\r\n                port.postMessage(`${name}-connected`) ;\r\n\r\n                me.receivePort = port ;\r\n\r\n                me.connect() ;\r\n            \r\n            }else if(data === `${name}-disconnect` && receivePort){\r\n\r\n                let {\r\n                    receivePort\r\n                } = me ;\r\n\r\n                receivePort.postMessage(`${name}-disconnected`) ;\r\n\r\n                receivePort.close() ;\r\n\r\n                delete me.receivePort ;\r\n\r\n                me.disconnect() ;\r\n\r\n            }\r\n        }) ;\r\n\r\n        me.target = target ;\r\n\r\n        me.name = name ;\r\n    }\r\n\r\n    doConnect(){\r\n\r\n        let me = this,\r\n        {\r\n            name,\r\n            target\r\n        } = me,\r\n        {\r\n            port1,\r\n            port2\r\n        } = new MessageChannel();\r\n\r\n        port1.onmessage = ({\r\n            data\r\n        }) => {\r\n\r\n            if(data === `${name}-connected`){\r\n\r\n                me.receiveConnected() ;\r\n            \r\n            }else if(data === `${name}-disconnected`){\r\n\r\n                me.sendPort.close() ;\r\n\r\n                delete me.sendPort ;\r\n\r\n                me.receiveDisconnected() ;\r\n\r\n            }else{\r\n\r\n                me.receiveData(data) ;\r\n            }\r\n        } ;\r\n\r\n        me.sendPort = port1 ;\r\n\r\n        target.postMessage(`${name}-connect` , '*' , [\r\n            port2\r\n        ]) ;\r\n    }\r\n\r\n    doDisconnect(){\r\n\r\n       this.target.postMessage(`${name}-disconnect` , '*') ;\r\n    }\r\n\r\n    doSend(data){\r\n\r\n        this.sendPort.postMessage(data) ;\r\n    }\r\n\r\n    doReply(data){\r\n\r\n        this.receivePort.postMessage(data) ;\r\n    }\r\n}\n\n            var_class_1609121323591 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323591 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.channel.window' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323591 ;\n        \nvar_global_main_1609121323591 = main;\n\n            var_init_locked_1609121323591 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323591 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.channel.window"
  },
  "src::data.connection.accept": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.accept(<mixed> ...args)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121323614;\n    \n                    \n\n                    function main(...args){\n\n        \r\n/**\r\n * \r\n * 接收消息数据\r\n * \r\n * @import is.defined\r\n * \r\n * @param {mixed} [...args] 可选参数\r\n * \r\n * @return {object} 消息体 \r\n * \r\n */\r\n\r\nlet me = this,\r\n    message = me.processMessage(...args),\r\n    {\r\n        subscribers,\r\n        matchOnlyOnce\r\n    } = me ;\r\n\r\nif(isDefined(message)){\r\n\r\n    subscribers = subscribers.values() ;\r\n\r\n    for(let subscriber of subscribers){\r\n\r\n        if(!subscriber.closed && me.validateMessage(subscriber , message)){\r\n\r\n            let processedData = me.processData(subscriber , message) ;\r\n\r\n            if(isDefined(processedData)){\r\n\r\n                subscriber.accept(processedData) ;\r\n\r\n                if(matchOnlyOnce){\r\n\r\n                    break ;\r\n                }\r\n            }\r\n\r\n           \r\n            \r\n        }\r\n    }\r\n        \r\n}\n\n    }\n    \n                    return function(...args){\n    \n                        \n        if(!var_init_locked_1609121323614){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121323614 = true ;\n        }\n        \n    \n                        return main.call(this , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.accept"
  },
  "src::data.connection.activate": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.activate()",
    "standard": true,
    "importNames": [
      "src::array.includes"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let includes;\n    \n                    let var_init_locked_1609121323635;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 激活\r\n * \r\n * @import includes from array.includes\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    subscribeParamList\r\n} = me;\r\n\r\nfor(let params of subscribeParamList){\r\n\r\n    me.doSubscriberOpen(...params) ;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323635){\n\n            includes = include('src::array.includes');\n\n            var_init_locked_1609121323635 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.activate"
  },
  "src::data.connection.ajax.request.browser": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.ajax.request.browser(<string> url , <object> config)",
    "standard": true,
    "importNames": [
      "src::data.connection.ajax.request"
    ],
    "dependentModules": {
      "axios": "^0.18.0",
      "qs": "^6.7.0"
    },
    "data": "(() =>{\n\n                    let request;\n    \n                    let var_init_locked_1609121323655;\n    \n                    \n\n                    function main(url , config){\n\n        \r\n/**\r\n * \r\n * 基于浏览器的 AJAX 请求实现\r\n * \r\n * @import request from ..request\r\n * \r\n * @require axios\r\n * \r\n * @require qs\r\n * \r\n * @param {string} url 请求路径\r\n * \r\n * @param {object} [config] 请求配置\r\n * \r\n */\r\n\r\nlet {\r\n    url:requestURL,\r\n    method,\r\n    data,\r\n    form,\r\n    responseHeaders\r\n} = request(url , config);\r\n\r\nconst axios = require('axios'),\r\n{\r\n    stringify\r\n} = require('qs');\r\n\r\n\r\nif(form === true){\r\n\r\n    data = stringify(data) ;\r\n}\r\n\r\nlet result = axios[method.toLowerCase()](requestURL , data) ;\r\n\r\nif(responseHeaders){\r\n\r\n    return result.then(({\r\n        data,\r\n        headers\r\n    }) => {\r\n        data,\r\n        headers\r\n    }) ;\r\n}\r\n\r\nreturn result.then(({\r\n    data\r\n}) => data) ;\n\n    }\n    \n                    return function(url , config){\n    \n                        \n        if(!var_init_locked_1609121323655){\n\n            request = include('src::data.connection.ajax.request');\n\n            var_init_locked_1609121323655 = true ;\n        }\n        \n    \n                        return main.call(this , url , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.ajax.request.browser"
  },
  "src::url.append": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::url.append(<string> url , <mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1609121323697;\n    \n                    \n\n                    function main(url , data){\n\n        \r\n/**\r\n * \r\n * 基于已有链接附加查询信息\r\n * \r\n * @import is.string\r\n * \r\n * @param {string} url 链接\r\n * \r\n * @param {mixed} data 附加查询信息\r\n * \r\n * @return {mixed} 拼接了查询信息的链接 \r\n * \r\n */\r\n\r\nlet querystring ;\r\n\r\nif(isString(data)){\r\n\r\n    querystring = data ;\r\n\r\n}else{\r\n\r\n    querystring = [];\r\n\r\n    let names = Object.keys(data) ;\r\n\r\n    for(let name of names){\r\n\r\n        querystring.push(`${name}=${encodeURIComponent(data[name])}`) ;\r\n    }\r\n\r\n    querystring = querystring.join('&') ;\r\n\r\n}\r\n\r\nif(querystring){\r\n\r\n    if(url.includes('?')){\r\n\r\n        return `${url}&${querystring}` ;\r\n    }\r\n    \r\n    return `${url}?${querystring}` ;\r\n\r\n}\r\n\r\nreturn url ;\r\n\n\n    }\n    \n                    return function(url , data){\n    \n                        \n        if(!var_init_locked_1609121323697){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1609121323697 = true ;\n        }\n        \n    \n                        return main.call(this , url , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "url.append"
  },
  "src::regexp.int": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::regexp.int(<string> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 匹配整数\r\n * \r\n * @param {string} data 参数说明\r\n * \r\n * @return {boolean} 如果匹配成功则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn /^\\d+$/.test(data) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "regexp.int"
  },
  "src::url.template.apply": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::url.template.apply(<string> url , <object> data)",
    "standard": true,
    "importNames": [
      "src::regexp.int"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isInt;\n    \n                    let var_init_locked_1609121323714;\n    \n                    \n\n                    function main(url , data){\n\n        \r\n/**\r\n * \r\n * 路径模板应用\r\n * \r\n * @import isInt from regexp.int\r\n * \r\n * @param {string} url 带有参数定义的URL\r\n * \r\n * @param {object} data 模板参数定义数据集合\r\n * \r\n * @return {string} 应用数据后的URL链接\r\n * \r\n */\r\n\r\nreturn url.replace(/\\:(\\w+)/g , (match , name) =>{\r\n\r\n    if(isInt(name)){\r\n\r\n        return `:${name}` ;\r\n    }\r\n\r\n    return data[name] || '' ;\r\n\r\n}) ;\r\n\n\n    }\n    \n                    return function(url , data){\n    \n                        \n        if(!var_init_locked_1609121323714){\n\n            isInt = include('src::regexp.int');\n\n            var_init_locked_1609121323714 = true ;\n        }\n        \n    \n                        return main.call(this , url , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "url.template.apply"
  },
  "src::data.connection.ajax.request": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.ajax.request(<string> url , {<string> method , <object> query , <object> params , <object> path , <boolean> requestJSON , <boolean> responseHeaders})",
    "standard": true,
    "importNames": [
      "src::url.append",
      "src::url.template.apply",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let append,apply,isObject;\n    \n                    let var_init_locked_1609121323675;\n    \n                    \n\n                    function main(url , {method , query , params , path , requestJSON , responseHeaders}){\n\n        \r\n/**\r\n * \r\n * 基于 AJAX 进行数据交互\r\n * \r\n * @import append from url.append\r\n * \r\n * @import apply from url.template.apply\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {string} url 请求路径\r\n * \r\n * @param {object} [config] 请求配置\r\n * \r\n * @param {string} [config.method = 'GET'] 请求方式，默认是 GET 请求\r\n * \r\n * @param {object} [config.query] GET请求的参数集合\r\n * \r\n * @param {object} [config.params = {}] 请求主体的参数集合\r\n * \r\n * @param {object} [config.path] 以路径参数形式提交的参数集合\r\n * \r\n * @param {boolean} [config.requestJSON = true] 是否以 JSON方式提交数据\r\n * \r\n * @param {boolean} [config.responseHeaders = false] 是否返回头部信息\r\n * \r\n */\r\n\r\nif(query){\r\n\r\n    url = append(url , query) ;\r\n}\r\n\r\nif(path){\r\n\r\n    url = apply(url , path) ;\r\n}\r\n\r\nlet form = false ;\r\n\r\nmethod = method.toUpperCase() ;\r\n\r\nswitch(method){\r\n\r\n    case 'GET':\r\n    case 'DELETE':\r\n\r\n        url = append(url , params) ;\r\n\r\n        break ;\r\n\r\n    case 'POST':\r\n    case 'PUT':\r\n\r\n        if(requestJSON === false){\r\n\r\n            form = true ;\r\n        }\r\n}\r\n\r\nreturn {\r\n    url,\r\n    method,\r\n    data:params,\r\n    form,\r\n    responseHeaders\r\n} ;\n\n    }\n    \n                    return function(url , {method = 'GET' , query , params = {} , path , requestJSON = true , responseHeaders = false}){\n    \n                        \n        if(!var_init_locked_1609121323675){\n\n            append = include('src::url.append');\napply = include('src::url.template.apply');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121323675 = true ;\n        }\n        \n    \n                        return main.call(this , url , {method , query , params , path , requestJSON , responseHeaders}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.ajax.request"
  },
  "src::data.connection.ajax.request.miniprogram": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.ajax.request.miniprogram(<string> url , <object> config)",
    "standard": true,
    "importNames": [
      "src::data.connection.ajax.request"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let request;\n    \n                    let var_init_locked_1609121323754;\n    \n                    \n\n                    function main(url , config){\n\n        \r\n/**\r\n * \r\n * 基于小程序的 AJAX 请求实现\r\n * \r\n * @import request from ..request\r\n * \r\n * @param {string} url 请求路径\r\n * \r\n * @param {object} [config] 请求配置\r\n * \r\n */\r\n\r\nlet {\r\n    url:requestURL,\r\n    method,\r\n    data,\r\n    form,\r\n    responseHeaders\r\n} = request(url , config),\r\nheader = {};\r\n\r\nif(form === true){\r\n\r\n    header['content-type'] = 'application/x-www-form-urlencoded' ;\r\n}\r\n\r\nreturn new Promise(callback =>{\r\n\r\n    wx.request({\r\n        header,\r\n        url:requestURL,\r\n        method,\r\n        data,\r\n        success({\r\n            data,\r\n            header\r\n        }){\r\n    \r\n            if(responseHeaders){\r\n\r\n                callback({\r\n                    data,\r\n                    header\r\n                }) ;\r\n            \r\n            }else{\r\n\r\n                callback(data) ;\r\n            }\r\n        }\r\n    }) ;\r\n\r\n}) ;\r\n\r\n\r\n\n\n    }\n    \n                    return function(url , config){\n    \n                        \n        if(!var_init_locked_1609121323754){\n\n            request = include('src::data.connection.ajax.request');\n\n            var_init_locked_1609121323754 = true ;\n        }\n        \n    \n                        return main.call(this , url , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.ajax.request.miniprogram"
  },
  "src::data.connection.ajax": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.ajax(<object> options)",
    "standard": true,
    "importNames": [
      "src::data.connection"
    ],
    "dependentModules": {
      "url-join": "^4.0.0"
    },
    "data": "(() =>{\n\n                    let Connection;\n    \n                    let var_init_locked_1609121323777;\n    \n                    let var_class_1609121323777;\n    \n                    \n\n                    let var_global_main_1609121323777 ;\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121323777){\n\n            Connection = include('src::data.connection')();\n\n            \r\n/**\r\n * \r\n * 基于 AJAX 进行数据交互\r\n * \r\n * @import Connection from data.connection value\r\n * \r\n * @require url-join\r\n * \r\n * @param {object}  options 配置\r\n * \r\n */\r\n\r\n const join = require('url-join') ;\r\n\r\n class main extends Connection{\r\n\r\n    constructor({\r\n        ajax\r\n    }){\r\n\r\n        super() ;\r\n\r\n        let me = this,\r\n        {\r\n            url:ajaxURL,\r\n            request\r\n        } = ajax ;\r\n\r\n        me.ajaxURL = ajaxURL ;\r\n\r\n        me.request = request ;\r\n    }\r\n\r\n    processSubscribeParams(subscriber , params){\r\n\r\n        let {\r\n            ajaxURL\r\n        } = this ;\r\n\r\n        return [\r\n            join(ajaxURL , subscriber.name),\r\n            params\r\n        ] ;\r\n    }\r\n\r\n    validateMessage(subscriber , {\r\n        subscriber:messageSubscriber\r\n    }){\r\n\r\n        return subscriber === messageSubscriber ;\r\n    }\r\n\r\n    processMessage(subscriber , data){\r\n\r\n        return {\r\n            subscriber,\r\n            data\r\n        } ;\r\n    }\r\n\r\n    async doSubscriberOpen(subscriber , url , params){\r\n\r\n        this.acceptMessage(subscriber , await request(url , params)) ;\r\n\r\n    }\r\n }\r\n\n\n            var_class_1609121323777 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323777 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.ajax' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323777 ;\n        \nvar_global_main_1609121323777 = main;\n\n            var_init_locked_1609121323777 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121323777(options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.ajax"
  },
  "src::data.subscriber.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.constructor(<data.connection> connection , <string> name , {<string> fullName , <function> processData , <object> listeners , <mixed> params , <boolean> autoOpen , <object> extraParams , <object> defaultParams , <function> fn , <boolean> once , <mixed> scope , <string> namespace , <function> processAcceptData , <function> cacheAcceptData , <function> getCacheData})",
    "standard": true,
    "importNames": [
      "src::function.get",
      "src::event.listener.add",
      "src::function.empty",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,add,emptyFn,from;\n    \n                    let var_init_locked_1609121323874;\n    \n                    \n\n                    function main(connection , name , {fullName , processData , listeners , params , autoOpen , extraParams , defaultParams , fn , once , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}){\n\n        /**\r\n * \r\n * 初始化订阅器\r\n * \r\n * @import get from function.get\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {data.connection} connection 当前订阅器所在的连接对象\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {object} config 订阅器配置\r\n * \r\n * @param {string} config.fullName 订阅器全称\r\n * \r\n * @param {function} [config.processData] 处理数据方法\r\n *  \r\n * @param {object} [config.listeners = {}] 来自古地外部事件监听\r\n * \r\n * @param {mixed} [config.params] 默认打开的订阅参数\r\n * \r\n * @param {boolean} [config.autoOpen = true] 是否自动打开订阅器\r\n * \r\n * @param {object} [config.extraParams = {}] 附加参数\r\n * \r\n * @param {object} [config.defaultParams = {}] 默认参数\r\n * \r\n * @param {function} config.fn 订阅函数\r\n * \r\n * @param {boolean} [config.once = false] 仅订阅一次即取消\r\n * \r\n * @param {mixed} [config.scope] 订阅函数作用域\r\n * \r\n * @param {string} [config.namespace] 命名空间\r\n * \r\n * @param {function} [config.processAcceptData] 处理接收数据的方法\r\n * \r\n * @param {function} [config.cacheAcceptData] 缓存接收数据方法\r\n * \r\n * @param {function} [config.getCacheData] 获取缓存数据 \r\n * \r\n */\r\n\r\n\r\nlet me = this ;\r\n\r\nme.name = name ;\r\n\r\nme.fullName = fullName ;\r\n\r\nme.connection = connection ;\r\n\r\nme.$bubbleTarget = connection ;\r\n\r\nme.processData = processData || (({\r\n    data\r\n}) => data) ;\r\n\r\nme.cacheAcceptData = cacheAcceptData ||  emptyFn;\r\n\r\nme.processAcceptData = processAcceptData || (data => data) ;\r\n\r\nme.getCacheData = getCacheData || (data => data) ;\r\n\r\nme.extraParams = extraParams ;\r\n\r\nme.defaultParams = defaultParams ;\r\n\r\nme.bindFn = get(fn , scope) || emptyFn;\r\n\r\nadd(me , {\r\n    ...listeners,\r\n    scope\r\n}) ;\r\n\r\nif(autoOpen){\r\n\r\n    me.open(params) ;\r\n}\r\n\r\nif(once === true){\r\n\r\n    add(me , 'data' , () => connection.unsubscribe(name , namespace) , {\r\n        once:true\r\n    }) ;\r\n}\r\n\n\n    }\n    \n                    return function(connection , name , {fullName , processData , listeners = {} , params , autoOpen = true , extraParams = {} , defaultParams = {} , fn , once = false , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}){\n    \n                        \n        if(!var_init_locked_1609121323874){\n\n            get = include('src::function.get');\nadd = include('src::event.listener.add');\nemptyFn = include('src::function.empty')();\nfrom = include('src::array.from');\n\n            var_init_locked_1609121323874 = true ;\n        }\n        \n    \n                        return main.call(this , connection , name , {fullName , processData , listeners , params , autoOpen , extraParams , defaultParams , fn , once , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.constructor"
  },
  "src::data.subscriber.closed": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.subscriber.closed()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 返回当前订阅器的关闭状态\r\n * \r\n * @return {boolean} 返回 true 则表示为关闭，返回 false 则表示为打开\r\n * \r\n */\r\n\r\n return !this.hasOwnProperty('params') ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.closed"
  },
  "src::data.subscriber.open.prev": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.open.prev()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 打开之前的订阅\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    closed,\r\n    prevParams\r\n} = me ;\r\n\r\nif(closed){\r\n\r\n    me.open(prevParams) ;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.open.prev"
  },
  "src::data.subscriber.accept.data": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.subscriber.accept.data(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121323953;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 将推送数据传递给绑定函数\r\n * \r\n * @import is.defined\r\n * \r\n * @param {mixed} data 推送过来的数据\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    bindFn,\r\n    closed,\r\n    params,\r\n    cache,\r\n    getCacheData\r\n } = me ;\r\n\r\n if(!closed){\r\n\r\n   if(isDefined(cache)){\r\n\r\n      bindFn(getCacheData(cache) , params) ;\r\n   \r\n   }else{\r\n\r\n      bindFn(data , params) ;\r\n   }\r\n\r\n   me.fireEvent('data' , data , params) ;\r\n }\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121323953){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121323953 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.accept.data"
  },
  "src::data.subscriber.accept": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.accept(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::data.subscriber.accept.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121323932;\n \n                    \n\n                    const var_current_scope_1609121323932 = new Map();\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121323932){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121323932 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121323932.has(this)){\n\n            var_current_scope_1609121323932.set(this , (() => {\n                const setData = include('src::data.subscriber.accept.data').bind(this);\n\n                function main(data){\n\n        \r\n/**\r\n * \r\n * 接收数据\r\n * \r\n * @import is.defined\r\n * \r\n * @import setData from .accept.data scoped\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    closed,\r\n    cache,\r\n    processAcceptData,\r\n    cacheAcceptData\r\n} = me;\r\n\r\nif(closed){\r\n\r\n    return;\r\n}\r\n\r\ndata = processAcceptData(data) ;\r\n\r\nif(isDefined(data)){\r\n\r\n    me.cache = cacheAcceptData(data , cache) ;\r\n\r\n    setData(data) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121323932.get(this) ;\n\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.accept"
  },
  "src::data.subscriber.reopen": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.reopen()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 重新打开订阅器\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    closed,\r\n    params\r\n} = me ;\r\n\r\nif(!closed){\r\n\r\n    me.close() ;\r\n\r\n    me.open(params) ;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.reopen"
  },
  "src::data.subscriber.open": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.open(<object> params)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::data.equals",
      "src::object.assign",
      "src::data.subscriber.accept.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined,equals,assign;\n    \n                    let var_init_locked_1609121323991;\n \n                    \n\n                    const var_current_scope_1609121323991 = new Map();\n    \n                    return function(params = {}){\n    \n                        \n        if(!var_init_locked_1609121323991){\n\n            isDefined = include('src::is.defined');\nequals = include('src::data.equals');\nassign = include('src::object.assign');\n\n            var_init_locked_1609121323991 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121323991.has(this)){\n\n            var_current_scope_1609121323991.set(this , (() => {\n                const setData = include('src::data.subscriber.accept.data').bind(this);\n\n                function main(params){\n\n        \r\n/**\r\n * \r\n * 打开订阅器\r\n * \r\n * @import is.defined\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import setData from .accept.data scoped\r\n * \r\n * @param {object} [params = {}] 订阅参数\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    name,\r\n    extraParams,\r\n    defaultParams,\r\n    params:oldParams,\r\n    connection\r\n} = me ;\r\n\r\nparams = assign({} , defaultParams , params , extraParams) ;\r\n\r\nif(!oldParams || !equals(params , oldParams)){\r\n\r\n    me.close() ;\r\n\r\n    me.params = params ;\r\n    \r\n    me.fireEvent('open' , params , oldParams) ;\r\n\r\n    let subscriber = connection.findOpenedSubscriberByName(name , me) ;\r\n\r\n    if(subscriber){\r\n\r\n        let {\r\n            cache\r\n        } = subscriber ;\r\n\r\n        if(isDefined(cache)){\r\n\r\n            me.cache = cahce ;\r\n\r\n            setData() ;\r\n        }\r\n    }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121323991.get(this) ;\n\n        \n    \n                        return main.call(this , params) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.open"
  },
  "src::data.subscriber.close": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.close()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 关闭订阅器\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    params,\r\n    closed\r\n} = me;\r\n\r\nif(closed){\r\n\r\n    return ;\r\n}\r\n\r\nme.prevParams = me.params ;\r\n\r\ndelete me.params ;\r\n\r\ndelete me.cache ;\r\n\r\nme.fireEvent('close' , params) ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.close"
  },
  "src::event.listener.remove.all": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::event.listener.remove.all(<mixed> target)",
    "standard": true,
    "importNames": [
      "src::event.listeners",
      "src::event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let listeners,remove;\n    \n                    let var_init_locked_1609121324057;\n    \n                    \n\n                    function main(target){\n\n        \r\n/**\r\n * \r\n * 去除所有事件监听\r\n * \r\n * @import listeners from ....listeners value\r\n * \r\n * @import remove from ..remove\r\n * \r\n * @param {mixed} target 事件主体\r\n * \r\n */\r\n\r\n let result = listeners.find(target) ;\r\n\r\n for(let {\r\n     key\r\n } of result){\r\n\r\n    remove(target , key[1] , key[2] , key[3]) ;\r\n }\n\n    }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121324057){\n\n            listeners = include('src::event.listeners')();\nremove = include('src::event.listener.remove');\n\n            var_init_locked_1609121324057 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "event.listener.remove.all"
  },
  "src::data.subscriber.destroy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.subscriber.destroy()",
    "standard": true,
    "importNames": [
      "src::event.listener.remove.all"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let removeAll;\n    \n                    let var_init_locked_1609121324038;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 销毁\r\n * \r\n * @import removeAll from event.listener.remove.all\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    connection\r\n} = me;\r\n\r\nme.close() ;\r\n\r\ndelete me.bindFn ;\r\n\r\ndelete me.extraParams ;\r\n\r\ndelete me.defaultParams ;\r\n\r\nme.fireEvent('destroy') ;\r\n\r\nremoveAll(me) ;\r\n\r\nconnection.subscribers.delete(me.fullName) ;\r\n\r\ndelete me.fullName ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324038){\n\n            removeAll = include('src::event.listener.remove.all');\n\n            var_init_locked_1609121324038 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber.destroy"
  },
  "src::data.subscriber": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.subscriber()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::data.subscriber.constructor",
      "src::data.subscriber.closed",
      "src::data.subscriber.open.prev",
      "src::data.subscriber.accept",
      "src::data.subscriber.reopen",
      "src::data.subscriber.open",
      "src::data.subscriber.close",
      "src::data.subscriber.destroy",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1609121323851__1,extend,constructor,get_closed,method_prevOpen,method_accept,method_reopen,method_open,method_close,method_destroy,isObject;\n    \n                    let var_init_locked_1609121323851;\n    \n                    let var_class_1609121323851;\n    \n                    \n\n                    let var_global_main_1609121323851 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323851){\n\n            mixin_1609121323851__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::data.subscriber.constructor');\nget_closed = include('src::data.subscriber.closed');\nmethod_prevOpen = include('src::data.subscriber.open.prev');\nmethod_accept = include('src::data.subscriber.accept');\nmethod_reopen = include('src::data.subscriber.reopen');\nmethod_open = include('src::data.subscriber.open');\nmethod_close = include('src::data.subscriber.close');\nmethod_destroy = include('src::data.subscriber.destroy');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            prevOpen(...args){\n\n            return method_prevOpen.apply(this , args) ;\n\n        }\naccept(...args){\n\n            return method_accept.apply(this , args) ;\n\n        }\nreopen(...args){\n\n            return method_reopen.apply(this , args) ;\n\n        }\nopen(...args){\n\n            return method_open.apply(this , args) ;\n\n        }\nclose(...args){\n\n            return method_close.apply(this , args) ;\n\n        }\ndestroy(...args){\n\n            return method_destroy.apply(this , args) ;\n\n        }\n\n            get closed(){\n\n                return get_closed.call(this) ;\n    \n            }\n\n        }\n\n            var_class_1609121323851 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323851 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.subscriber' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323851 ;\n        \nvar_global_main_1609121323851 = main;\n\n            var_init_locked_1609121323851 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323851 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.subscriber"
  },
  "src::is.class": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.class(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121324096;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断数据是否为类\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果指定数据是类则返回 true ，否则返回 false \r\n * \r\n */\r\n\r\nreturn isType(data , 'function') && data.__ZBEE_IS_CLASS__ ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121324096){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121324096 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.class"
  },
  "src::class.create": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::class.create(<mixed> baseClass , <mixed> ...args)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.function",
      "src::is.class"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isFunction,isClass;\n    \n                    let var_init_locked_1609121324076;\n    \n                    \n\n                    function main(baseClass , ...args){\n\n        \r\n/**\r\n * \r\n * 实例基于指定类对象\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import is.class\r\n * \r\n * @param {mixed} baseClass 类\r\n * \r\n * @param {mixed} [...args] 类参数\r\n * \r\n */\r\n\r\n\r\n\r\nif(isString(baseClass)){\r\n\r\n    baseClass = include(baseClass) ;\r\n}\r\n\r\nif(isFunction(baseClass)){\r\n\r\n    baseClass = baseClass(...args) ;\r\n\r\n    if(!isClass(baseClass)){\r\n\r\n        return baseClass ;\r\n    }\r\n}\r\n\r\nif(isClass(baseClass)){\r\n\r\n    return new baseClass(...args) ;\r\n}\n\n    }\n    \n                    return function(baseClass , ...args){\n    \n                        \n        if(!var_init_locked_1609121324076){\n\n            isString = include('src::is.string');\nisFunction = include('src::is.function');\nisClass = include('src::is.class');\n\n            var_init_locked_1609121324076 = true ;\n        }\n        \n    \n                        return main.call(this , baseClass , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "class.create"
  },
  "src::data.connection.subscribe.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::data.connection.subscribe.name(<string> name , <string> namespace)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(name , namespace){\n\n        \r\n/**\r\n * \r\n * 获取订阅器名称\r\n * \r\n * @param {string} name 订阅器名称\r\n * \r\n * @param {string} [namespace] 命名空间s\r\n * \r\n * @return {string} 订阅器名称\r\n * \r\n */\r\n\r\nif(namespace){\r\n\r\n    return `${name}<${namespace}>` ;\r\n}\r\n\r\nreturn name ;\n\n    }\n    \n                    return function(name , namespace){\n    \n                        \n    \n                        return main.call(this , name , namespace) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribe.name"
  },
  "src::data.connection.base": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.base()",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.string",
      "src::is.function",
      "src::is.boolean",
      "src::is.array",
      "src::data.subscriber",
      "src::function.get",
      "src::class.create",
      "src::array.includes",
      "src::array.remove",
      "src::data.connection.subscribe.name",
      "src::mixin.observable",
      "src::event.listener.add",
      "src::data.equals"
    ],
    "dependentModules": {
      "regex-parser": "^2.2.10"
    },
    "data": "(() =>{\n\n                    let isObject,isString,isFunction,isBoolean,isArray,Subscriber,get,create,includes,remove,getName,Observable,add,equals;\n    \n                    let var_init_locked_1609121323825;\n    \n                    let var_class_1609121323825;\n    \n                    \n\n                    let var_global_main_1609121323825 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323825){\n\n            isObject = include('src::is.object.simple');\nisString = include('src::is.string');\nisFunction = include('src::is.function');\nisBoolean = include('src::is.boolean');\nisArray = include('src::is.array');\nSubscriber = include('src::data.subscriber')();\nget = include('src::function.get');\ncreate = include('src::class.create');\nincludes = include('src::array.includes');\nremove = include('src::array.remove');\ngetName = include('src::data.connection.subscribe.name');\nObservable = include('src::mixin.observable');\nadd = include('src::event.listener.add');\nequals = include('src::data.equals');\n\n            /**\r\n * \r\n * 数据连接基础类\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import is.boolean\r\n * \r\n * @import is.array\r\n * \r\n * @import Subscriber from data.subscriber value\r\n * \r\n * @import get from function.get\r\n * \r\n * @import create from class.create\r\n * \r\n * @import includes from array.includes\r\n * \r\n * @import remove from array.remove\r\n * \r\n * @import getName from .subscribe.name\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @require regex-parser\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n const createRegex = require('regex-parser'); \r\n\r\n function createRules(rules){\r\n\r\n    let result = [] ;\r\n\r\n    for(let {\r\n        test,\r\n        use\r\n    } of rules){\r\n\r\n        if(isFunction(use)){\r\n\r\n            result.push({\r\n                test:createRegex(test),\r\n                use\r\n            }) ;\r\n        }\r\n    }\r\n\r\n    return result ;\r\n }\r\n\r\n class main extends mixins({\r\n     mixins:[\r\n        Observable\r\n     ]\r\n }){\r\n\r\n    constructor({\r\n        subscriber = Subscriber,\r\n        rules = [],\r\n        matchOnlyOnce = false,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        let me = this ;\r\n\r\n        me.subscriber = subscriber ;\r\n\r\n        me.subscribers = new Map() ;\r\n\r\n        me.rules = createRules(rules) ;\r\n\r\n        me.subscribeParamList = [] ;\r\n\r\n        me.matchOnlyOnce = matchOnlyOnce ;\r\n\r\n        add(me , {\r\n            ...me.subscriberListeners,\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    processMessage(...args){\r\n\r\n        return {} ;\r\n    }\r\n\r\n    processData(subscriber , message){\r\n\r\n        return subscriber.processData(message) ;\r\n    }\r\n\r\n    validateMessage(subscriber , message){\r\n\r\n        return true ;\r\n    }\r\n\r\n\r\n    processSubscribeParams(subscriber , params){\r\n\r\n        return [\r\n            params\r\n        ] ;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * 构建订阅器\r\n     * \r\n     * @param {string} name  订阅名称 \r\n     * \r\n     * @param {mixed} options 订阅器参数\r\n     * \r\n     * @return {data.Subscriber} 订阅器\r\n     * \r\n     */\r\n    createSubscriber(name , options){\r\n\r\n        let me = this,\r\n        {\r\n            subscriber\r\n        } = me ;\r\n\r\n        return create(subscriber , me , name , options) ;\r\n    }\r\n\r\n    onCreateSubscriber(subscriber){\r\n\r\n\r\n    }\r\n\r\n    get subscriberListeners(){\r\n\r\n        return {\r\n            open:'onSubscriberOpen',\r\n            close:'onSubscriberClose'\r\n        } ;\r\n    }\r\n\r\n    onSubscriberOpen(subscriber , params){\r\n\r\n        let me = this;\r\n\r\n        params = me.processSubscribeParams(subscriber , params) ;\r\n\r\n        if(isArray(params)){\r\n\r\n            if(me.validSubscriberOpenParams(params)){\r\n\r\n                me.doSubscriberOpen(...params) ;\r\n\r\n                me.subscribeParamList.push(params) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    validSubscriberOpenParams(params){\r\n\r\n        let {\r\n            subscribeParamList\r\n        } = this ;\r\n\r\n        if(!includes(subscribeParamList , params)){\r\n\r\n            return true ;\r\n        }\r\n\r\n        return false ;\r\n    }\r\n\r\n    doSubscriberOpen(...args){\r\n\r\n\r\n    }\r\n\r\n    onSubscriberClose(subscriber , params){\r\n\r\n        let me = this ;\r\n\r\n        params = me.processSubscribeParams(subscriber , params) ;\r\n\r\n        if(isArray(params)){\r\n\r\n            if(me.validSubscriberCloseParams(params)){\r\n\r\n                me.doSubscriberClose(...params) ;\r\n\r\n                remove(me.subscribeParamList , params) ;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    validSubscriberCloseParams(params){\r\n\r\n        let me = this,\r\n            subscribers = me.subscribers.values() ;\r\n\r\n        for(let subscriber of subscribers){\r\n\r\n            let {\r\n                closed,\r\n                params:subscribeParams\r\n            } = subscriber ;\r\n\r\n            if(!closed && equals(params , me.processSubscribeParams(subscriber , subscribeParams))){\r\n\r\n                return false ;\r\n            }\r\n        }\r\n\r\n        return true ;\r\n    }\r\n\r\n    doSubscriberClose(...args){\r\n\r\n\r\n    }\r\n\r\n    getSubscriber(name , namespace){\r\n\r\n        return this.subscribers.get(getName(name , namespace)) ;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {string} name 订阅器名称\r\n     *  \r\n     * @param {string} method 订阅器方法名称\r\n     *  \r\n     * @param  {mixed} ...args 订阅器方法参数\r\n     */\r\n    doSubscriberMethod(name , method , ...args){\r\n\r\n        let me = this,\r\n        {\r\n            subscribers\r\n        } = me,\r\n        subscriber = subscribers.get(name);\r\n\r\n        if(subscriber){\r\n\r\n            subscriber[method](...args) ;\r\n\r\n            return subscriber ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121323825 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323825 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.base' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323825 ;\n        \nvar_global_main_1609121323825 = main;\n\n            var_init_locked_1609121323825 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323825 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.base"
  },
  "src::data.connection.subscribed": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.connection.subscribed(<string> name , <string> connectionId)",
    "standard": true,
    "importNames": [
      "src::data.connection.subscribe.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121324139;\n    \n                    \n\n                    function main(name , connectionId){\n\n        \r\n/**\r\n * \r\n * 判定是否订阅\r\n * \r\n * @import getName from .subscribe.name\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {string} [connectionId] 连接编号\r\n * \r\n * @return {boolean} 如果已订阅则返回 true ， 否则返回 false\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    subscribers\r\n} = me;\r\n\r\nreturn subscribers.has(getName(name , connectionId)) ;\r\n\r\n \n\n    }\n    \n                    return function(name , connectionId){\n    \n                        \n        if(!var_init_locked_1609121324139){\n\n            getName = include('src::data.connection.subscribe.name');\n\n            var_init_locked_1609121324139 = true ;\n        }\n        \n    \n                        return main.call(this , name , connectionId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribed"
  },
  "src::data.connection.subscribe.once": {
    "meta": "code.meta.script.function",
    "signature": "<Promise> src::data.connection.subscribe.once(<string> name , <object> options)",
    "standard": true,
    "importNames": [
      "src::object.assign"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign;\n    \n                    let var_init_locked_1609121324158;\n    \n                    \n\n                    function main(name , options){\n\n        \r\n/**\r\n * \r\n * 订阅后获取数据后立即取消订阅，并返回获得数据\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {object} [options = {}] 订阅配置\r\n * \r\n * @return {Promise}\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n return new Promise(fn =>  me.subscribe(name , {\r\n    ...options,\r\n    fn,\r\n    once:true\r\n})) ;\n\n    }\n    \n                    return function(name , options = {}){\n    \n                        \n        if(!var_init_locked_1609121324158){\n\n            assign = include('src::object.assign');\n\n            var_init_locked_1609121324158 = true ;\n        }\n        \n    \n                        return main.call(this , name , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribe.once"
  },
  "src::function.defer": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.defer(<mixed> fn , {<mixed> scope , <mixed> defer})",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121324222;\n    \n                    \n\n                    function main(fn , {scope , defer}){\n\n        \r\n/**\r\n * \r\n * 延时执行函数\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {mixed} fn 函数\r\n * \r\n * @param {object} [config = {}] 函数配置\r\n * \r\n * @param {mixed} [config.scope] 函数作用域\r\n * \r\n * @param {mixed} [config.defer = 0] 延时时间\r\n * \r\n */\r\n\r\n return setTimeout(() => get(fn , scope)() , defer) ;\n\n    }\n    \n                    return function(fn , {scope , defer = 0} = {}){\n    \n                        \n        if(!var_init_locked_1609121324222){\n\n            get = include('src::function.get');\n\n            var_init_locked_1609121324222 = true ;\n        }\n        \n    \n                        return main.call(this , fn , {scope , defer}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.defer"
  },
  "src::data.pusher": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.pusher(<function> onOpen , <function> onClose)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::array.clear",
      "src::function.defer"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined,clear,defer;\n    \n                    let var_init_locked_1609121324199;\n    \n                    let var_class_1609121324199;\n    \n                    \n\n                    let var_global_main_1609121324199 ;\n    \n                    return function(onOpen , onClose){\n    \n                        \n        if(!var_init_locked_1609121324199){\n\n            isDefined = include('src::is.defined');\nclear = include('src::array.clear');\ndefer = include('src::function.defer');\n\n            \r\n/**\r\n * \r\n * 数据推送器\r\n * \r\n * @import is.defined\r\n * \r\n * @import clear from array.clear\r\n * \r\n * @import defer from function.defer\r\n * \r\n * @param {function} onOpen 当开始推送时回调函数\r\n * \r\n * @param {function} onClose 当开始推送时回调函数\r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(onOpen , onClose){\r\n\r\n        let me = this ;\r\n\r\n        me.onOpen = onOpen ;\r\n\r\n        me.onClose = onClose ;\r\n\r\n        me.callbacks = [] ;\r\n\r\n        defer(open , {\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    close(){\r\n\r\n        let {\r\n            callbacks,\r\n            onClose\r\n        } = this ;\r\n\r\n        clear(callbacks) ;\r\n\r\n        onClose() ;\r\n    }\r\n\r\n    push(callback){\r\n\r\n        let me = this,\r\n            {\r\n                callbacks\r\n            } = me;\r\n\r\n        callbacks.push(callback) ;\r\n\r\n        return me ;\r\n    }\r\n }\r\n\r\n function open(){\r\n\r\n    let me = this,\r\n    {\r\n        callbacks,\r\n        onOpen\r\n    } = me;\r\n\r\n    onOpen(data => {\r\n\r\n        for(let callback of callbacks){\r\n\r\n            let result = callback(data) ;\r\n\r\n            if(isDefined(result)){\r\n\r\n                data = result ;\r\n            }\r\n        }\r\n\r\n    }) ;\r\n }\n\n            var_class_1609121324199 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324199 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.pusher' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324199 ;\n        \nvar_global_main_1609121324199 = main;\n\n            var_init_locked_1609121324199 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121324199(onOpen , onClose) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.pusher"
  },
  "src::data.connection.subscribe.push": {
    "meta": "code.meta.script.function",
    "signature": "<Promise> src::data.connection.subscribe.push(<string> name , <object> options)",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::data.pusher"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,createPusher;\n    \n                    let var_init_locked_1609121324177;\n    \n                    \n\n                    function main(name , options){\n\n        \r\n/**\r\n * \r\n * 订阅后进行推送\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import createPusher from data.pusher\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {object} [options = {}] 订阅配置\r\n * \r\n * @return {Promise}\r\n * \r\n */\r\n\r\n let me = this,\r\n     subscriber ;\r\n\r\nreturn createPusher(fn => subscriber = me.subscribe(name , {\r\n    ...options,\r\n    fn\r\n}) , () => {\r\n\r\n    subscriber.destroy() ;\r\n\r\n    subscriber = null ;\r\n}) ;\n\n    }\n    \n                    return function(name , options = {}){\n    \n                        \n        if(!var_init_locked_1609121324177){\n\n            assign = include('src::object.assign');\ncreatePusher = include('src::data.pusher');\n\n            var_init_locked_1609121324177 = true ;\n        }\n        \n    \n                        return main.call(this , name , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribe.push"
  },
  "src::data.connection.find.subscriber.opened.name": {
    "meta": "code.meta.script.function",
    "signature": "<data.Subscriber> src::data.connection.find.subscriber.opened.name(<string> name , <data.Subscriber> ignoreSubscriber)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(name , ignoreSubscriber){\n\n        \r\n/**\r\n * \r\n * 获得一个指定名称的缴活订阅器\r\n * \r\n * @param {string} name 订阅器名称\r\n * \r\n * @param {data.Subscriber} [ignoreSubscriber] 忽略的订阅器\r\n * \r\n * @return {data.Subscriber} 订阅器 \r\n * \r\n */\r\n\r\n let subscribers = this.subscribers.values() ;\r\n\r\n for(let subscriber of subscribers){\r\n\r\n    let {\r\n        name:subscriberName\r\n    } = subscriber ;\r\n\r\n    if(subscriberName === name && subscriber !== ignoreSubscriber){\r\n\r\n        return subscriber ;\r\n    }\r\n }\n\n    }\n    \n                    return function(name , ignoreSubscriber){\n    \n                        \n    \n                        return main.call(this , name , ignoreSubscriber) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.find.subscriber.opened.name"
  },
  "src::data.connection.subscribe.namespace.generate": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::data.connection.subscribe.namespace.generate(<string> name)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::data.connection.subscribe.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,getName;\n    \n                    let var_init_locked_1609121324289;\n    \n                    \n\n                    function main(name){\n\n        \r\n/**\r\n * \r\n * 生成可用的命名空间\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import getName from ..name\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @return {string} 命名空间 \r\n * \r\n */\r\n\r\n let {\r\n    subscribers\r\n } = this,\r\n fullName;\r\n\r\n do{\r\n\r\n    fullName = getName(name , generate('connection-')) ;\r\n\r\n } while(subscribers.has(fullName)) ;\r\n\r\n return fullName ;\r\n\r\n \n\n    }\n    \n                    return function(name){\n    \n                        \n        if(!var_init_locked_1609121324289){\n\n            generate = include('src::id.generate');\ngetName = include('src::data.connection.subscribe.name');\n\n            var_init_locked_1609121324289 = true ;\n        }\n        \n    \n                        return main.call(this , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribe.namespace.generate"
  },
  "src::data.connection.subscribe": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.subscribe(<string> name , <object> options)",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::data.connection.subscribe.name",
      "src::data.connection.subscribe.namespace.generate"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,getName;\n    \n                    let var_init_locked_1609121324265;\n \n                    \n\n                    const var_current_scope_1609121324265 = new Map();\n    \n                    return function(name , options = {}){\n    \n                        \n        if(!var_init_locked_1609121324265){\n\n            assign = include('src::object.assign');\ngetName = include('src::data.connection.subscribe.name');\n\n            var_init_locked_1609121324265 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121324265.has(this)){\n\n            var_current_scope_1609121324265.set(this , (() => {\n                const generate = include('src::data.connection.subscribe.namespace.generate').bind(this);\n\n                /**\r\n * \r\n * 单次订阅\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import getName from .subscribe.name\r\n * \r\n * @import generate from .subscribe.namespace.generate scoped\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {object} [options = {}] 订阅配置\r\n * \r\n */\r\n\r\nfunction main(name , options){\r\n\r\n    let me = this,\r\n    {\r\n        subscribers,\r\n        forceSubscribe\r\n    } = me,\r\n    {\r\n        namespace\r\n    } = options;\r\n\r\n    if(me.isSubscribed(name , namespace)){\r\n\r\n        namespace = generate(name) ;\r\n        \r\n    }\r\n\r\n    let fullName = getName(name , namespace),\r\n        subscriber = me.createSubscriber(name , assign({} , convertNameToSubscriberOptions.call(me , name) , {\r\n            ...options,\r\n            fullName\r\n        })) ;\r\n\r\n    subscribers.set(fullName , subscriber) ;\r\n\r\n    me.onCreateSubscriber(subscriber) ;\r\n\r\n    return subscriber ;\r\n}\r\n\r\nfunction convertNameToSubscriberOptions(name){\r\n\r\n    let {\r\n        rules\r\n    } = this;\r\n\r\n    for(let {\r\n        test,\r\n        use\r\n    } of rules){\r\n\r\n        let args = name.match(test) ;\r\n\r\n        if(args){\r\n\r\n            return use(...args) ;\r\n        }\r\n    }\r\n\r\n    return {} ;\r\n }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121324265.get(this) ;\n\n        \n    \n                        return main.call(this , name , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribe"
  },
  "src::data.connection.unsubscribe": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.unsubscribe(<string> name , <string> namespace)",
    "standard": true,
    "importNames": [
      "src::data.connection.subscribe.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121324311;\n    \n                    \n\n                    function main(name , namespace){\n\n        \r\n/**\r\n * \r\n * 取消单次订阅\r\n * \r\n * @import getName from .subscribe.name\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {string} [namespace] 命名空间\r\n * \r\n */\r\n\r\nlet me = this,\r\n    {\r\n        subscribers\r\n    } = me,\r\n    fullNames = [];\r\n\r\nif(namespace){\r\n\r\n    fullNames.push(getName(name , namespace)) ;\r\n\r\n}else{\r\n\r\n    let  subscriberNames = subscribers.keys(),\r\n         namespaceRe = /\\<[^\\<\\>]+\\>$/;\r\n\r\n    for(let subscriberName of subscriberNames){\r\n\r\n        if(subscriberName.replace(namespaceRe , '') === name){\r\n\r\n            fullNames.push(subscriberName) ;\r\n        }\r\n    }\r\n}\r\n\r\nfor(let fullName of fullNames){\r\n\r\n    me.doSubscriberMethod(fullName , 'destroy') ;\r\n}\r\n\r\n\n\n    }\n    \n                    return function(name , namespace){\n    \n                        \n        if(!var_init_locked_1609121324311){\n\n            getName = include('src::data.connection.subscribe.name');\n\n            var_init_locked_1609121324311 = true ;\n        }\n        \n    \n                        return main.call(this , name , namespace) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.unsubscribe"
  },
  "src::data.connection.subscribes": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.subscribes(<object> config)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.function",
      "src::is.object.simple",
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isFunction,isObject,get;\n    \n                    let var_init_locked_1609121324334;\n    \n                    \n\n                    function main(config){\n\n        \r\n/**\r\n * \r\n * 批量订阅\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {object} config 批量订阅配置\r\n * \r\n * @return {object} 实例化后的订阅器集合\r\n * \r\n */\r\n\r\nlet {\r\n    scope,\r\n    namespace,\r\n    ...subscribers\r\n} = config,\r\nme = this,\r\nnames = Object.keys(subscribers),\r\nresult = {};\r\n\r\nfor(let name of names){\r\n\r\n    let target = subscribers[name],\r\n        subscriber;\r\n\r\n    if(isString(target) || isFunction(target)){\r\n\r\n        subscriber = me.subscribe(name , {\r\n            fn:target,\r\n            namespace,\r\n            scope\r\n        }) ;\r\n\r\n    }else if(isObject(target)){\r\n\r\n        subscriber = me.subscribe(name , {\r\n            ...target,\r\n            namespace,\r\n            scope\r\n        }) ;\r\n    }\r\n\r\n    if(subscriber){\r\n\r\n        result[name] = subscriber ;\r\n    }\r\n}\r\n\r\nreturn result ;\n\n    }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121324334){\n\n            isString = include('src::is.string');\nisFunction = include('src::is.function');\nisObject = include('src::is.object.simple');\nget = include('src::function.get');\n\n            var_init_locked_1609121324334 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.subscribes"
  },
  "src::data.connection.unsubscribes": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.unsubscribes(<string[]> names , <string> namespace)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(names , namespace){\n\n        \r\n/**\r\n * \r\n * 批量取消订阅\r\n * \r\n * @param {string[]} names 批量订阅配置\r\n * \r\n * @param {string} [namespace] 命名空间\r\n * \r\n */\r\n\r\nlet me = this;\r\n\r\nfor(let name of names){\r\n\r\n    me.unsubscribe(name , namespace) ;\r\n}\n\n    }\n    \n                    return function(names , namespace){\n    \n                        \n    \n                        return main.call(this , names , namespace) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.unsubscribes"
  },
  "src::data.connection.deactivate": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.deactivate()",
    "standard": true,
    "importNames": [
      "src::array.includes"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let includes;\n    \n                    let var_init_locked_1609121324378;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 冻结\r\n * \r\n * @import includes from array.includes\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    subscribeParamList\r\n} = me;\r\n\r\nfor(let params of subscribeParamList){\r\n\r\n    me.doSubscriberClose(...params) ;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324378){\n\n            includes = include('src::array.includes');\n\n            var_init_locked_1609121324378 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deactivate"
  },
  "src::data.connection": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.connection()",
    "standard": true,
    "importNames": [
      "src::data.connection.base",
      "src::data.connection.accept",
      "src::data.connection.subscribed",
      "src::data.connection.subscribe.once",
      "src::data.connection.subscribe.push",
      "src::data.connection.find.subscriber.opened.name",
      "src::data.connection.subscribe",
      "src::data.connection.unsubscribe",
      "src::data.connection.subscribes",
      "src::data.connection.unsubscribes",
      "src::data.connection.activate",
      "src::data.connection.deactivate",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let extend,method_acceptMessage,method_isSubscribed,method_subscribeOnce,method_subscribePush,method_findOpenedSubscriberByName,method_subscribe,method_unsubscribe,method_subscribes,method_unsubscribes,method_activate,method_deactivate,isObject;\n    \n                    let var_init_locked_1609121323797;\n    \n                    let var_class_1609121323797;\n    \n                    \n\n                    let var_global_main_1609121323797 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121323797){\n\n            extend = include('src::data.connection.base')();\nmethod_acceptMessage = include('src::data.connection.accept');\nmethod_isSubscribed = include('src::data.connection.subscribed');\nmethod_subscribeOnce = include('src::data.connection.subscribe.once');\nmethod_subscribePush = include('src::data.connection.subscribe.push');\nmethod_findOpenedSubscriberByName = include('src::data.connection.find.subscriber.opened.name');\nmethod_subscribe = include('src::data.connection.subscribe');\nmethod_unsubscribe = include('src::data.connection.unsubscribe');\nmethod_subscribes = include('src::data.connection.subscribes');\nmethod_unsubscribes = include('src::data.connection.unsubscribes');\nmethod_activate = include('src::data.connection.activate');\nmethod_deactivate = include('src::data.connection.deactivate');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[]}){\n\n            \n\n            \n\n            \n\n            acceptMessage(...args){\n\n            return method_acceptMessage.apply(this , args) ;\n\n        }\nisSubscribed(...args){\n\n            return method_isSubscribed.apply(this , args) ;\n\n        }\nsubscribeOnce(...args){\n\n            return method_subscribeOnce.apply(this , args) ;\n\n        }\nsubscribePush(...args){\n\n            return method_subscribePush.apply(this , args) ;\n\n        }\nfindOpenedSubscriberByName(...args){\n\n            return method_findOpenedSubscriberByName.apply(this , args) ;\n\n        }\nsubscribe(...args){\n\n            return method_subscribe.apply(this , args) ;\n\n        }\nunsubscribe(...args){\n\n            return method_unsubscribe.apply(this , args) ;\n\n        }\nsubscribes(...args){\n\n            return method_subscribes.apply(this , args) ;\n\n        }\nunsubscribes(...args){\n\n            return method_unsubscribes.apply(this , args) ;\n\n        }\nactivate(...args){\n\n            return method_activate.apply(this , args) ;\n\n        }\ndeactivate(...args){\n\n            return method_deactivate.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121323797 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121323797 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection' ;\n                }\n\n            } ;\n\n            main = var_class_1609121323797 ;\n        \nvar_global_main_1609121323797 = main;\n\n            var_init_locked_1609121323797 = true ;\n        }\n        \n    \n                        return var_global_main_1609121323797 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection"
  },
  "src::data.connection.deploy.lifecycle": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.deploy.lifecycle(<object> connections , <object> component , <function> getConnectionId)",
    "standard": true,
    "importNames": [
      "src::data.connection.deploy"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let deploy;\n    \n                    let var_init_locked_1609121324398;\n    \n                    \n\n                    function main(connections , component , getConnectionId){\n\n        \r\n/**\r\n * \r\n * 对象版部署封装\r\n * \r\n * @import deploy from ..deploy\r\n * \r\n * @param {object} connections 订阅对象\r\n * \r\n * @param {object} component 组件定义对象\r\n * \r\n * @param {function} [getConnectionId] 获得连接编号\r\n * \r\n * @return {object} 增加订阅功能的组件定义对象\r\n * \r\n */\r\n\r\n let names = Object.keys(connections),\r\n     config = {};\r\n\r\n for(let name of names){\r\n\r\n    let field = name === 'default' ? 'subscribers' : `${name}_subscribers`,\r\n        subscribers = component[field],\r\n        varName = `$${field}`,\r\n        connection = connections[name];\r\n\r\n    if(subscribers){\r\n\r\n        config[name] ={\r\n            varName,\r\n            connection,\r\n            subscribers\r\n        } ;\r\n\r\n        delete component[field] ;\r\n\r\n    }else{\r\n\r\n        config[name] = {\r\n            varName,\r\n            connection,\r\n            subscribers:{}\r\n        } ;\r\n    }\r\n }\r\n\r\n return deploy(connections , config , getConnectionId);\n\n    }\n    \n                    return function(connections , component , getConnectionId){\n    \n                        \n        if(!var_init_locked_1609121324398){\n\n            deploy = include('src::data.connection.deploy');\n\n            var_init_locked_1609121324398 = true ;\n        }\n        \n    \n                        return main.call(this , connections , component , getConnectionId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy.lifecycle"
  },
  "src::data.connection.deploy": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.deploy(<array> connections , <object> subscriberMap , <function> getConnectionId)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::is.object.simple",
      "src::is.array",
      "src::is.function",
      "src::is.string",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,isObject,isArray,isFunction,isString,empty;\n    \n                    let var_init_locked_1609121324427;\n    \n                    \n\n                    function main(connections , subscriberMap , getConnectionId){\n\n        /**\r\n * \r\n * 实现部署\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import is.function\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @param {array} connections 连接实例集合\r\n * \r\n * @param {object} subscriberMap 订阅器定义集合\r\n * \r\n * @param {function} [getConnectionId] 获得连接编号\r\n * \r\n * @return {object}\r\n * \r\n */\r\n\r\n let {\r\n    keys\r\n } = Object;\r\n\r\n getConnectionId = getConnectionId || empty ;\r\n\r\n let defaultConnectionId = generate('connection-') ;\r\n\r\n function isMounted(){\r\n\r\n    return this.hasOwnProperty('$connectionId') ;\r\n }\r\n\r\n return {\r\n\r\n    mounted(){\r\n\r\n        let scope = this ;\r\n\r\n        if(isMounted.call(scope)){\r\n\r\n            return ;\r\n        }\r\n\r\n        let names = keys(subscriberMap),\r\n            namespace = scope.$connectionId = getConnectionId.call(scope) || defaultConnectionId ;\r\n\r\n        for(let name of names){\r\n\r\n            let {\r\n                varName,\r\n                connection,\r\n                subscribers\r\n            } = subscriberMap[name] ;\r\n            \r\n            scope[varName] = new Proxy(connection.subscribes({\r\n                ...subscribers,\r\n                namespace,\r\n                scope\r\n            }) , {\r\n\r\n                set(subscribers , name , config){\r\n\r\n                    if(!subscribers.hasOwnProperty(name)){\r\n\r\n                        let subscriber = connection.subscribes({\r\n                            [name]:config,\r\n                            namespace,\r\n                            scope\r\n                        })[name] ;\r\n\r\n                        if(subscriber){\r\n\r\n                            subscribers[name] = subscriber ;\r\n                        }\r\n                    }\r\n\r\n                    return subscribers ;\r\n\r\n                },\r\n\r\n                get(subscribers , name){\r\n\r\n                    return subscribers[name] ;\r\n                },\r\n\r\n                deleteProperty(subscribers , name){\r\n\r\n                    if(subscribers.hasOwnProperty(name)){\r\n\r\n                        connection.unsubscribe(name , namespace) ;\r\n\r\n                        delete subscribers[name] ;\r\n                    }\r\n\r\n                    return subscribers ;\r\n                },\r\n\r\n                ownKeys(subscribers){\r\n\r\n                    return Object.keys(subscribers) ;\r\n                }\r\n\r\n            }) ;\r\n        }\r\n\r\n    },\r\n\r\n    unmounted(){\r\n\r\n        let scope = this ;\r\n\r\n        if(!isMounted.call(scope)){\r\n\r\n            return ;\r\n        }\r\n\r\n        let names = keys(subscriberMap),\r\n            {\r\n                $connectionId:namespace\r\n            } = scope;\r\n\r\n        for(let name of names){\r\n\r\n            let {\r\n                varName,\r\n                connection,\r\n            } = subscriberMap[name] ;\r\n\r\n            connection.unsubscribes(keys(scope[varName]) , namespace) ;\r\n\r\n            delete scope[varName] ;\r\n        }\r\n\r\n        delete scope.$connectionId ;\r\n    }\r\n\r\n } ;\n\n    }\n    \n                    return function(connections , subscriberMap , getConnectionId){\n    \n                        \n        if(!var_init_locked_1609121324427){\n\n            generate = include('src::id.generate');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\nisFunction = include('src::is.function');\nisString = include('src::is.string');\nisObject = include('src::is.object.simple');\nempty = include('src::function.empty')();\n\n            var_init_locked_1609121324427 = true ;\n        }\n        \n    \n                        return main.call(this , connections , subscriberMap , getConnectionId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy"
  },
  "src::data.connection.deploy.miniprogram": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.deploy.miniprogram(<object> connections , <object> component , <array> defaultConnectionNames)",
    "standard": true,
    "importNames": [
      "src::data.connection.socket.manager",
      "src::function.empty",
      "src::data.connection.deploy.lifecycle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Manager,empty,deploy;\n    \n                    let var_init_locked_1609121324452;\n    \n                    \n\n                    function main(connections , component , defaultConnectionNames){\n\n        \r\n/**\r\n * \r\n * 基于数据连接的小程序封装\r\n * \r\n * @import Manager from data.connection.socket.manager value\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @import deploy from .lifecycle\r\n * \r\n * @param {object} connections 订阅对象\r\n * \r\n * @param {object} component 组件定义对象\r\n * \r\n * @param {array} [defaultConnectionNames = []] 默认连接名称集合\r\n * \r\n * @return {object} 增加订阅功能的组件定义对象\r\n * \r\n */\r\n\r\nconst {                 \r\n    onLoad:originLoad = empty,\r\n    onShow:originShow = empty,\r\n    onHide:originHide = empty,\r\n    onUnload:originUnload = empty,\r\n    connections:connectionNames = defaultConnectionNames,\r\n    ...options\r\n } = component;\r\n\r\nlet {\r\n    mounted,\r\n    unmounted,\r\n    subscribe,\r\n    unsubscribe\r\n} = deploy(connections , component) ;\r\n\r\nfunction initSockets(){\r\n\r\n     if(!this.hasOwnProperty('$connectionId')){\r\n\r\n          let names = Object.keys(connections);\r\n\r\n          for(let name of names){\r\n\r\n               if(!connectionNames.includes(name)){\r\n\r\n                    Manager.disconnect(connections[name]) ;\r\n\r\n               }\r\n          }\r\n\r\n          for(let name of names){\r\n\r\n               if(connectionNames.includes(name)){\r\n\r\n                    Manager.connect(connections[name]) ;\r\n               }\r\n          }\r\n     }\r\n}\r\n\r\nreturn {\r\n    ...options,\r\n    onLoad(options){\r\n\r\n        let me = this ;\r\n\r\n        initSockets.call(me) ;\r\n\r\n        mounted.call(me) ;\r\n            \r\n        originLoad.call(me , options) ;\r\n        \r\n   },\r\n\r\n   onShow(){\r\n\r\n        let me = this ;\r\n\r\n        initSockets.call(me) ;\r\n\r\n        mounted.call(me) ;\r\n            \r\n        originShow.call(me , options) ;\r\n   },\r\n\r\n   onHide(){\r\n\r\n        let me = this ;\r\n\r\n        originHide.call(me) ;\r\n\r\n        unmounted.call(me) ;\r\n   },\r\n\r\n   onUnload(){\r\n\r\n        let me = this ;\r\n\r\n        originUnload.call(me) ;\r\n\r\n        unmounted.call(me) ;\r\n   },\r\n   subscribe,\r\n   unsubscribe\r\n} ;\n\n    }\n    \n                    return function(connections , component , defaultConnectionNames = []){\n    \n                        \n        if(!var_init_locked_1609121324452){\n\n            Manager = include('src::data.connection.socket.manager')();\nempty = include('src::function.empty')();\ndeploy = include('src::data.connection.deploy.lifecycle');\n\n            var_init_locked_1609121324452 = true ;\n        }\n        \n    \n                        return main.call(this , connections , component , defaultConnectionNames) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy.miniprogram"
  },
  "src::data.connection.socket": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket()",
    "standard": true,
    "importNames": [
      "src::data.connection",
      "src::mixin.observable",
      "src::event.listener.add",
      "src::data.connection.socket.manager",
      "src::environment.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Connection,observable,add,Manager,getName;\n    \n                    let var_init_locked_1609121324512;\n    \n                    let var_class_1609121324512;\n    \n                    \n\n                    let var_global_main_1609121324512 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324512){\n\n            Connection = include('src::data.connection')();\nobservable = include('src::mixin.observable');\nadd = include('src::event.listener.add');\nManager = include('src::data.connection.socket.manager')();\ngetName = include('src::environment.name');\n\n            \r\n\r\n/**\r\n * \r\n * Socket 通信\r\n * \r\n * @import Connection from data.connection value\r\n * \r\n * @import observable from mixin.observable\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import Manager from .socket.manager value\r\n * \r\n * @import getName from environment.name\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n class main extends Connection{\r\n\r\n    constructor({\r\n        socket,\r\n        ...superOptions\r\n    }){\r\n\r\n        super(superOptions) ;\r\n\r\n        let me = this ;\r\n\r\n        let {\r\n            url,\r\n            ...options\r\n        } = socket,\r\n        {\r\n            reconnection = true,\r\n            reconnectionDelay = 1000,\r\n            autoConnect = true,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        me.initialize(url , otherOptions) ;\r\n\r\n        if(autoConnect){\r\n\r\n            Manager.connect(me) ;\r\n        }\r\n\r\n        if(reconnection){\r\n\r\n            add(me , {\r\n                lostconnect:'onReconnect',\r\n                connecttimeout:'onReconnect',\r\n                scope:me\r\n            }) ;\r\n        }\r\n\r\n        add(me , 'connect' , () => me.activate()) ;\r\n\r\n        me.reconnectionDelay = reconnectionDelay ;\r\n\r\n        if(getName() === 'browser'){\r\n\r\n            let isDoReconnect = false;\r\n\r\n            add(window , {\r\n                offline(){\r\n\r\n                    if(me.isConnected){\r\n\r\n                        isDoReconnect = true ;\r\n                    }\r\n                },\r\n                online(){\r\n\r\n                    if(me.isConnected && isDoReconnect){\r\n\r\n                        me.onReconnect() ;\r\n                    }\r\n\r\n                    isDoReconnect = false ;\r\n                },\r\n                scope:me\r\n            }) ;\r\n        }\r\n    }\r\n\r\n    onReconnect(){\r\n\r\n        let me = this,\r\n        {\r\n            reconnectionDelay\r\n        } = me;\r\n\r\n        setTimeout(() => {\r\n\r\n            Manager.disconnect(me) ;\r\n\r\n            Manager.connect(me) ;\r\n\r\n        } , reconnectionDelay) ;\r\n        \r\n    }\r\n\r\n    initialize(url , options){\r\n\r\n\r\n    }\r\n\r\n    get isConnecting(){\r\n\r\n        return isState.call(this , 0) ;\r\n    }\r\n\r\n    get isConnected(){\r\n\r\n        return isState.call(this , 1) ;\r\n    }\r\n\r\n    get isDisconnecting(){\r\n\r\n        return isState.call(this , 2) ;\r\n    }\r\n    \r\n    get isDisconnected(){\r\n\r\n        return isState.call(this , 3) ;\r\n    }\r\n\r\n    connect(){\r\n\r\n        let me = this,\r\n        {\r\n            isDisconnected\r\n        } = me ;\r\n\r\n        if(isDisconnected){\r\n\r\n           me.doConnect() ;\r\n        }\r\n    }\r\n\r\n    doConnect(){\r\n\r\n    }\r\n\r\n    disconnect(){\r\n\r\n        let me = this,\r\n        {\r\n            isDisconnected,\r\n            isDisconnecting\r\n        } = me ;\r\n\r\n        if(!isDisconnected || !isDisconnecting){\r\n\r\n            me.disconnectingState = true ;\r\n\r\n            me.deactivate() ;\r\n\r\n            me.doDisconnect() ;\r\n        }\r\n    }\r\n\r\n    doDisconnect(){\r\n\r\n    }\r\n\r\n    validateMessage({\r\n        params:baseParams\r\n    },{\r\n        params:equalParams\r\n    }){\r\n\r\n        let names = Object.keys(equalParams) ;\r\n\r\n        for(let name of names){\r\n\r\n            if(baseParams[name] !== equalParams[name]){\r\n\r\n                return false ;\r\n            }\r\n        }\r\n\r\n        return true ;\r\n    }\r\n }\r\n\r\n function isState(state){\r\n\r\n    let {\r\n        socket\r\n    } = this ;\r\n\r\n    if(!socket){\r\n\r\n        return state === 3 ;\r\n    }\r\n\r\n    return socket.readyState === state ;\r\n }\n\n            var_class_1609121324512 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324512 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324512 ;\n        \nvar_global_main_1609121324512 = main;\n\n            var_init_locked_1609121324512 = true ;\n        }\n        \n    \n                        return var_global_main_1609121324512 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket"
  },
  "src::data.connection.socket.manager": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket.manager()",
    "standard": true,
    "importNames": [
      "src::data.connection.socket",
      "src::event.listener.add",
      "src::event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Socket,add,remove;\n    \n                    let var_init_locked_1609121324476;\n    \n                    let var_class_1609121324476;\n    \n                    let var_once_value_1609121324476;\n\n                    let var_global_main_1609121324476 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324476){\n\n            Socket = include('src::data.connection.socket');\nadd = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\n\n            \r\n/**\r\n * \r\n * 管理多个 WebSocket 推送器开关\r\n * \r\n * @import Socket from data.connection.socket\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @once\r\n * \r\n */\r\n\r\n const processQueue = [];\r\n\r\n let isProcessorStarted = false,\r\n     previousSocket;\r\n\r\n class main{\r\n\r\n    isSocket(socket){\r\n\r\n        return socket instanceof Socket() ;\r\n    }\r\n\r\n    isConnected(socket){\r\n\r\n        return this.isSocket(socket) && socket.isConnected ;\r\n    }\r\n\r\n    connect(socket){\r\n\r\n        todo.call(this , socket , 'connect') ;\r\n    }\r\n\r\n    disconnect(socket){\r\n\r\n       todo.call(this , socket , 'disconnect') ;\r\n    }\r\n }\r\n\r\n function todo(socket , action) {\r\n\r\n    if(this.isSocket(socket)){\r\n\r\n        processQueue.push({\r\n            socket,\r\n            action\r\n        }) ;\r\n    \r\n        start() ;\r\n    }\r\n }\r\n\r\n function start() {\r\n\r\n    if(!isProcessorStarted){\r\n\r\n        isProcessorStarted = true ;\r\n\r\n        doSetTimeoutProcessing() ;\r\n    }\r\n }\r\n\r\n function doSetTimeoutProcessing(){\r\n\r\n    setTimeout(doProcessing , 0) ;\r\n }\r\n\r\n function doProcessing(){\r\n\r\n    let [\r\n        process\r\n    ] = processQueue;\r\n\r\n    if(process){\r\n        \r\n        let {\r\n            socket,\r\n            action\r\n        } = process ;\r\n\r\n        let {\r\n            isDisconnected,\r\n            isConnected,\r\n            isDisconnecting,\r\n            isConnecting\r\n        } = socket;\r\n\r\n        if(previousSocket){\r\n\r\n            remove(previousSocket , {\r\n                lostconnect:doSetTimeoutProcessing,\r\n                disconnect:doSetTimeoutProcessing,\r\n                connect:doSetTimeoutProcessing\r\n            }) ;\r\n        }\r\n\r\n        if(isDisconnected || isConnected){\r\n\r\n            previousSocket = socket ;\r\n\r\n            processQueue.shift() ;\r\n\r\n            add(socket , 'lostconnect' , doSetTimeoutProcessing) ;\r\n\r\n            switch(action){\r\n\r\n                case 'connect':\r\n\r\n                    if(isDisconnected){\r\n\r\n                        add(socket , 'connect' , doSetTimeoutProcessing , {\r\n                            once:true\r\n                        }) ;\r\n\r\n                        socket.connect() ;\r\n                    \r\n                    }else{\r\n\r\n                        doSetTimeoutProcessing() ;\r\n                    }\r\n\r\n                    break ;\r\n\r\n                case 'disconnect':\r\n\r\n                    if(isConnected){\r\n\r\n                        add(socket , 'disconnect' , doSetTimeoutProcessing , {\r\n                            once:true\r\n                        }) ;\r\n\r\n                        socket.disconnect() ;\r\n                                            \r\n                    }else{\r\n\r\n                        doSetTimeoutProcessing() ;\r\n                    }\r\n            }\r\n        \r\n        }else if(isDisconnecting){\r\n\r\n            add(socket , 'disconnect' , doSetTimeoutProcessing , {\r\n                once:true\r\n            }) ;\r\n        \r\n        }else if(isConnecting){\r\n\r\n            add(socket , 'connect' , doSetTimeoutProcessing , {\r\n                once:true\r\n            }) ;\r\n        }\r\n    \r\n    }else{\r\n\r\n        previousSocket = null ;\r\n\r\n        isProcessorStarted = false ;\r\n    }\r\n }\n\n            var_class_1609121324476 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324476 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket.manager' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324476 ;\n        \nvar_global_main_1609121324476 = main;\n\n            var_init_locked_1609121324476 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121324476){\n\n            return var_once_value_1609121324476 ;\n\n        }\n        return var_once_value_1609121324476 = new var_global_main_1609121324476() ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket.manager"
  },
  "src::data.connection.deploy.module": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.deploy.module(<object> connections , <object> module)",
    "standard": true,
    "importNames": [
      "src::function.empty",
      "src::data.connection.deploy.lifecycle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let empty,deploy;\n    \n                    let var_init_locked_1609121324537;\n    \n                    \n\n                    function main(connections , module){\n\n        \r\n/**\r\n * \r\n * 基于数据连接的模块封装\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @import deploy from .lifecycle\r\n * \r\n * @param {object} connections 订阅对象\r\n * \r\n * @param {object} module 组件定义对象\r\n * \r\n * @return {object} 增加订阅功能的组件定义对象\r\n * \r\n */\r\n\r\n let {\r\n     mounted\r\n } = deploy(connections , module) ;\r\n\r\n mounted.call(module) ;\r\n\r\n return module ;\n\n    }\n    \n                    return function(connections , module){\n    \n                        \n        if(!var_init_locked_1609121324537){\n\n            empty = include('src::function.empty')();\ndeploy = include('src::data.connection.deploy.lifecycle');\n\n            var_init_locked_1609121324537 = true ;\n        }\n        \n    \n                        return main.call(this , connections , module) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy.module"
  },
  "src::data.connection.deploy.react": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.connection.deploy.react(<object> connections , <object> componentClass)",
    "standard": false,
    "importNames": [
      "src::data.connection.deploy.lifecycle",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let deploy,empty;\n    \n                    let var_init_locked_1609121324565;\n    \n                    \n\n                    function main(connections , componentClass){\n\n        /**\r\n * \r\n * 基于数据连接的 React 封装\r\n * \r\n * @import deploy from .lifecycle\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @param {object} connections 订阅对象\r\n * \r\n * @param {object} componentClass 组件定义对象\r\n * \r\n * @return {mixed} 组件类引用\r\n * \r\n * @non-standard\r\n * \r\n */\r\n\r\nclass Component extends componentClass{\r\n\r\n    constructor(props){\r\n\r\n        super(props) ;\r\n\r\n        let me = this ;\r\n\r\n        let {\r\n            mounted,\r\n            unmounted\r\n        } = deploy(connections , me , function(){\r\n\r\n            return this.props.connectionId ;\r\n\r\n        }) ;\r\n\r\n        const {\r\n            componentDidMount:originMounted = empty,\r\n            componentWillUnmount:originUnmounted = empty\r\n         } = me;\r\n\r\n         me.componentDidMount = () =>{\r\n\r\n            mounted.call(me) ;\r\n           \r\n            originMounted.call(me) ;\r\n            \r\n         } ;\r\n\r\n         me.componentWillUnmount = () =>{\r\n\r\n            originUnmounted.call(me) ;\r\n    \r\n            unmounted.call(me) ;\r\n         } ;\r\n    }\r\n    \r\n} ;\r\n\r\nreturn props => <Component {...props}/> ;\n\n    }\n    \n                    return function(connections , componentClass){\n    \n                        \n        if(!var_init_locked_1609121324565){\n\n            deploy = include('src::data.connection.deploy.lifecycle');\nempty = include('src::function.empty')();\n\n            var_init_locked_1609121324565 = true ;\n        }\n        \n    \n                        return main.call(this , connections , componentClass) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy.react"
  },
  "src::data.connection.deploy.vue": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.connection.deploy.vue(<object> connections , <object> component)",
    "standard": true,
    "importNames": [
      "src::function.empty",
      "src::data.connection.deploy.lifecycle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let empty,deploy;\n    \n                    let var_init_locked_1609121324590;\n    \n                    \n\n                    function main(connections , component){\n\n        \r\n/**\r\n * \r\n * 基于数据连接的 VUE 封装\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @import deploy from .lifecycle\r\n * \r\n * @param {object} connections 订阅对象\r\n * \r\n * @param {object} component 组件定义对象\r\n * \r\n * @return {object} 增加订阅功能的组件定义对象\r\n * \r\n */\r\n\r\n let {\r\n     mounted,\r\n     unmounted\r\n } = deploy(connections , component , function(){\r\n\r\n    return this.connectionId ;\r\n\r\n }) ;\r\n\r\n const {\r\n    mounted:originMounted = empty,\r\n    destroyed:originUnmounted = empty,\r\n    ...options\r\n } = component;\r\n\r\n return {\r\n    mounted(){\r\n\r\n      let me = this ;\r\n\r\n      mounted.call(me) ;\r\n         \r\n      originMounted.call(me) ;\r\n    },\r\n\r\n    destroyed(){\r\n\r\n      let me = this ;\r\n\r\n      originUnmounted.call(me) ;\r\n\r\n      unmounted.call(me) ;\r\n      \r\n    },\r\n\r\n    ...options\r\n } ;\n\n    }\n    \n                    return function(connections , component){\n    \n                        \n        if(!var_init_locked_1609121324590){\n\n            empty = include('src::function.empty')();\ndeploy = include('src::data.connection.deploy.lifecycle');\n\n            var_init_locked_1609121324590 = true ;\n        }\n        \n    \n                        return main.call(this , connections , component) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.deploy.vue"
  },
  "src::data.connection.flow": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.flow(<data.connection.Mesage> message , <object> flows , <object> methods , <mixed> callback , <mixed> scoped)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.string",
      "src::is.function",
      "src::is.array",
      "src::is.promise",
      "src::is.defined",
      "src::id.generate",
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,isString,isFunction,isArray,isPromise,isDefined,generate,get;\n    \n                    let var_init_locked_1609121324616;\n    \n                    let var_class_1609121324616;\n    \n                    \n\n                    let var_global_main_1609121324616 ;\n    \n                    return function(message , flows , methods , callback , scoped){\n    \n                        \n        if(!var_init_locked_1609121324616){\n\n            isObject = include('src::is.object.simple');\nisString = include('src::is.string');\nisFunction = include('src::is.function');\nisArray = include('src::is.array');\nisPromise = include('src::is.promise');\nisDefined = include('src::is.defined');\ngenerate = include('src::id.generate');\nget = include('src::function.get');\n\n            /**\r\n * \r\n * 流程\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import is.array\r\n * \r\n * @import is.promise\r\n * \r\n * @import is.defined\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {data.connection.Mesage} message 消息机\r\n * \r\n * @param {object} flows 流程定义\r\n * \r\n * @param {object} methods 流程节点定义\r\n * \r\n * @param {mixed} callback 回调函数\r\n * \r\n * @param {mixed} scoped 回调函数作用域\r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(message , flows , methods , context){\r\n\r\n        let me = this ;\r\n        \r\n        me.flows = flows ;\r\n\r\n        let currentMethods = me.methods = {},\r\n            innerContext = {},\r\n            {\r\n                next\r\n            } = me,\r\n            names =  me.methodNames = Object.keys(methods) ;\r\n\r\n        for(let name of names){\r\n\r\n            let method = methods[name] ;\r\n\r\n            if(isFunction(method)){\r\n\r\n                currentMethods[name] = ({\r\n                    data\r\n                }) => {\r\n\r\n                    let result = method.call(innerContext , data , context) ;\r\n\r\n                    if(isPromise(result)){\r\n\r\n                        result.then(next.bind(me , name)) ;\r\n                    \r\n                    }else{\r\n\r\n                        next.call(me , name , result) ;\r\n                    }\r\n\r\n                } ;\r\n            }\r\n        }\r\n\r\n        me.message = message ;\r\n\r\n        me.started = false ;\r\n    }\r\n\r\n    getFullAddress(name){\r\n\r\n        return `${name}<${this.flowId}>` ;\r\n    }\r\n\r\n    send(name , value){\r\n\r\n        let me = this,\r\n        {\r\n            message\r\n        } = me ;\r\n\r\n        message.send(me.getFullAddress(name) , value) ;\r\n    }\r\n\r\n    start(value , name = 'start'){\r\n\r\n        let me = this ;\r\n\r\n        let {\r\n            started\r\n        } = me ;\r\n\r\n        if(!started){\r\n\r\n            me.started = true ;\r\n\r\n            let {\r\n                methods\r\n            } = me ;\r\n\r\n            message.subscribes({\r\n                ...methods,\r\n                connectionId:me.flowId = generate('flow-')\r\n            }) ;\r\n\r\n            me.send(name , value) ;\r\n        \r\n        }else{\r\n\r\n            me.end() ;\r\n\r\n            me.start(value , name) ;\r\n        }\r\n    }\r\n\r\n    end(){\r\n\r\n        let me = this,\r\n        {\r\n            started\r\n        } = me;\r\n\r\n        if(started){\r\n\r\n            let {\r\n                message,\r\n                methodNames,\r\n                flowId\r\n            } = me ;\r\n    \r\n            message.unsubscribes(methodNames , flowId) ;\r\n    \r\n            me.started = false ;\r\n        }\r\n    }\r\n\r\n    next(name , value){\r\n\r\n        let me = this,\r\n        {\r\n            flows,\r\n            message\r\n        } = me,\r\n        next = flows[name];\r\n    \r\n        if(isString(next)){\r\n\r\n            me.send(next , value) ;\r\n        \r\n        }else if(isObject(next)){\r\n\r\n            let {\r\n                external,\r\n                next:from\r\n            } = next ;\r\n\r\n            message.send({\r\n                from:me.getFullAddress(from),\r\n                to:external\r\n            } , value) ;\r\n\r\n        }else if(isArray(next)){\r\n\r\n            let defaultNext ;\r\n\r\n            for(let {\r\n                value:caseValue,\r\n                type,\r\n                next:caseNext\r\n            } of next){\r\n\r\n                if(!isDefined(caseValue) && !isDefined(type)){\r\n\r\n                    defaultNext = caseNext ;\r\n\r\n                    continue ;\r\n                }\r\n\r\n                if(type){\r\n\r\n                    if(typeof value === type){\r\n\r\n                        me.send(caseNext , value) ;\r\n\r\n                        break ;\r\n                    }\r\n\r\n                    continue ;\r\n                }\r\n\r\n                if(caseValue === value){\r\n\r\n                    me.send(caseNext , value) ;\r\n\r\n                    break ;\r\n                }\r\n            }\r\n\r\n            if(defaultNext){\r\n\r\n                me.send(defaultNext , value) ;\r\n            }\r\n\r\n        }\r\n    }\r\n }\n\n            var_class_1609121324616 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324616 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.flow' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324616 ;\n        \nvar_global_main_1609121324616 = main;\n\n            var_init_locked_1609121324616 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121324616(message , flows , methods , callback , scoped) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.flow"
  },
  "src::promise.create.processive": {
    "meta": "code.meta.script.function",
    "signature": "<promise.Processive> src::promise.create.processive(<function> onInit , <function> onCancel)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::array.remove",
      "src::array.includes",
      "src::is.empty",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,remove,includes,isEmpty,isDefined;\n    \n                    let var_init_locked_1609121324696;\n    \n                    let var_class_1609121324696;\n    \n                    \n\n                    let var_global_main_1609121324696 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324696){\n\n            isFunction = include('src::is.function');\nremove = include('src::array.remove');\nincludes = include('src::array.includes');\nisEmpty = include('src::is.empty');\nisDefined = include('src::is.defined');\n\n            \r\n/**\r\n * \r\n * 创建持续性 Promise\r\n * \r\n * @import is.function\r\n * \r\n * @import remove from array.remove\r\n * \r\n * @import includes from array.includes\r\n * \r\n * @import is.empty\r\n * \r\n * @import is.defined\r\n * \r\n * @param {function} onInit 实始化 Promise 引用\r\n * \r\n * @param {function} onCancel 取消 Promise 时调用\r\n * \r\n * @class\r\n * \r\n * @return {promise.Processive} 持续性 Promise \r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(onInit , onCancel){\r\n\r\n        let me = this ;\r\n\r\n        me.resolveCallbacks = [] ;\r\n\r\n        me.rejectCallbacks = [] ;\r\n\r\n        let {\r\n            resolve,\r\n            reject\r\n        } = me ;\r\n\r\n       me.onCancelResult = onInit(resolve.bind(me) , reject.bind(me)) ;\r\n\r\n       me.onCancel = onCancel ;\r\n    }\r\n\r\n    async cancel(callback){\r\n\r\n        let {\r\n            onCancelResult,\r\n            onCancel,\r\n            resolveCallbacks\r\n        } = this ;\r\n\r\n        if(isFunction(callback)){\r\n\r\n            if(includes(resolveCallbacks , callback)){\r\n\r\n                remove(resolveCallbacks , callback) ;\r\n            }\r\n\r\n            if(isEmpty(resolveCallbacks)){\r\n\r\n                await onCancel(onCancelResult) ;\r\n            }\r\n        \r\n        }else{\r\n\r\n            await onCancel(onCancelResult) ;\r\n        }\r\n    }\r\n\r\n    resolve(data){\r\n\r\n        let {\r\n            resolveCallbacks\r\n        } = this;\r\n\r\n        for(let resolveCallback of resolveCallbacks){\r\n\r\n            let result = resolveCallback(data) ;\r\n\r\n            if(isDefined(result)){\r\n\r\n                data = result ;\r\n            }\r\n        }\r\n    }\r\n\r\n    reject(error){\r\n\r\n        let {\r\n            rejectCallbacks\r\n        } = this ;\r\n\r\n        for(let rejectCallback of rejectCallbacks){\r\n\r\n            rejectCallback(error) ;\r\n        }\r\n    }\r\n\r\n    then(callback){\r\n\r\n        let me = this,\r\n        {\r\n            resolveCallbacks\r\n        } = me;\r\n\r\n        resolveCallbacks.push(callback) ;\r\n\r\n        return me ;\r\n    }\r\n\r\n    catch(callback){\r\n\r\n        let me = this,\r\n        {\r\n            rejectCallbacks\r\n        } = me;\r\n\r\n        rejectCallbacks.push(callback) ;\r\n\r\n        return me ;\r\n    }\r\n }\n\n            var_class_1609121324696 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324696 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::promise.create.processive' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324696 ;\n        \nvar_global_main_1609121324696 = main;\n\n            var_init_locked_1609121324696 = true ;\n        }\n        \n    \n                        return var_global_main_1609121324696 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "promise.create.processive"
  },
  "src::is.promise.processive": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.promise.processive(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::promise.create.processive"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let ProcessivePromise;\n    \n                    let var_init_locked_1609121324662;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定是否为持续 Promise 对象\r\n * \r\n * @import ProcessivePromise from promise.create.processive value\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {boolean}  如果为持续 Promise 对象，则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return data instanceof ProcessivePromise ;\r\n \n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121324662){\n\n            ProcessivePromise = include('src::promise.create.processive')();\n\n            var_init_locked_1609121324662 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.promise.processive"
  },
  "src::is.promise.native": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.promise.native(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断数据是否为原始 Promise 对象\r\n * \r\n * @param {mixed} data 测试数据\r\n * \r\n * @return {boolean} 如果是 Promise 则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return data instanceof Promise ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.promise.native"
  },
  "src::is.promise": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.promise(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.promise.processive",
      "src::is.promise.native"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isProcessive,isNative;\n    \n                    let var_init_locked_1609121324641;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断数据是否为 Promise 对象\r\n * \r\n * @import isProcessive from .promise.processive\r\n * \r\n * @import isNative from .promise.native\r\n * \r\n * @param {mixed} data 测试数据\r\n * \r\n * @return {boolean} 如果是 Promise 则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return isNative(data) || isProcessive(data);\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121324641){\n\n            isProcessive = include('src::is.promise.processive');\nisNative = include('src::is.promise.native');\n\n            var_init_locked_1609121324641 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.promise"
  },
  "src::data.connection.message.address": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.message.address(<string> name , <object> options)",
    "standard": true,
    "importNames": [
      "src::data.Subscriber",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Subscriber,isDefined;\n    \n                    let var_init_locked_1609121324749;\n    \n                    let var_class_1609121324749;\n    \n                    \n\n                    let var_global_main_1609121324749 ;\n    \n                    return function(name , options){\n    \n                        \n        if(!var_init_locked_1609121324749){\n\n            Subscriber = include('src::data.Subscriber')();\nisDefined = include('src::is.defined');\n\n            \r\n/**\r\n * \r\n * 消息地址\r\n * \r\n * @import Subscriber from data.Subscriber value\r\n * \r\n * @import is.defined\r\n * \r\n * @param {string} name 消息地址\r\n * \r\n * @param {object} options 消息配置\r\n * \r\n */\r\n\r\n class main extends Subscriber{\r\n\r\n    send(to , data){\r\n\r\n        let me = this ;\r\n\r\n        me.fireEvent('send' , {\r\n            from:me.name,\r\n            to,\r\n            data\r\n        }) ;\r\n    }\r\n\r\n    accept(data){\r\n\r\n        let me = this,\r\n            result = super.accept(data),\r\n            {\r\n                from\r\n            } = data;\r\n\r\n        if(from){\r\n\r\n            if(isDefined(result)){\r\n\r\n                if(result instanceof Promise){\r\n\r\n                    result.then(data => me.send(from , data)) ;\r\n                \r\n                }else{\r\n\r\n                    me.send(from , result) ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n }\r\n\r\n \n\n            var_class_1609121324749 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324749 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.message.address' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324749 ;\n        \nvar_global_main_1609121324749 = main;\n\n            var_init_locked_1609121324749 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121324749(name , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.message.address"
  },
  "src::data.Subscriber.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.constructor(<data.connection> connection , <string> name , {<string> fullName , <function> processData , <object> listeners , <mixed> params , <boolean> autoOpen , <object> extraParams , <object> defaultParams , <function> fn , <boolean> once , <mixed> scope , <string> namespace , <function> processAcceptData , <function> cacheAcceptData , <function> getCacheData})",
    "standard": true,
    "importNames": [
      "src::function.get",
      "src::event.listener.add",
      "src::function.empty",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,add,emptyFn,from;\n    \n                    let var_init_locked_1609121324793;\n    \n                    \n\n                    function main(connection , name , {fullName , processData , listeners , params , autoOpen , extraParams , defaultParams , fn , once , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}){\n\n        /**\r\n * \r\n * 初始化订阅器\r\n * \r\n * @import get from function.get\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {data.connection} connection 当前订阅器所在的连接对象\r\n * \r\n * @param {string} name 订阅名称\r\n * \r\n * @param {object} config 订阅器配置\r\n * \r\n * @param {string} config.fullName 订阅器全称\r\n * \r\n * @param {function} [config.processData] 处理数据方法\r\n *  \r\n * @param {object} [config.listeners = {}] 来自古地外部事件监听\r\n * \r\n * @param {mixed} [config.params] 默认打开的订阅参数\r\n * \r\n * @param {boolean} [config.autoOpen = true] 是否自动打开订阅器\r\n * \r\n * @param {object} [config.extraParams = {}] 附加参数\r\n * \r\n * @param {object} [config.defaultParams = {}] 默认参数\r\n * \r\n * @param {function} config.fn 订阅函数\r\n * \r\n * @param {boolean} [config.once = false] 仅订阅一次即取消\r\n * \r\n * @param {mixed} [config.scope] 订阅函数作用域\r\n * \r\n * @param {string} [config.namespace] 命名空间\r\n * \r\n * @param {function} [config.processAcceptData] 处理接收数据的方法\r\n * \r\n * @param {function} [config.cacheAcceptData] 缓存接收数据方法\r\n * \r\n * @param {function} [config.getCacheData] 获取缓存数据 \r\n * \r\n */\r\n\r\n\r\nlet me = this ;\r\n\r\nme.name = name ;\r\n\r\nme.fullName = fullName ;\r\n\r\nme.connection = connection ;\r\n\r\nme.$bubbleTarget = connection ;\r\n\r\nme.processData = processData || (({\r\n    data\r\n}) => data) ;\r\n\r\nme.cacheAcceptData = cacheAcceptData ||  emptyFn;\r\n\r\nme.processAcceptData = processAcceptData || (data => data) ;\r\n\r\nme.getCacheData = getCacheData || (data => data) ;\r\n\r\nme.extraParams = extraParams ;\r\n\r\nme.defaultParams = defaultParams ;\r\n\r\nme.bindFn = get(fn , scope) || emptyFn;\r\n\r\nadd(me , {\r\n    ...listeners,\r\n    scope\r\n}) ;\r\n\r\nif(autoOpen){\r\n\r\n    me.open(params) ;\r\n}\r\n\r\nif(once === true){\r\n\r\n    add(me , 'data' , () => connection.unsubscribe(name , namespace) , {\r\n        once:true\r\n    }) ;\r\n}\r\n\n\n    }\n    \n                    return function(connection , name , {fullName , processData , listeners = {} , params , autoOpen = true , extraParams = {} , defaultParams = {} , fn , once = false , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}){\n    \n                        \n        if(!var_init_locked_1609121324793){\n\n            get = include('src::function.get');\nadd = include('src::event.listener.add');\nemptyFn = include('src::function.empty')();\nfrom = include('src::array.from');\n\n            var_init_locked_1609121324793 = true ;\n        }\n        \n    \n                        return main.call(this , connection , name , {fullName , processData , listeners , params , autoOpen , extraParams , defaultParams , fn , once , scope , namespace , processAcceptData , cacheAcceptData , getCacheData}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.constructor"
  },
  "src::data.Subscriber.accept.data": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.Subscriber.accept.data(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121324840;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 将推送数据传递给绑定函数\r\n * \r\n * @import is.defined\r\n * \r\n * @param {mixed} data 推送过来的数据\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    bindFn,\r\n    closed,\r\n    params,\r\n    cache,\r\n    getCacheData\r\n } = me ;\r\n\r\n if(!closed){\r\n\r\n   if(isDefined(cache)){\r\n\r\n      bindFn(getCacheData(cache) , params) ;\r\n   \r\n   }else{\r\n\r\n      bindFn(data , params) ;\r\n   }\r\n\r\n   me.fireEvent('data' , data , params) ;\r\n }\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121324840){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121324840 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.accept.data"
  },
  "src::data.Subscriber.accept": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.accept(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::data.Subscriber.accept.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121324816;\n \n                    \n\n                    const var_current_scope_1609121324816 = new Map();\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121324816){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121324816 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121324816.has(this)){\n\n            var_current_scope_1609121324816.set(this , (() => {\n                const setData = include('src::data.Subscriber.accept.data').bind(this);\n\n                function main(data){\n\n        \r\n/**\r\n * \r\n * 接收数据\r\n * \r\n * @import is.defined\r\n * \r\n * @import setData from .accept.data scoped\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    closed,\r\n    cache,\r\n    processAcceptData,\r\n    cacheAcceptData\r\n} = me;\r\n\r\nif(closed){\r\n\r\n    return;\r\n}\r\n\r\ndata = processAcceptData(data) ;\r\n\r\nif(isDefined(data)){\r\n\r\n    me.cache = cacheAcceptData(data , cache) ;\r\n\r\n    setData(data) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121324816.get(this) ;\n\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.accept"
  },
  "src::data.Subscriber.reopen": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.reopen()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 重新打开订阅器\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    closed,\r\n    params\r\n} = me ;\r\n\r\nif(!closed){\r\n\r\n    me.close() ;\r\n\r\n    me.open(params) ;\r\n}\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.reopen"
  },
  "src::data.Subscriber.open": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.open(<object> params)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::data.equals",
      "src::object.assign",
      "src::data.Subscriber.accept.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined,equals,assign;\n    \n                    let var_init_locked_1609121324875;\n \n                    \n\n                    const var_current_scope_1609121324875 = new Map();\n    \n                    return function(params = {}){\n    \n                        \n        if(!var_init_locked_1609121324875){\n\n            isDefined = include('src::is.defined');\nequals = include('src::data.equals');\nassign = include('src::object.assign');\n\n            var_init_locked_1609121324875 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121324875.has(this)){\n\n            var_current_scope_1609121324875.set(this , (() => {\n                const setData = include('src::data.Subscriber.accept.data').bind(this);\n\n                function main(params){\n\n        \r\n/**\r\n * \r\n * 打开订阅器\r\n * \r\n * @import is.defined\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import setData from .accept.data scoped\r\n * \r\n * @param {object} [params = {}] 订阅参数\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    name,\r\n    extraParams,\r\n    defaultParams,\r\n    params:oldParams,\r\n    connection\r\n} = me ;\r\n\r\nparams = assign({} , defaultParams , params , extraParams) ;\r\n\r\nif(!oldParams || !equals(params , oldParams)){\r\n\r\n    me.close() ;\r\n\r\n    me.params = params ;\r\n    \r\n    me.fireEvent('open' , params , oldParams) ;\r\n\r\n    let subscriber = connection.findOpenedSubscriberByName(name , me) ;\r\n\r\n    if(subscriber){\r\n\r\n        let {\r\n            cache\r\n        } = subscriber ;\r\n\r\n        if(isDefined(cache)){\r\n\r\n            me.cache = cahce ;\r\n\r\n            setData() ;\r\n        }\r\n    }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121324875.get(this) ;\n\n        \n    \n                        return main.call(this , params) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.open"
  },
  "src::data.Subscriber.close": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.close()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 关闭订阅器\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    params,\r\n    closed\r\n} = me;\r\n\r\nif(closed){\r\n\r\n    return ;\r\n}\r\n\r\nme.prevParams = me.params ;\r\n\r\ndelete me.params ;\r\n\r\ndelete me.cache ;\r\n\r\nme.fireEvent('close' , params) ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.close"
  },
  "src::data.Subscriber.destroy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.Subscriber.destroy()",
    "standard": true,
    "importNames": [
      "src::event.listener.remove.all"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let removeAll;\n    \n                    let var_init_locked_1609121324902;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 销毁\r\n * \r\n * @import removeAll from event.listener.remove.all\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    connection\r\n} = me;\r\n\r\nme.close() ;\r\n\r\ndelete me.bindFn ;\r\n\r\ndelete me.extraParams ;\r\n\r\ndelete me.defaultParams ;\r\n\r\nme.fireEvent('destroy') ;\r\n\r\nremoveAll(me) ;\r\n\r\nconnection.subscribers.delete(me.fullName) ;\r\n\r\ndelete me.fullName ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324902){\n\n            removeAll = include('src::event.listener.remove.all');\n\n            var_init_locked_1609121324902 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber.destroy"
  },
  "src::data.Subscriber": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.Subscriber()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::data.Subscriber.constructor",
      "src::data.subscriber.closed",
      "src::data.subscriber.open.prev",
      "src::data.Subscriber.accept",
      "src::data.Subscriber.reopen",
      "src::data.Subscriber.open",
      "src::data.Subscriber.close",
      "src::data.Subscriber.destroy",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1609121324773__1,extend,constructor,get_closed,method_prevOpen,method_accept,method_reopen,method_open,method_close,method_destroy,isObject;\n    \n                    let var_init_locked_1609121324773;\n    \n                    let var_class_1609121324773;\n    \n                    \n\n                    let var_global_main_1609121324773 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324773){\n\n            mixin_1609121324773__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::data.Subscriber.constructor');\nget_closed = include('src::data.subscriber.closed');\nmethod_prevOpen = include('src::data.subscriber.open.prev');\nmethod_accept = include('src::data.Subscriber.accept');\nmethod_reopen = include('src::data.Subscriber.reopen');\nmethod_open = include('src::data.Subscriber.open');\nmethod_close = include('src::data.Subscriber.close');\nmethod_destroy = include('src::data.Subscriber.destroy');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            prevOpen(...args){\n\n            return method_prevOpen.apply(this , args) ;\n\n        }\naccept(...args){\n\n            return method_accept.apply(this , args) ;\n\n        }\nreopen(...args){\n\n            return method_reopen.apply(this , args) ;\n\n        }\nopen(...args){\n\n            return method_open.apply(this , args) ;\n\n        }\nclose(...args){\n\n            return method_close.apply(this , args) ;\n\n        }\ndestroy(...args){\n\n            return method_destroy.apply(this , args) ;\n\n        }\n\n            get closed(){\n\n                return get_closed.call(this) ;\n    \n            }\n\n        }\n\n            var_class_1609121324773 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324773 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.Subscriber' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324773 ;\n        \nvar_global_main_1609121324773 = main;\n\n            var_init_locked_1609121324773 = true ;\n        }\n        \n    \n                        return var_global_main_1609121324773 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.Subscriber"
  },
  "src::data.connection.message": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.message()",
    "standard": true,
    "importNames": [
      "src::data.connection",
      "src::is.object.simple",
      "src::is.string",
      "src::data.connection.message.address",
      "src::is.defined",
      "src::object.assign",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Connection,isObject,isString,createAddress,isDefined,assign,from;\n    \n                    let var_init_locked_1609121324931;\n    \n                    let var_class_1609121324931;\n    \n                    \n\n                    let var_global_main_1609121324931 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324931){\n\n            Connection = include('src::data.connection')();\nisObject = include('src::is.object.simple');\nisString = include('src::is.string');\ncreateAddress = include('src::data.connection.message.address');\nisDefined = include('src::is.defined');\nassign = include('src::object.assign');\nfrom = include('src::array.from');\n\n            /**\r\n * \r\n * 消息订阅\r\n * \r\n * @import Connection from data.connection value\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import createAddress from data.connection.message.address\r\n * \r\n * @import is.defined\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import from from array.from\r\n * \r\n * @singleton\r\n * \r\n */\r\n\r\n const exactAddressRe = /^[^<>]+<[^<>]+>$/ ;\r\n\r\n class main extends Connection{\r\n\r\n    constructor(){\r\n\r\n        super({\r\n            subscriber:createAddress\r\n        }) ;\r\n\r\n        this.resendMessages = [] ;\r\n    }\r\n\r\n    processMessage(message){\r\n\r\n        return message ;\r\n    }\r\n\r\n    processData(subscriber , {\r\n        from,\r\n        data\r\n    }){\r\n\r\n        return {\r\n            from,\r\n            data\r\n        } ;\r\n    }\r\n\r\n    hasAddress(name){\r\n\r\n        let {\r\n            subscribers\r\n        } = this ;\r\n\r\n        return subscribers.has(name) ;\r\n    }\r\n\r\n    validateMessage({\r\n        name\r\n    },{\r\n        to\r\n    }){\r\n\r\n        return to.test(name) ;\r\n    }\r\n\r\n    get subscriberListeners(){\r\n\r\n        return {\r\n            ...super.subscriberListeners,\r\n            send:'onMessageSend'\r\n        } ;\r\n    }\r\n\r\n    onMessageSend(address , message){\r\n\r\n        this.send(message) ;\r\n    }\r\n\r\n    onCreateSubscriber(){\r\n\r\n        let me = this,{\r\n            resendMessages\r\n        } = me,\r\n        messages = from(resendMessages);\r\n\r\n        resendMessages.length = 0 ;\r\n\r\n        for(let message of messages){\r\n\r\n            me.send(message) ;\r\n        }\r\n    }\r\n\r\n    send(address , data){\r\n\r\n        if(isString(address)){\r\n\r\n            address = {\r\n                to:address,\r\n                data\r\n            } ;\r\n        }\r\n\r\n        if(isObject(address)){\r\n\r\n            if(!address.hasOwnProperty('data')){\r\n\r\n                address = {\r\n                    ...address,\r\n                    data\r\n                } ;\r\n            }\r\n\r\n            address.getResendMessages = address.getResendMessages || default_get_resend_messages ;\r\n\r\n            let {\r\n                to,\r\n                getResendMessages\r\n            } = address ;\r\n\r\n            if(isString(to)){\r\n\r\n                if(exactAddressRe.test(to)){\r\n\r\n                    to = new RegExp(to) ;\r\n                \r\n                }else{\r\n    \r\n                    to = new RegExp(`^${to}(?:<[^<>]+>)?$`) ;\r\n                }\r\n            }\r\n\r\n            if(to instanceof RegExp){\r\n\r\n                address.to = to ;\r\n\r\n                let {\r\n                        reSendMessages\r\n                    } = this;\r\n\r\n                reSendMessages.push(...from(getResendMessages(address , me.acceptMessage(address)))) ;\r\n            }\r\n        }\r\n    }\r\n }\r\n\r\n function default_get_resend_messages(message , subscribers){\r\n\r\n    if(subscribers.length !== 0){\r\n\r\n        return message ;\r\n    }\r\n }\n\n            var_class_1609121324931 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324931 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.message' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324931 ;\n        \nvar_global_main_1609121324931 = main;\n\n            var_init_locked_1609121324931 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121324931() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.message"
  },
  "src::data.connection.socket.io": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket.io()",
    "standard": true,
    "importNames": [
      "src::data.connection.socket",
      "src::event.listener.add",
      "src::socket.io.ws",
      "src::data.connection.socket.manager",
      "src::event.listener.remove.all"
    ],
    "dependentModules": {
      "socket.io-client": "2.3.0"
    },
    "data": "(() =>{\n\n                    let Connection,add,getWS,Manager,removeAll;\n    \n                    let var_init_locked_1609121324967;\n    \n                    let var_class_1609121324967;\n    \n                    \n\n                    let var_global_main_1609121324967 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121324967){\n\n            Connection = include('src::data.connection.socket')();\nadd = include('src::event.listener.add');\ngetWS = include('src::socket.io.ws');\nManager = include('src::data.connection.socket.manager')();\nremoveAll = include('src::event.listener.remove.all');\n\n            /**\r\n * \r\n * 基于 socket.io 标准进行开发\r\n * \r\n * @import Connection from data.connection.socket value\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import getWS from socket.io.ws\r\n * \r\n * @import Manager from .manager value\r\n * \r\n * @import removeAll from event.listener.remove.all\r\n * \r\n * @require socket.io-client\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n const IO = require('socket.io-client') ;\r\n\r\n class main extends Connection{\r\n\r\n    initialize(url , options){\r\n\r\n       let me = this ;\r\n\r\n       me.socketURL = url ;\r\n\r\n       me.socketOptions = options ;\r\n    }\r\n\r\n    get socket(){\r\n\r\n        let {\r\n            io\r\n        } = this ;\r\n\r\n        if(io){\r\n\r\n            return getWS(this.io) ;\r\n        }\r\n    }\r\n\r\n    onSocketTimeout(){\r\n\r\n        this.fireEvent('connecttimeout') ;\r\n    }\r\n\r\n    onSocketMessage(...args){\r\n\r\n        this.acceptMessage(...args) ;\r\n    }\r\n\r\n    onSocketDisconnect(){\r\n\r\n        let me = this,\r\n            {\r\n                isDisconnected,\r\n                socket\r\n            } = me ;\r\n\r\n        if(!isDisconnected && socket){\r\n\r\n            add(socket , 'close' , 'onSocketDisconnect' , {\r\n                scope:me,\r\n                once:true\r\n            }) ;\r\n        \r\n        }else{\r\n\r\n            let me = this,\r\n            {\r\n                disconnectingState,\r\n                io\r\n            } = me ;\r\n\r\n            removeAll(io) ;\r\n\r\n            delete me.io ;\r\n\r\n            delete me.disconnectingState ;\r\n\r\n            if(disconnectingState){\r\n\r\n                me.fireEvent('disconnect') ;\r\n            \r\n            }else{\r\n\r\n                me.fireEvent('lostconnect') ;\r\n            }\r\n        }\r\n    }\r\n\r\n    onSocketError(){\r\n\r\n        let me = this,\r\n        {\r\n            isDisconnected,\r\n            onSocketError\r\n        } = me;\r\n\r\n        if(isDisconnected){\r\n\r\n            me.onSocketDisconnect() ;\r\n        \r\n        }else{\r\n\r\n            setTimeout(onSocketError.bind(me) , 0) ;\r\n        }\r\n    }\r\n\r\n    onSocketConnect(){\r\n\r\n        this.fireEvent('connect') ;\r\n    }\r\n\r\n    doConnect(){\r\n\r\n        let me = this,\r\n        {\r\n            socketURL,\r\n            socketOptions,\r\n            messageEventName,\r\n            subscribeResponseEventName\r\n        } = me;\r\n\r\n        add(me.io = IO(socketURL , {\r\n            forceNew: true,\r\n            transports: [\r\n                'websocket'\r\n            ],\r\n            reconnection:false,\r\n            ...socketOptions\r\n        }) , {\r\n            connect_error:'onSocketError',\r\n            connect:'onSocketConnect',\r\n            disconnect:'onSocketDisconnect',\r\n            connect_timeout:'onSocketTimeout',\r\n            [messageEventName]:'onSocketMessage',\r\n            [subscribeResponseEventName]:'onSocketSubscribeResponse',\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    onSocketSubscribeResponse(){\r\n\r\n\r\n    }\r\n\r\n    doDisconnect(){\r\n\r\n        this.io.disconnect() ;\r\n    }\r\n\r\n    get subscribeEventName(){\r\n\r\n        return 'sub'\r\n    }\r\n\r\n    get messageEventName(){\r\n\r\n        return 'msg' ;\r\n    }\r\n\r\n\r\n    get subscribeResponseEventName(){\r\n\r\n        return 'subresp' ;\r\n    }\r\n\r\n    get unsubscribeEventName(){\r\n\r\n        return 'unsub' ;\r\n    }\r\n\r\n    emit(event , ...params){\r\n\r\n        let me = this,\r\n        {\r\n            isConnected,\r\n            io\r\n        } = me ;\r\n\r\n        if(isConnected){\r\n\r\n            io.emit(event , ...params) ;\r\n        }\r\n        \r\n    }\r\n\r\n    doSubscriberOpen(...args){\r\n\r\n        let me = this,\r\n        {\r\n            subscribeEventName\r\n        } = me ;\r\n\r\n        me.emit(subscribeEventName , ...args) ;\r\n    }\r\n\r\n    doSubscriberClose(...args){\r\n\r\n        let me = this,\r\n        {\r\n            unsubscribeEventName\r\n        } = me ;\r\n\r\n        me.emit(unsubscribeEventName , ...args) ;\r\n    }\r\n }\n\n            var_class_1609121324967 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121324967 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket.io' ;\n                }\n\n            } ;\n\n            main = var_class_1609121324967 ;\n        \nvar_global_main_1609121324967 = main;\n\n            var_init_locked_1609121324967 = true ;\n        }\n        \n    \n                        return var_global_main_1609121324967 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket.io"
  },
  "src::socket.io.ws": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::socket.io.ws(<mixed> socket)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(socket){\n\n        \r\n/**\r\n * \r\n * 获取 socket.io 内置的 socket 原生对象\r\n * \r\n * @param {mixed} socket socket.io 对象\r\n * \r\n * @return {mixed} 原生 socket 对象 \r\n * \r\n */\r\n\r\n let {\r\n    engine\r\n } = socket.io ;\r\n\r\n if(engine){\r\n\r\n    return engine.transport.ws ;\r\n }\n\n    }\n    \n                    return function(socket){\n    \n                        \n    \n                        return main.call(this , socket) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "socket.io.ws"
  },
  "src::data.connection.socket.standard.miniprogram": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket.standard.miniprogram()",
    "standard": true,
    "importNames": [
      "src::data.connection.socket.standard",
      "src::miniprogram.socket"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Connection,WebSocket;\n    \n                    let var_init_locked_1609121325028;\n    \n                    let var_class_1609121325028;\n    \n                    \n\n                    let var_global_main_1609121325028 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325028){\n\n            Connection = include('src::data.connection.socket.standard')();\nWebSocket = include('src::miniprogram.socket')();\n\n            /**\r\n * \r\n * 基于小程序进行开发\r\n * \r\n * @import Connection from data.connection.socket.standard value\r\n *\r\n * @import WebSocket from miniprogram.socket value\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n class main extends Connection{\r\n\r\n    get WebSocket(){\r\n\r\n        return WebSocket ;\r\n    }\r\n }\n\n            var_class_1609121325028 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325028 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket.standard.miniprogram' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325028 ;\n        \nvar_global_main_1609121325028 = main;\n\n            var_init_locked_1609121325028 = true ;\n        }\n        \n    \n                        return var_global_main_1609121325028 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket.standard.miniprogram"
  },
  "src::is.url.absolute": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.url.absolute(<string> url)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(url){\n\n        \r\n/**\r\n * \r\n * 判断当前链接是否为绝对路径\r\n * \r\n * @param {string} url 链接路径\r\n * \r\n * @return {boolean} 如果链接为绝对路径则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn /^https?\\:\\/{2}/.test(url) ;\r\n\n\n    }\n    \n                    return function(url){\n    \n                        \n    \n                        return main.call(this , url) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.url.absolute"
  },
  "src::url.join": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::url.join(<string[]> ...urls)",
    "standard": true,
    "importNames": [
      "src::is.url.absolute"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isAbsolute;\n    \n                    let var_init_locked_1609121325089;\n    \n                    \n\n                    /**\r\n * \r\n * 将多个链接进行拼接并返回\r\n * \r\n * @import isAbsolute from is.url.absolute\r\n * \r\n * @param {string[]} [...urls] 多个 URL 链接\r\n * \r\n * @return {string} 拼接后的拼接\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nconst urlSuffixRe = /^\\/|\\/$/ ;\r\n\r\nfunction main(...urls){\r\n\r\n    let len = urls.length,\r\n        i = 0,\r\n        result = [];\r\n\r\n    for(; i < len ; i ++){\r\n\r\n        let part = urls[i] || '';\r\n\r\n        part = part.replace(urlSuffixRe , '') ;\r\n\r\n        if(isAbsolute(part)){\r\n\r\n            result.length = 0 ;\r\n\r\n            result.push(part) ;\r\n        \r\n        }else if(part){\r\n\r\n            result.push(part) ;\r\n        }\r\n    }\r\n\r\n    return result.join('/') ;\r\n}\r\n\r\n\r\n\r\n\n    \n                    return function(...urls){\n    \n                        \n        if(!var_init_locked_1609121325089){\n\n            isAbsolute = include('src::is.url.absolute');\n\n            var_init_locked_1609121325089 = true ;\n        }\n        \n    \n                        return main.call(this , ...urls) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "url.join"
  },
  "src::timer.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::timer.constructor({<number> interval , <number> duration , <boolean> autoStart})",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main({interval , duration , autoStart}){\n\n        \r\n/**\r\n * \r\n * 初始化计时器\r\n * \r\n * @param {object} [config = {}] 参数\r\n * \r\n * @param {number} [config.interval = 1000] time 触发周期时长，默认为一秒种 \r\n * \r\n * @param {number} [config.duration = 60000] 计时时长，默认为一分钟\r\n * \r\n * @param {boolean} [config.autoStart = true] 是否自动启动，默认为自动启动\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\nme.interval = interval ;\r\n\r\nme.duration = duration ;\r\n\r\nif(autoStart){\r\n\r\n    me.start() ;\r\n}\n\n    }\n    \n                    return function({interval = 1000 , duration = 60000 , autoStart = true} = {}){\n    \n                        \n    \n                        return main.call(this , {interval , duration , autoStart}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "timer.constructor"
  },
  "src::timer.reset": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::timer.reset()",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121325201;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 重置\r\n * \r\n * @import is.defined\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    intervalId\r\n } = me ;\r\n\r\n if(isDefined(intervalId)){\r\n\r\n    clearInterval(intervalId) ;\r\n\r\n    clearTimeout(intervalId) ;\r\n\r\n    delete me.intervalId ;\r\n\r\n    delete me.onInterval ;\r\n }\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325201){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121325201 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "timer.reset"
  },
  "src::timer.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::timer.end()",
    "standard": true,
    "importNames": [
      "src::timer.reset"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121325185 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121325185.has(this)){\n\n            var_current_scope_1609121325185.set(this , (() => {\n                const reset = include('src::timer.reset').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 结束计时\r\n * \r\n * @import reset from .reset scoped\r\n *\r\n */\r\n\r\n reset() ;\r\n \r\n this.fireEvent('timeend') ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325185.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "timer.end"
  },
  "src::timer.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::timer.start()",
    "standard": true,
    "importNames": [
      "src::is.number",
      "src::timer.end",
      "src::timer.reset"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber,reset;\n    \n                    let var_init_locked_1609121325170;\n \n                    \n\n                    const var_current_scope_1609121325170 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325170){\n\n            isNumber = include('src::is.number');\nreset = include('src::timer.reset');\n\n            var_init_locked_1609121325170 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121325170.has(this)){\n\n            var_current_scope_1609121325170.set(this , (() => {\n                const end = include('src::timer.end').bind(this);\n\n                \r\n/**\r\n * \r\n * 启动计时\r\n * \r\n * @import is.number\r\n * \r\n * @import end from .end scoped\r\n * \r\n * @import reset from .reset\r\n * \r\n */\r\n\r\nfunction onInterval(duration , startTime){\r\n\r\n    let me = this,\r\n    {\r\n        interval,\r\n        onInterval\r\n    } = me,\r\n    remainDuration = duration - (Date.now() - startTime) ;\r\n\r\n    if(remainDuration > 0){\r\n    \r\n        me.fireEvent('time') ;\r\n\r\n        if(remainDuration < interval){\r\n\r\n            reset.call(me) ;\r\n\r\n            me.intervalId = setTimeout(onInterval , remainDuration) ;\r\n        }\r\n    \r\n    }else{\r\n\r\n        reset.call(me) ;\r\n\r\n        me.fireEvent('timeout') ;\r\n    }\r\n }\r\n\r\nfunction main(){\r\n\r\n    let me = this,\r\n    {\r\n        interval,\r\n        duration\r\n    } = me;\r\n\r\n    end() ;\r\n\r\n    me.fireEvent('timestart') ;\r\n\r\n    me.intervalId = setInterval(me.onInterval = onInterval.bind(me , duration , Date.now()) , interval) ;\r\n}\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325170.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "timer.start"
  },
  "src::timer": {
    "meta": "code.meta.class",
    "signature": "<void> src::timer(<mixed> config)",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::timer.constructor",
      "src::timer.start",
      "src::timer.end",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1609121325132__1,extend,constructor,method_start,method_end,isObject;\n    \n                    let var_init_locked_1609121325132;\n    \n                    let var_class_1609121325132;\n    \n                    \n\n                    let var_global_main_1609121325132 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121325132){\n\n            mixin_1609121325132__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::timer.constructor');\nmethod_start = include('src::timer.start');\nmethod_end = include('src::timer.end');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            start(...args){\n\n            return method_start.apply(this , args) ;\n\n        }\nend(...args){\n\n            return method_end.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121325132 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325132 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::timer' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325132 ;\n        \nvar_global_main_1609121325132 = main;\n\n            var_init_locked_1609121325132 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121325132(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "timer"
  },
  "src::data.connection.socket.standard": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket.standard()",
    "standard": true,
    "importNames": [
      "src::data.connection.socket",
      "src::url.join",
      "src::timer",
      "src::event.listener.add",
      "src::event.listener.remove.all",
      "src::data.connection.socket.manager",
      "src::function.empty"
    ],
    "dependentModules": {
      "ws": "^7.1.2"
    },
    "data": "(() =>{\n\n                    let Connection,join,createTimer,add,removeAll,Manager,emptyFn;\n    \n                    let var_init_locked_1609121325065;\n    \n                    let var_class_1609121325065;\n    \n                    \n\n                    let var_global_main_1609121325065 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325065){\n\n            Connection = include('src::data.connection.socket')();\njoin = include('src::url.join');\ncreateTimer = include('src::timer');\nadd = include('src::event.listener.add');\nremoveAll = include('src::event.listener.remove.all');\nManager = include('src::data.connection.socket.manager')();\nemptyFn = include('src::function.empty')();\n\n            /**\r\n * \r\n * 标准推送\r\n * \r\n * @import Connection from data.connection.socket value\r\n * \r\n * @import join from url.join\r\n * \r\n * @import createTimer from timer\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import removeAll from event.listener.remove.all\r\n * \r\n * @import Manager from .manager value\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @require ws\r\n * \r\n * @class\r\n * \r\n * \r\n */\r\n\r\n const WebSocket = require('ws');\r\n\r\n class main extends Connection{\r\n\r\n    initialize(url , {\r\n        path,\r\n        timeout = 20000\r\n    }){\r\n\r\n        let me = this ;\r\n        \r\n        if(path){\r\n\r\n            url = join(url , path) ;\r\n        }\r\n\r\n        me.socketURL = url ;\r\n\r\n        me.socketTimeoutTimer = createTimer({\r\n            duration:timeout,\r\n            autoStart:false,\r\n            listeners:{\r\n                timeout:'onSocketTimeout',\r\n                scope:me\r\n            }\r\n        }) ;\r\n    }\r\n\r\n    onSocketTimeout(){\r\n\r\n        this.fireEvent('connecttimeout') ;\r\n    }\r\n\r\n    onSocketOpen(){\r\n\r\n        let me = this,\r\n        {\r\n            socketTimeoutTimer\r\n        } = me;\r\n\r\n        socketTimeoutTimer.end() ;\r\n\r\n        me.fireEvent('connect') ;\r\n    }\r\n\r\n    onSocketError(){\r\n\r\n        let me = this,\r\n        {\r\n            socket,\r\n            socketTimeoutTimer\r\n        } = me;\r\n\r\n        socketTimeoutTimer.end() ;\r\n\r\n        removeAll(socket) ;\r\n\r\n        delete me.socket ;\r\n\r\n        delete me.disconnectingState ;\r\n\r\n        me.fireEvent('lostconnect') ;\r\n    }\r\n\r\n    onSocketClose(){\r\n\r\n        let me = this,\r\n        {\r\n            socket,\r\n            socketTimeoutTimer,\r\n            disconnectingState\r\n        } = me;\r\n\r\n        socketTimeoutTimer.end() ;\r\n\r\n        removeAll(socket) ;\r\n\r\n        delete me.socket ;\r\n\r\n        delete me.disconnectingState ;\r\n\r\n        if(disconnectingState){\r\n\r\n            me.fireEvent('disconnect') ;\r\n        \r\n        }else{\r\n\r\n            me.fireEvent('lostconnect') ;\r\n        }\r\n    }\r\n\r\n    onSocketMessage({\r\n        data\r\n    }){\r\n\r\n        this.acceptMessage(data) ;\r\n    }\r\n\r\n    doConnect(){\r\n\r\n        let me = this,\r\n        {\r\n            socketTimeoutTimer,\r\n            socketURL\r\n        } = me ;\r\n\r\n        socketTimeoutTimer.start() ;\r\n\r\n        add(me.socket = new WebSocket(socketURL) , {\r\n            open:'onSocketOpen',\r\n            close:'onSocketClose',\r\n            error:'onSocketError',\r\n            message:'onSocketMessage',\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    doDisconnect(){\r\n\r\n        this.socket.close() ;\r\n    }\r\n\r\n    send(message){\r\n\r\n        let me = this,\r\n        {\r\n            socket,\r\n            isConnected\r\n        } = me ;\r\n\r\n        if(isConnected){\r\n\r\n            socket.send(message) ;\r\n        }\r\n    }\r\n }\r\n\n\n            var_class_1609121325065 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325065 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket.standard' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325065 ;\n        \nvar_global_main_1609121325065 = main;\n\n            var_init_locked_1609121325065 = true ;\n        }\n        \n    \n                        return var_global_main_1609121325065 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket.standard"
  },
  "src::miniprogram.socket": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::miniprogram.socket()",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121325221;\n    \n                    let var_class_1609121325221;\n    \n                    \n\n                    let var_global_main_1609121325221 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325221){\n\n            get = include('src::function.get');\n\n            \r\n/**\r\n * \r\n * 小程序 socket 类实现\r\n * \r\n * @import get from function.get\r\n * \r\n * @class\r\n *\r\n */\r\n\r\n const EventEmitter = require('events') ;\r\n\r\n function onOpen(){\r\n\r\n    this.emit('open') ;\r\n }\r\n\r\n function onMessage({\r\n     data\r\n }){\r\n\r\n    this.emit('message' , data) ;\r\n }\r\n\r\n function onError(){\r\n\r\n    this.emit('error') ;\r\n }\r\n\r\n function onClose(){\r\n\r\n    this.emit('close') ;\r\n }\r\n\r\n function on(name , fn){\r\n\r\n    let me = this ;\r\n\r\n    me.removeAllListeners(name) ;\r\n\r\n    me.on(name , fn) ;\r\n }\r\n\r\n class main extends EventEmitter{\r\n\r\n    constructor(url , protocols){\r\n\r\n        super() ;\r\n\r\n        let socket = wx.connectSocket({\r\n            url,\r\n            protocols\r\n        }),\r\n        me = this;\r\n\r\n        socket.onOpen(get(onOpen , me)) ;\r\n\r\n        socket.onMessage(get(onMessage , me)) ;\r\n\r\n        socket.onError(get(onError , me)) ;\r\n\r\n        socket.onClose(get(onClose , me)) ;\r\n\r\n        me.socket = socket ;\r\n    }\r\n\r\n    get readyState(){\r\n\r\n        return this.socket.readyState ;\r\n    }\r\n\r\n    set onopen(fn){\r\n\r\n        on.call(this , 'open' , fn) ;\r\n    }\r\n\r\n    set onmessage(fn){\r\n\r\n        on.call(this , 'message' , fn) ;\r\n    }\r\n\r\n    set onerror(fn){\r\n\r\n        on.call(this , 'error' , fn) ;\r\n    }\r\n\r\n    set onclose(fn){\r\n\r\n        on.call(this , 'close' , fn) ;\r\n    }\r\n\r\n    send(data){\r\n\r\n        this.socket.send({\r\n            data\r\n        }) ;\r\n    }\r\n\r\n    close(){\r\n\r\n        this.socket.close() ;\r\n    }\r\n\r\n }\n\n            var_class_1609121325221 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325221 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::miniprogram.socket' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325221 ;\n        \nvar_global_main_1609121325221 = main;\n\n            var_init_locked_1609121325221 = true ;\n        }\n        \n    \n                        return var_global_main_1609121325221 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "miniprogram.socket"
  },
  "src::data.connection.socket.standard.normal": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.connection.socket.standard.normal()",
    "standard": true,
    "importNames": [
      "src::data.connection.socket.standard"
    ],
    "dependentModules": {
      "ws": "^7.1.2"
    },
    "data": "(() =>{\n\n                    let Connection;\n    \n                    let var_init_locked_1609121325238;\n    \n                    let var_class_1609121325238;\n    \n                    \n\n                    let var_global_main_1609121325238 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325238){\n\n            Connection = include('src::data.connection.socket.standard')();\n\n            /**\r\n * \r\n * 基于标准 WebSocket 进行开发\r\n * \r\n * @import Connection from data.connection.socket.standard value\r\n * \r\n * @require ws\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n const WebSocket = require('ws') ;\r\n\r\n class main extends Connection{\r\n\r\n    get WebSocket(){\r\n\r\n        return WebSocket ;\r\n    }\r\n\r\n    \r\n }\n\n            var_class_1609121325238 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325238 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.connection.socket.standard.normal' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325238 ;\n        \nvar_global_main_1609121325238 = main;\n\n            var_init_locked_1609121325238 = true ;\n        }\n        \n    \n                        return var_global_main_1609121325238 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.connection.socket.standard.normal"
  },
  "src::data.convert.boolean": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.convert.boolean(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.boolean",
      "src::is.string",
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isBoolean,isString,isNumber;\n    \n                    let var_init_locked_1609121325260;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 将指定数据转换成布尔型\r\n * \r\n * @import is.boolean\r\n * \r\n * @import is.string\r\n * \r\n * @import is.number\r\n *\r\n * @param {mixed} data 数据\r\n * \r\n * @return {boolean} 转换后的布尔型 \r\n * \r\n */\r\n\r\n if(isBoolean(data)){\r\n\r\n    return data ;\r\n \r\n }else if(isString(data)){\r\n\r\n    switch(data){\r\n\r\n        case 'true':\r\n\r\n            return true ;\r\n\r\n        case 'false':\r\n\r\n            return false ;\r\n    }\r\n    \r\n }else if(isNumber(data)){\r\n\r\n    return Boolean(data) ;\r\n }\r\n\r\n return data !== undefined && data !== null ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121325260){\n\n            isBoolean = include('src::is.boolean');\nisString = include('src::is.string');\nisNumber = include('src::is.number');\n\n            var_init_locked_1609121325260 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.convert.boolean"
  },
  "src::data.convert.date": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::data.convert.date(<mixed> data , {<string> format})",
    "standard": true,
    "importNames": [
      "src::is.number",
      "src::is.string",
      "src::date.parse"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber,isString,parse;\n    \n                    let var_init_locked_1609121325282;\n    \n                    \n\n                    function main(data , {format}){\n\n        \r\n/**\r\n * \r\n * 将指定数据转换成日期对象\r\n * \r\n * @import is.number\r\n * \r\n * @import is.string\r\n * \r\n * @import parse from date.parse\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @param {object} [config = {}] 配置\r\n * \r\n * @param {string} [config.format] 日期格式字符串\r\n * \r\n * @return {Date} 转换后的日期对象\r\n * \r\n */\r\n\r\n if(isNumber(data)){\r\n\r\n    return new Date(data) ;\r\n }\r\n\r\n if(isString(data)){\r\n\r\n    if(/^\\d+$/.test(data)){\r\n\r\n      return new Date(Number(data)) ;\r\n\r\n    }else if(/^\\d{4}\\-\\d{2}-\\d{2}T\\d{2}\\:\\d{2}\\:[\\d\\.]+Z$/.test(data)){\r\n\r\n      return new Date(data) ;\r\n    }\r\n\r\n    return parse(data , format) ;\r\n }\r\n\r\n return null ;\n\n    }\n    \n                    return function(data , {format} = {}){\n    \n                        \n        if(!var_init_locked_1609121325282){\n\n            isNumber = include('src::is.number');\nisString = include('src::is.string');\nparse = include('src::date.parse');\n\n            var_init_locked_1609121325282 = true ;\n        }\n        \n    \n                        return main.call(this , data , {format}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.convert.date"
  },
  "src::string.format": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::string.format(<string> format , <mixed> ...args)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 字符串格式化\r\n * \r\n * @param {string} format 格式字符串\r\n * \r\n * @param {mixed} [...args] 格式参数\r\n * \r\n * @return {string} 格式化后的字符串 \r\n * \r\n */\r\n\r\n let formatRe = /\\{(\\d+)\\}/g ;\r\n\r\n function main(format , ...args){\r\n\r\n    return format.replace(formatRe , (match , index) => args[index]) ;\r\n }\n    \n                    return function(format , ...args){\n    \n                        \n    \n                        return main.call(this , format , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "string.format"
  },
  "src::date.parse": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.parse(<string> data , <string> format)",
    "standard": true,
    "importNames": [
      "src::string.format"
    ],
    "dependentModules": {
      "date-and-time": "^0.11.0"
    },
    "data": "(() =>{\n\n                    let doFormat;\n    \n                    let var_init_locked_1609121325303;\n    \n                    \n\n                    /**\r\n * \r\n * 将字符串转换成日期\r\n * \r\n * @import doFormat from string.format\r\n * \r\n * @param {string} data 字符串\r\n * \r\n * @param {string} [format = 'YYYY-MM-DD'] 日期格式\r\n * \r\n * @return {Date} 日期对象 \r\n * \r\n * @require date-and-time\r\n * \r\n */\r\n\r\nconst {\r\n   parse\r\n} = require('date-and-time') ;\r\n\r\nfunction main(data , format){\r\n\r\n   return parse(data , format) ;\r\n}\r\n\r\n \n    \n                    return function(data , format = 'YYYY-MM-DD'){\n    \n                        \n        if(!var_init_locked_1609121325303){\n\n            doFormat = include('src::string.format');\n\n            var_init_locked_1609121325303 = true ;\n        }\n        \n    \n                        return main.call(this , data , format) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.parse"
  },
  "src::data.convert.number": {
    "meta": "code.meta.script.function",
    "signature": "<number|string> src::data.convert.number(<mixed> data , {<number> digit , <string> keepMode , <boolean> keepDigitRightZero})",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.date",
      "src::math.round",
      "src::math.truncation",
      "src::math.digit",
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isDate,round,truncation,getDigit,isNumber;\n    \n                    let var_init_locked_1609121325340;\n    \n                    \n\n                    function main(data , {digit , keepMode , keepDigitRightZero}){\n\n        \r\n/**\r\n * \r\n * 将指定数据转换成数值\r\n * \r\n * @import is.string\r\n * \r\n * @import is.date\r\n * \r\n * @import round from math.round\r\n * \r\n * @import truncation from math.truncation\r\n * \r\n * @import getDigit from math.digit\r\n * \r\n * @import is.number\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @param {object} [config = {}] 配置\r\n * \r\n * @param {number} [config.digit = 0] 保留的小数点位数\r\n * \r\n * @param {string} [config.keepMode = 'round'] 保留小数法\r\n * \r\n * @param {boolean} [config.keepDigitRightZero = false] 是否保留小数点左边的\r\n * \r\n * @return {number|string} 转换后的数值 \r\n * \r\n */\r\n\r\n if(isString(data)){\r\n\r\n    data = Number(data) ;\r\n }\r\n\r\n if(isDate(data)){\r\n\r\n    data = data.getTime() ;\r\n }\r\n\r\n if(isNumber(data)){\r\n\r\n    switch(keepMode){\r\n\r\n        case 'round':\r\n\r\n            data = round(data , digit) ;\r\n\r\n        case 'truncation':\r\n\r\n            data = truncation(data , digit) ;\r\n    }\r\n\r\n    if(keepDigitRightZero){\r\n\r\n      let realDigit = getDigit(data) ;\r\n\r\n      data = String(data) ;\r\n\r\n      if(realDigit < digit){\r\n\r\n         return data.padEnd(data.length + (digit - realDigit) , '0') ;\r\n      }\r\n\r\n      return data ;\r\n    }\r\n\r\n    return data ;\r\n\r\n }\r\n\r\n const {\r\n    NEGATIVE_INFINITY,\r\n    POSITIVE_INFINITY\r\n } = Number ;\r\n\r\n if(data === NEGATIVE_INFINITY || data === POSITIVE_INFINITY){\r\n\r\n    return data ;\r\n }\r\n\r\n return NaN ;\r\n\r\n \r\n\r\n \n\n    }\n    \n                    return function(data , {digit = 0 , keepMode = 'round' , keepDigitRightZero = false} = {}){\n    \n                        \n        if(!var_init_locked_1609121325340){\n\n            isString = include('src::is.string');\nisDate = include('src::is.date');\nround = include('src::math.round');\ntruncation = include('src::math.truncation');\ngetDigit = include('src::math.digit');\nisNumber = include('src::is.number');\n\n            var_init_locked_1609121325340 = true ;\n        }\n        \n    \n                        return main.call(this , data , {digit , keepMode , keepDigitRightZero}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.convert.number"
  },
  "src::math.round": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.round(<number> data , <number> digit)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , digit){\n\n        \r\n/**\r\n * \r\n * 实现四舍五入\r\n * \r\n * @param {number} data 数值\r\n * \r\n * @param {number} [digit = 0] 保留小数点位数\r\n * \r\n * @return {number} 四舍五入后的数值\r\n * \r\n */\r\n\r\n if(digit === 0){\r\n\r\n    return Math.round(data) ;\r\n }\r\n\r\n return Math.round(data * Math.pow(10 , digit)) / Math.pow(10 , digit);\n\n    }\n    \n                    return function(data , digit = 0){\n    \n                        \n    \n                        return main.call(this , data , digit) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.round"
  },
  "src::math.truncation": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.truncation(<number> data , <number> digit)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , digit){\n\n        \r\n/**\r\n * \r\n * 实现小数点后截断\r\n * \r\n * @param {number} data 数值\r\n * \r\n * @param {number} [digit = 0] 保留小数点位数\r\n * \r\n * @return {number} 截断后的数据\r\n * \r\n */\r\n\r\nif(digit === 0){\r\n\r\n    return Math.trunc(data) ;\r\n }\r\n\r\n return Math.trunc(data * Math.pow(10 , digit)) / Math.pow(10 , digit);\n\n    }\n    \n                    return function(data , digit = 0){\n    \n                        \n    \n                        return main.call(this , data , digit) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.truncation"
  },
  "src::math.digit": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.digit(<number> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        /*\r\n * \r\n * 获取数字的实际小数位数\r\n * \r\n * @param {number} data 数字\r\n * \r\n * @return {number} 小数位数\r\n * \r\n */\r\n\r\n/\\.(\\d+)$/.exec(String(data)) ;\r\n\r\nreturn RegExp.$1.length ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.digit"
  },
  "src::data.message.channel.concat": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.concat(<mixed> channels)",
    "standard": true,
    "importNames": [
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from;\n    \n                    let var_init_locked_1609121325410;\n    \n                    \n\n                    function main(channels){\n\n        \r\n/**\r\n * \r\n * 与其它消息通道完成互联\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} channels 其它的对接的消息通道对象\r\n * \r\n */\r\n\r\n channels = from(channels) ;\r\n\r\n let me = this,\r\n {\r\n    concatenateChannels\r\n } = me ;\r\n\r\n for(let channel of channels){\r\n\r\n    if(!concatenateChannels.includes(channel)){\r\n\r\n      concatenateChannels.push(channel) ;\r\n\r\n      channel.concat(me) ;\r\n\r\n    }\r\n }\n\n    }\n    \n                    return function(channels){\n    \n                        \n        if(!var_init_locked_1609121325410){\n\n            from = include('src::array.from');\n\n            var_init_locked_1609121325410 = true ;\n        }\n        \n    \n                        return main.call(this , channels) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.concat"
  },
  "src::data.message.channel.connect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.connect(<mixed> address , <mixed> params , <object> config)",
    "standard": true,
    "importNames": [
      "src::data.message.channel.send",
      "src::data.message.processive.connect"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121325439 = new Map();\n    \n                    return function(address , params , config = {}){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121325439.has(this)){\n\n            var_current_scope_1609121325439.set(this , (() => {\n                const send = include('src::data.message.channel.send').bind(this);\nconst connect = include('src::data.message.processive.connect').bind(this);\n\n                function main(address , params , config){\n\n        \r\n/**\r\n * \r\n * 连接\r\n * \r\n * @import send from .send scoped\r\n * \r\n * @import connect from data.message.processive.connect scoped\r\n * \r\n * @param {mixed} address 接收消息地址\r\n * \r\n * @param {mixed} params 发送的数据\r\n * \r\n * @param {object} [config = {}] 发送配置\r\n * \r\n */\r\n\r\nlet {\r\n    body,\r\n    promise\r\n} = send(address , params , {\r\n    ...config,\r\n    processive:true,\r\n    returnMessage:true\r\n}),\r\n{\r\n    id\r\n} = body;\r\n\r\nconnect(id) ;\r\n\r\nlet {\r\n    messages\r\n} = this ;\r\n\r\nif(messages[id].connectCount === 1){\r\n\r\n    return promise ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325439.get(this) ;\n\n        \n    \n                        return main.call(this , address , params , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.connect"
  },
  "src::promise.create": {
    "meta": "code.meta.script.function",
    "signature": "<Promise> src::promise.create(<function> onInit , <function> onCancel)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::promise.create.processive"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,ProcessivePromise;\n    \n                    let var_init_locked_1609121325574;\n    \n                    \n\n                    function main(onInit , onCancel){\n\n        \r\n/**\r\n * \r\n * 创建 Promise 对象\r\n * \r\n * @import is.function\r\n * \r\n * @import ProcessivePromise from promise.create.processive value\r\n * \r\n * @param {function} onInit 实始化 Promise 引用\r\n * \r\n * @param {function} [onCancel] 取消 Promise 时调用\r\n * \r\n * @return {Promise} 创建后的 Promise\r\n * \r\n */\r\n\r\n if(isFunction(onCancel)){\r\n\r\n    return new ProcessivePromise(onInit , onCancel) ;\r\n }\r\n\r\n return new Promise(onInit) ;\n\n    }\n    \n                    return function(onInit , onCancel){\n    \n                        \n        if(!var_init_locked_1609121325574){\n\n            isFunction = include('src::is.function');\nProcessivePromise = include('src::promise.create.processive')();\n\n            var_init_locked_1609121325574 = true ;\n        }\n        \n    \n                        return main.call(this , onInit , onCancel) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "promise.create"
  },
  "src::data.message.create": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.create(<data.message.Channel> channel , <mixed> address , <mixed> params , {<boolean> reconnection , <string> fromAddress , <boolean> processive})",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::promise.create",
      "src::event.listener.add",
      "src::event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,createPromise,add,remove;\n    \n                    let var_init_locked_1609121325551;\n    \n                    \n\n                    function main(channel , address , params , {reconnection , fromAddress , processive}){\n\n        /**\r\n * \r\n * 创建一个消息\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import createPromise from promise.create\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @param {data.message.Channel} channel 消息通道对象\r\n * \r\n * @param {mixed} address 接收消息地址\r\n * \r\n * @param {mixed} params 发送的数据\r\n * \r\n * @param {object} [config = {}] 发送配置\r\n * \r\n * @param {boolean} [config.reconnection = false] 在发送失败后是否重发 \r\n * \r\n * @param {string} [config.fromAddress] 发送消息地址\r\n * \r\n * @param {boolean} [config.processive = false] 是否为持续消息\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    messages\r\n } = channel,\r\n id = generate('message-' , true);\r\n\r\n return messages[id] = {\r\n     ...(processive ? {\r\n        connectCount:0,\r\n        count:0\r\n     } : {}),\r\n     promise:createPromise((resolve , reject) =>{\r\n\r\n        if(processive){\r\n\r\n            let listeners = {\r\n                [`message-${id}`](channel , data){\r\n\r\n                    resolve(data) ;\r\n\r\n                },\r\n                [`messageerror-${id}`]:{\r\n                    fn(channel , message){\r\n\r\n                        reject(message) ;\r\n                        \r\n                    },\r\n                    once:true\r\n                }\r\n            } ;\r\n\r\n            add(channel , listeners) ;\r\n\r\n            return listeners ;\r\n        \r\n        }else{\r\n\r\n            let onMessageError = (channel , message) => {\r\n\r\n                reject(message) ;\r\n\r\n                remove(channel , `message-${id}` , onMessage) ;\r\n            \r\n            },\r\n            onMessage = (channel , data) =>{\r\n\r\n                resolve(data) ;\r\n\r\n                remove(channel , `messageerror-${id}` , onMessageError) ;\r\n                \r\n            };\r\n\r\n            add(channel , {\r\n                [`message-${id}`]:{\r\n                    fn:onMessage,\r\n                    once:true\r\n                },\r\n                [`messageerror-${id}`]:{\r\n                    fn:onMessageError,\r\n                    once:true\r\n                }\r\n            }) ;\r\n        }\r\n\r\n     } , processive ? async (listeners) => await channel.disconnect(address , params , {\r\n        reconnection,\r\n        fromAddress,\r\n        processive\r\n     }) : false),\r\n     body:{\r\n        id,\r\n        from:fromAddress,\r\n        to:address,\r\n        params,\r\n        reconnection,\r\n        processive\r\n    }\r\n } ;\n\n    }\n    \n                    return function(channel , address , params , {reconnection = false , fromAddress , processive = false} = {}){\n    \n                        \n        if(!var_init_locked_1609121325551){\n\n            generate = include('src::id.generate');\ncreatePromise = include('src::promise.create');\nadd = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\n\n            var_init_locked_1609121325551 = true ;\n        }\n        \n    \n                        return main.call(this , channel , address , params , {reconnection , fromAddress , processive}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.create"
  },
  "src::object.copy": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.copy(<object> dest , <object> source , <string[]> fields)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(dest , source , fields){\n\n        \r\n/**\r\n * \r\n * 复制\r\n * \r\n * @param {object} dest 目标对象\r\n * \r\n * @param {object} source 来源对象\r\n * \r\n * @param {string[]} [fields = []] 拷贝字段集合 \r\n * \r\n * @return {object} 目标对象引用\r\n * \r\n */\r\n\r\n for(let field of fields){\r\n\r\n    dest[field] = source[field] ;\r\n }\r\n\r\n return dest ;\n\n    }\n    \n                    return function(dest , source , fields = []){\n    \n                        \n    \n                        return main.call(this , dest , source , fields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.copy"
  },
  "src::data.message.get": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.get(<data.message.Channel> channel , <mixed> address , <mixed> params , {<boolean> reconnection , <string> fromAddress , <boolean> processive , <boolean> autoCreate})",
    "standard": true,
    "importNames": [
      "src::data.message.create",
      "src::data.equals",
      "src::is.object.simple",
      "src::object.copy",
      "src::is.promise.processive",
      "src::promise.create"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let equals,isObject,copy,isPromise,createPromise;\n    \n                    let var_init_locked_1609121325498;\n \n                    \n\n                    const var_current_scope_1609121325498 = new Map();\n    \n                    return function(channel , address , params , {reconnection = false , fromAddress , processive = false , autoCreate = true} = {}){\n    \n                        \n        if(!var_init_locked_1609121325498){\n\n            equals = include('src::data.equals');\nisObject = include('src::is.object.simple');\ncopy = include('src::object.copy');\nisPromise = include('src::is.promise.processive');\ncreatePromise = include('src::promise.create');\n\n            var_init_locked_1609121325498 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121325498.has(this)){\n\n            var_current_scope_1609121325498.set(this , (() => {\n                const create = include('src::data.message.create').bind(this);\n\n                function main(channel , address , params , {reconnection , fromAddress , processive , autoCreate}){\n\n        \r\n/**\r\n * \r\n * 获取消息\r\n * \r\n * @import create from .create scoped\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import copy from object.copy\r\n * \r\n * @import isPromise from is.promise.processive\r\n * \r\n * @import createPromise from promise.create\r\n * \r\n * @param {data.message.Channel} channel 消息通道对象\r\n * \r\n * @param {mixed} address 接收消息地址\r\n * \r\n * @param {mixed} params 发送的数据\r\n * \r\n * @param {object} [config = {}] 发送配置\r\n * \r\n * @param {boolean} [config.reconnection = false] 在发送失败后是否重发 \r\n * \r\n * @param {string} [config.fromAddress] 发送消息地址\r\n * \r\n * @param {boolean} [config.processive = false] 是否为持续消息\r\n * \r\n * @param {boolean} [config.autoCreate = true] 当前 autoCreate 设置为 true 时，如果消息不存在时则创建\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   rootAddress,\r\n   messages\r\n} = channel ;\r\n\r\nfromAddress = rootAddress ;\r\n\r\nmessages = Object.values(messages) ;\r\n\r\nfor(let message of messages){\r\n\r\n    let {\r\n        body,\r\n        promise\r\n    } = message,\r\n    {\r\n        from,\r\n        to,\r\n        params:messageParams,\r\n        processive:messageProcessive,\r\n        cancel\r\n    } = body ;\r\n\r\n    if(cancel === true){\r\n\r\n        continue ;\r\n    }\r\n\r\n    if(\r\n        from === fromAddress &&\r\n        to === address &&\r\n        equals(params , messageParams) &&\r\n        messageProcessive === processive\r\n    ){\r\n\r\n        return {\r\n            created:false,\r\n            promise,\r\n            body\r\n        } ;\r\n    }\r\n}\r\n\r\nif(autoCreate){\r\n\r\n    return {\r\n        ...create(channel , address , params , {\r\n            reconnection,\r\n            fromAddress,\r\n            processive\r\n        }),\r\n        created:true\r\n    } ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325498.get(this) ;\n\n        \n    \n                        return main.call(this , channel , address , params , {reconnection , fromAddress , processive , autoCreate}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.get"
  },
  "src::data.message.channel.send.body": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.send.body(<object> body)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(body){\n\n        \r\n/**\r\n * \r\n * 发送消息主体\r\n * \r\n * @param {object} body 消息主体\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    proxy,\r\n    addresses,\r\n    rootAddress\r\n} = me,{\r\n    to\r\n} = body;\r\n\r\nif(addresses.hasOwnProperty(to)){\r\n\r\n   me.receive(body) ;\r\n\r\n}else{\r\n\r\n   proxy.call('doSend' , {\r\n       ...body,\r\n       channels:[\r\n           rootAddress\r\n        ]\r\n   }) ;\r\n}\n\n    }\n    \n                    return function(body){\n    \n                        \n    \n                        return main.call(this , body) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.send.body"
  },
  "src::data.message.channel.send": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.send(<mixed> address , <mixed> params , <object> config)",
    "standard": true,
    "importNames": [
      "src::data.message.get",
      "src::data.message.channel.send.body"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121325468;\n \n                    \n\n                    const var_current_scope_1609121325468 = new Map();\n    \n                    return function(address , params , config = {}){\n    \n                        \n        if(!var_init_locked_1609121325468){\n\n            get = include('src::data.message.get');\n\n            var_init_locked_1609121325468 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121325468.has(this)){\n\n            var_current_scope_1609121325468.set(this , (() => {\n                const send = include('src::data.message.channel.send.body').bind(this);\n\n                function main(address , params , config){\n\n        \r\n/**\r\n * \r\n * 发送消息\r\n * \r\n * @import get from data.message.get\r\n * \r\n * @import send from .send.body scoped\r\n * \r\n * @param {mixed} address 接收消息地址\r\n * \r\n * @param {mixed} params 发送的参数\r\n * \r\n * @param {object} [config = {}] 发送配置\r\n * \r\n */\r\n\r\n let {\r\n   returnMessage = false\r\n } = config,\r\n message = get(this , address , params , config),\r\n {\r\n    promise,\r\n    body,\r\n    created\r\n } = message ;\r\n\r\n if(created){\r\n\r\n   send(body) ;\r\n \r\n }\r\n\r\n if(returnMessage === true){\r\n\r\n    return message ;\r\n }\r\n\r\n return promise ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325468.get(this) ;\n\n        \n    \n                        return main.call(this , address , params , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.send"
  },
  "src::data.message.processive.connect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.processive.connect(<string> id)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(id){\n\n        \r\n/**\r\n * \r\n * 持续消息连接\r\n * \r\n * @param {string} id 消息编号\r\n * \r\n */\r\n\r\n let {\r\n    messages\r\n } = this ;\r\n\r\n if(messages.hasOwnProperty(id)){\r\n\r\n    messages[id].connectCount ++ ;\r\n }\n\n    }\n    \n                    return function(id){\n    \n                        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.processive.connect"
  },
  "src::data.message.channel.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.constructor({<boolean> reSendDelay , <string> rootAddress , <mixed> rootAddressConfig , <object> addresses , <function> initFn})",
    "standard": true,
    "importNames": [
      "src::object.proxy",
      "src::array.proxy",
      "src::id.generate",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createProxy,createArrayProxy,generate,empty;\n    \n                    let var_init_locked_1609121325662;\n    \n                    \n\n                    function main({reSendDelay , rootAddress , rootAddressConfig , addresses , initFn}){\n\n        \r\n/**\r\n * \r\n * 初始化消息通道\r\n * \r\n * @param {object} [config = {}] 消息通道配置\r\n * \r\n * @param {boolean} [config.reSendDelay = 0] 重发消息延迟\r\n * \r\n * @param {string} [config.rootAddress] 根地址\r\n * \r\n * @param {mixed} [config.rootAddressConfig] 根地址配置\r\n * \r\n * @param {object} [config.addresses] 地址配置\r\n * \r\n * @param {function} [config.initFn] 初始化函数\r\n * \r\n * @import createProxy from object.proxy\r\n * \r\n * @import createArrayProxy from array.proxy\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import empty from function.empty value\r\n * \r\n */\r\n\r\n let me = this,\r\n    proxy = createProxy(me) ;\r\n\r\ninitFn = initFn || empty ;\r\n\r\nme.proxy = proxy ;\r\n\r\nme.addresses = {} ;\r\n\r\nme.register(me.rootAddress = rootAddress , rootAddressConfig) ;\r\n\r\nme.register(addresses) ;\r\n\r\nme.reSendDelay = reSendDelay ;\r\n\r\nme.concatenateChannels = createArrayProxy() ;\r\n\r\nme.processivePromises = {} ;\r\n\r\nme.messages = {} ;\r\n\r\ninitFn.call(me) ;\r\n\r\nproxy.call('doReceive' , me.receive.bind(me)) ;\n\n    }\n    \n                    return function({reSendDelay = 0 , rootAddress , rootAddressConfig , addresses , initFn} = {}){\n    \n                        \n        if(!var_init_locked_1609121325662){\n\n            createProxy = include('src::object.proxy');\ncreateArrayProxy = include('src::array.proxy');\ngenerate = include('src::id.generate');\nempty = include('src::function.empty')();\n\n            var_init_locked_1609121325662 = true ;\n        }\n        \n    \n                        return main.call(this , {reSendDelay , rootAddress , rootAddressConfig , addresses , initFn}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.constructor"
  },
  "src::data.message.channel.destroy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.destroy()",
    "standard": true,
    "importNames": [
      "src::object.clear",
      "src::array.clear"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let clear1,clear2;\n    \n                    let var_init_locked_1609121325684;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 销毁消息通道\r\n * \r\n * @import clear1 from object.clear\r\n * \r\n * @import clear2 from array.clear\r\n * \r\n */\r\n\r\n let {\r\n    addresses,\r\n    concatenateChannels\r\n } = this ;\r\n\r\n clear1(addresses) ;\r\n\r\n clear2(concatenateChannels) ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325684){\n\n            clear1 = include('src::object.clear');\nclear2 = include('src::array.clear');\n\n            var_init_locked_1609121325684 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.destroy"
  },
  "src::object.clear": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.clear(<object> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 清除指定对象的所有键\r\n * \r\n * @param {object} data 对象数据\r\n * \r\n */\r\n\r\nlet keys = Object.keys(data) ;\r\n\r\nfor(let key of keys){\r\n\r\n    delete data[key] ;\r\n}\r\n\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.clear"
  },
  "src::data.message.channel.disconnect.all": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.disconnect.all()",
    "standard": true,
    "importNames": [
      "src::data.message.channel.disconnect"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121325724 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121325724.has(this)){\n\n            var_current_scope_1609121325724.set(this , (() => {\n                const disconnect = include('src::data.message.channel.disconnect').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 断开所有连接\r\n * \r\n * @import disconnect from ..disconnect scoped\r\n * \r\n */\r\n\r\n let {\r\n    messages\r\n } = this;\r\n\r\n messages = Object.values(messages) ;\r\n\r\n let results = [] ;\r\n\r\n for(let message of messages){\r\n\r\n    if(message.hasOwnProperty('connectCount')){\r\n\r\n        message.connectCount = 0 ;\r\n\r\n        results.push(disconnect(message)) ;\r\n    }\r\n }\r\n\r\n return Promise.all(results) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325724.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.disconnect.all"
  },
  "src::data.message.processive.disconnect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.processive.disconnect(<string> id)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(id){\n\n        \r\n/**\r\n * \r\n * 持续消息断开\r\n * \r\n * @param {string} id 消息编号\r\n * \r\n */\r\n\r\nlet {\r\n    messages\r\n } = this ;\r\n\r\n if(messages.hasOwnProperty(id)){\r\n\r\n    let message = messages[id],\r\n    {\r\n        connectCount\r\n    } = message ;\r\n\r\n    if(connectCount > 0){\r\n\r\n        message.connectCount -- ;\r\n    }\r\n }\n\n    }\n    \n                    return function(id){\n    \n                        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.processive.disconnect"
  },
  "src::data.message.processive.disconnect.is": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.message.processive.disconnect.is(<string> id)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(id){\n\n        \r\n/**\r\n * \r\n * 判断持续消息是否可真实断开\r\n * \r\n * @param {string} id 消息编号\r\n * \r\n * @return {boolean} 如果持续消息可以断开则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nlet {\r\n    messages\r\n } = this ;\r\n\r\n if(messages.hasOwnProperty(id)){\r\n\r\n    let message = messages[id] ;\r\n\r\n    return message.connectCount === 0 && message.body.cancel !== true ;\r\n }\r\n\r\n return false ;\n\n    }\n    \n                    return function(id){\n    \n                        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.processive.disconnect.is"
  },
  "src::data.message.channel.disconnect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.disconnect(<mixed> address , <mixed> params , <object> config)",
    "standard": true,
    "importNames": [
      "src::data.message.get",
      "src::data.message.channel.send.body",
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::data.message.processive.disconnect",
      "src::data.message.processive.disconnect.is",
      "src::is.string",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,add,remove,isString,isObject;\n    \n                    let var_init_locked_1609121325751;\n \n                    \n\n                    const var_current_scope_1609121325751 = new Map();\n    \n                    return function(address , params , config = {}){\n    \n                        \n        if(!var_init_locked_1609121325751){\n\n            get = include('src::data.message.get');\nadd = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\nisString = include('src::is.string');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121325751 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121325751.has(this)){\n\n            var_current_scope_1609121325751.set(this , (() => {\n                const send = include('src::data.message.channel.send.body').bind(this);\nconst disconnect = include('src::data.message.processive.disconnect').bind(this);\nconst is = include('src::data.message.processive.disconnect.is').bind(this);\n\n                function main(address , params , config){\n\n        \r\n/**\r\n * \r\n * 连接\r\n * \r\n * @import get from data.message.get\r\n * \r\n * @import send from .send.body scoped\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @import disconnect from data.message.processive.disconnect scoped\r\n * \r\n * @import is from data.message.processive.disconnect.is scoped\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {mixed} address 接收消息地址\r\n * \r\n * @param {mixed} params 发送的数据\r\n * \r\n * @param {object} [config = {}] 发送配置\r\n * \r\n */\r\n\r\nlet me = this,\r\n    message ;\r\n\r\nif(isString(address)){\r\n\r\n    message = get(me , address , params , {\r\n        ...config,\r\n        processive:true,\r\n        autoCreate:false\r\n    }) ;\r\n\r\n}else if(isObject(address)){\r\n\r\n    message = address ;\r\n}\r\n\r\nif(message){\r\n\r\n    let {\r\n        body\r\n    } = message,\r\n    {\r\n        id\r\n    } = body;\r\n\r\n    disconnect(id) ;\r\n\r\n    if(is(id)){\r\n\r\n        remove(me , [\r\n            `messagestart-${id}`,\r\n            `message-${id}`,\r\n            `messageend-${id}`,\r\n            `messageerror-${id}`,\r\n        ]) ;\r\n    \r\n        body.cancel = true ;\r\n    \r\n        send(body) ;\r\n    \r\n        return new Promise(resolve => add(me , `messageend-${id}` , resolve , {\r\n            once:true\r\n        })) ;\r\n        \r\n    }\r\n}\r\n\r\nreturn Promise.resolve() ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121325751.get(this) ;\n\n        \n    \n                        return main.call(this , address , params , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.disconnect"
  },
  "src::data.message.channel.electron.main": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.electron.main(<object> config)",
    "standard": true,
    "importNames": [
      "src::array.from",
      "src::is.array",
      "src::is.message",
      "src::data.message.channel"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from,isArray,is,Channel;\n    \n                    let var_init_locked_1609121325806;\n    \n                    let var_class_1609121325806;\n    \n                    \n\n                    let var_global_main_1609121325806 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121325806){\n\n            from = include('src::array.from');\nisArray = include('src::is.array');\nis = include('src::is.message');\nChannel = include('src::data.message.channel')();\n\n            \r\n/**\r\n * \r\n * 消息通道 Electron 主进程版\r\n * \r\n * @import from from array.from\r\n * \r\n * @import is.array\r\n * \r\n * @import is from is.message\r\n * \r\n * @import Channel from data.message.channel value\r\n *\r\n * @param {object} config 配置 \r\n * \r\n */\r\n\r\n class main extends Channel{\r\n\r\n    constructor({\r\n        window,\r\n        ...options\r\n    }){\r\n\r\n        super({\r\n            ...options,\r\n            initFn(){\r\n\r\n                this.webContents = window.webContents ;\r\n            }\r\n        }) ;\r\n    }\r\n\r\n    doReceive(receive){\r\n\r\n        let {\r\n            webContents\r\n        } = this ;\r\n\r\n        webContents.on('ipc-message' , (event , id , message) => {\r\n\r\n            if(isArray(id)){\r\n\r\n                message = id[1] ;\r\n            }\r\n\r\n            if(is(message)){\r\n\r\n                receive(message) ;\r\n            }\r\n\r\n        }) ;\r\n    }\r\n\r\n    doSend(message){\r\n\r\n        let {\r\n            webContents\r\n        } = this;\r\n\r\n        if(!webContents.isDestroyed()){\r\n\r\n            webContents.send('ipc-message' , message) ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121325806 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325806 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel.electron.main' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325806 ;\n        \nvar_global_main_1609121325806 = main;\n\n            var_init_locked_1609121325806 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121325806(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.electron.main"
  },
  "src::is.message": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject;\n    \n                    let var_init_locked_1609121325825;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 是否为消息体\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {mixed} data 校验数据 \r\n * \r\n * @return {boolean} 如果是消息体则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n if(isObject(data)){\r\n\r\n    return data.hasOwnProperty('id') && data.hasOwnProperty('from') && data.hasOwnProperty('to') ;\r\n }\r\n \n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121325825){\n\n            isObject = include('src::is.object.simple');\n\n            var_init_locked_1609121325825 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message"
  },
  "src::data.message.channel.fire": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.fire(<string> event , <data.Message> message , <mixed> ...args)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(event , message , ...args){\n\n        \r\n/**\r\n * \r\n * 触发事件\r\n * \r\n * @param {string} event 事件名称\r\n * \r\n * @param {data.Message} message 消息包\r\n * \r\n * @param {mixed} [...args] 事件参数\r\n * \r\n */\r\n\r\n let {\r\n     id\r\n } = message ;\r\n\r\n this.fireEvent(`${event}-${id}` , ...args , message) ;\r\n\n\n    }\n    \n                    return function(event , message , ...args){\n    \n                        \n    \n                        return main.call(this , event , message , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.fire"
  },
  "src::data.message.is.forwarded": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.message.is.forwarded(<object> message , <data.message.Channel> channel)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(message , channel){\n\n        \r\n/**\r\n * \r\n * 判断消息是否已经被指定消息通道转发过\r\n * \r\n * @param {object} message 消息\r\n * \r\n * @param {data.message.Channel} channel 消息通道\r\n * \r\n * @return {boolean} 如果消息是被消息通道转发过则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n let {\r\n    channels\r\n } = message,\r\n {\r\n    rootAddress\r\n } = channel;\r\n\r\n return channels.includes(rootAddress) ;\n\n    }\n    \n                    return function(message , channel){\n    \n                        \n    \n                        return main.call(this , message , channel) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.is.forwarded"
  },
  "src::data.message.forward": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.forward(<object> message , <data.message.Channel> channel)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(message , channel){\n\n        \r\n/**\r\n * \r\n * 消息登记转发消息通道\r\n * \r\n * @param {object} message 消息\r\n * \r\n * @param {data.message.Channel} channel 消息通道\r\n * \r\n */\r\n\r\nlet {\r\n    channels\r\n } = message,\r\n {\r\n    rootAddress\r\n } = channel;\r\n\r\n return channels.push(rootAddress) ;\n\n    }\n    \n                    return function(message , channel){\n    \n                        \n    \n                        return main.call(this , message , channel) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.forward"
  },
  "src::data.message.channel.forward": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::data.message.channel.forward(<data.Message> message)",
    "standard": true,
    "importNames": [
      "src::data.message.is.forwarded",
      "src::data.message.forward"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isForwarded,forward;\n    \n                    let var_init_locked_1609121325877;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 转发消息\r\n * \r\n * @import isForwarded from data.message.is.forwarded\r\n * \r\n * @import forward from data.message.forward\r\n * \r\n * @param {data.Message} message 消息体\r\n * \r\n * @return {boolean} 如果转发成功则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n\r\n let me = this,\r\n {\r\n    proxy\r\n } = me ;\r\n\r\n if(!isForwarded(message , me)){\r\n\r\n    forward(message , me) ;\r\n\r\n    proxy.call('doSend' , message) ;\r\n\r\n    return true ;\r\n }\r\n\r\n return false ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121325877){\n\n            isForwarded = include('src::data.message.is.forwarded');\nforward = include('src::data.message.forward');\n\n            var_init_locked_1609121325877 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.forward"
  },
  "src::is.message.send": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.send(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121325958;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否是发送消息\r\n * \r\n * @import is from ..message\r\n * \r\n * @param {object} message 消息 \r\n * \r\n * @return {boolean}  如果是发送消息，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return is(message) && !message.hasOwnProperty('received') ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121325958){\n\n            is = include('src::is.message');\n\n            var_init_locked_1609121325958 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.send"
  },
  "src::is.message.send.processive": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.send.processive(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.send"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121325977;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否为发送持续消息\r\n * \r\n * @import is from ..send\r\n * \r\n * @param {object} message 参数说明\r\n * \r\n * @return {boolean} 如果为发送持续消息则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return is(message) && message.processive === true ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121325977){\n\n            is = include('src::is.message.send');\n\n            var_init_locked_1609121325977 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.send.processive"
  },
  "src::is.message.send.processive.cancel": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.send.processive.cancel(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.send.processive"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121325993;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否为发送取消持续消息\r\n * \r\n * @import is from ..processive\r\n * \r\n * @param {object} message 参数说明\r\n * \r\n * @return {boolean} 如果为发送持续消息则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn is(message) && message.cancel === true ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121325993){\n\n            is = include('src::is.message.send.processive');\n\n            var_init_locked_1609121325993 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.send.processive.cancel"
  },
  "src::is.message.reply": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.reply(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121326014;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否是回复消息\r\n * \r\n * @import is from ..message\r\n * \r\n * @param {object} message 消息 \r\n * \r\n * @return {boolean}  如果是回复消息，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn is(message) && message.hasOwnProperty('received') ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121326014){\n\n            is = include('src::is.message');\n\n            var_init_locked_1609121326014 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.reply"
  },
  "src::is.message.reply.success": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.reply.success(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.reply"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121326036;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否是回复成功消息\r\n * \r\n * @import is from ..reply\r\n * \r\n * @param {object} message 消息 \r\n * \r\n * @return {boolean}  如果是回复成功消息，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn is(message) && message.received === true ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121326036){\n\n            is = include('src::is.message.reply');\n\n            var_init_locked_1609121326036 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.reply.success"
  },
  "src::is.message.reply.success.processive": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.reply.success.processive(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.reply.success"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121326074;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断回复信息是否为持续信息\r\n * \r\n * @import is from ..success\r\n * \r\n * @param {object} message 消息\r\n * \r\n * @return {boolean} 如果回复信息是持续信息则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return is(message) && message.processive === true ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121326074){\n\n            is = include('src::is.message.reply.success');\n\n            var_init_locked_1609121326074 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.reply.success.processive"
  },
  "src::is.message.reply.success.processive.cancel": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.reply.success.processive.cancel(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.reply.success.processive"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121326058;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断回复信息为取消持续信息\r\n * \r\n * @import is from ..processive\r\n * \r\n * @param {object} message 消息\r\n * \r\n * @return {boolean} 如果回复信息是取消持续信息则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn is(message) && message.cancel === true ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121326058){\n\n            is = include('src::is.message.reply.success.processive');\n\n            var_init_locked_1609121326058 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.reply.success.processive.cancel"
  },
  "src::is.message.reply.failure": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.message.reply.failure(<object> message)",
    "standard": true,
    "importNames": [
      "src::is.message.reply"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121326092;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 判断是否是回复失败消息\r\n * \r\n * @import is from ..reply\r\n * \r\n * @param {object} message 消息 \r\n * \r\n * @return {boolean}  如果是回复失败消息，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn is(message) && message.received === false ;\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121326092){\n\n            is = include('src::is.message.reply');\n\n            var_init_locked_1609121326092 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.message.reply.failure"
  },
  "src::data.message.channel.receive": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.receive(<data.Message> message)",
    "standard": true,
    "importNames": [
      "src::is.boolean",
      "src::is.defined",
      "src::is.message.send",
      "src::is.message.send.processive",
      "src::is.message.send.processive.cancel",
      "src::is.message.reply",
      "src::is.message.reply.success",
      "src::is.message.reply.success.processive.cancel",
      "src::is.message.reply.success.processive",
      "src::is.message.reply.failure",
      "src::is.promise",
      "src::is.promise.processive"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isBoolean,isDefined,isSendMessage,isSendProcessiveMessage,isSendCancelProcessiveMessage,isReplyMessage,isReplySuccessMessage,isReplySuccessCancelProcessiveMessage,isReplySuccessProcessiveMessage,isReplyFailureMessage,isPromise,isProcessivePromise;\n    \n                    let var_init_locked_1609121325936;\n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 接收消息\r\n * \r\n * @import is.boolean\r\n * \r\n * @import is.defined\r\n * \r\n * @import isSendMessage from is.message.send\r\n * \r\n * @import isSendProcessiveMessage from is.message.send.processive\r\n * \r\n * @import isSendCancelProcessiveMessage from is.message.send.processive.cancel\r\n * \r\n * @import isReplyMessage from is.message.reply\r\n * \r\n * @import isReplySuccessMessage from is.message.reply.success\r\n * \r\n * @import isReplySuccessCancelProcessiveMessage from is.message.reply.success.processive.cancel\r\n * \r\n * @import isReplySuccessProcessiveMessage from is.message.reply.success.processive\r\n * \r\n * @import isReplyFailureMessage from is.message.reply.failure\r\n * \r\n * @import is.promise\r\n * \r\n * @import isProcessivePromise from is.promise.processive\r\n * \r\n * @param {data.Message} message 消息对象\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n     addresses,\r\n     reSendDelay,\r\n     concatenateChannels,\r\n     processivePromises,\r\n     messages,\r\n     rootAddress\r\n } = me,{\r\n    id,\r\n    from,\r\n    to\r\n} = message ;\r\n\r\nmessage.channels.push(rootAddress) ;\r\n\r\n if(isSendMessage(message)){\r\n\r\n    if(addresses.hasOwnProperty(to)){\r\n\r\n        if(isSendCancelProcessiveMessage(message)){\r\n\r\n            if(processivePromises.hasOwnProperty(id)){\r\n\r\n                processivePromises[id].cancel() ;\r\n\r\n                delete processivePromises[id] ;\r\n            }\r\n\r\n            me.replySuccess(message) ;\r\n\r\n        }else{\r\n\r\n            let result = addresses[to].receive(message.params , message) ;\r\n\r\n            if(isPromise(result)){\r\n\r\n                result.then(result => me.replySuccess(message , result)) ;\r\n\r\n                if(isProcessivePromise(result)){\r\n\r\n                    if(isSendProcessiveMessage(message)){\r\n\r\n                        processivePromises[id] =  result ;\r\n                    \r\n                    }else{\r\n\r\n                        result.then(() => result.cancel()) ;\r\n                    }\r\n                }\r\n\r\n            }else{\r\n\r\n                me.replySuccess(message , result) ;\r\n            }\r\n        }\r\n    \r\n    }else if(!concatenateChannels.call('forward' , message).includes(true)){\r\n\r\n        //me.replyFailure(message) ;\r\n    }\r\n \r\n }else if(isReplyMessage(message)){\r\n\r\n    if(isReplySuccessMessage(message)){\r\n\r\n        if(messages.hasOwnProperty(id)){\r\n\r\n            let result = addresses[from].reply(message.result , message);\r\n\r\n            if(!isReplySuccessProcessiveMessage(message)){\r\n\r\n                delete messages[id] ;\r\n            \r\n            }else{\r\n\r\n                if(message.count === 0){\r\n\r\n                    me.fire('messagestart' , message) ;\r\n                }\r\n\r\n                message.count ++ ;\r\n            }\r\n\r\n            if(isReplySuccessCancelProcessiveMessage(message)){\r\n\r\n                me.fire('messageend' , message) ;\r\n            \r\n            }else{\r\n\r\n                me.fire('message' , message , result) ;\r\n            }\r\n\r\n        }else{\r\n\r\n            concatenateChannels.call('forward' , message) ;\r\n        }\r\n\r\n    }else if(isReplyFailureMessage(message)){\r\n\r\n        if(messages.hasOwnProperty(id)){\r\n\r\n            let {\r\n                reconnection,\r\n                processive\r\n            } = message ;\r\n\r\n            if(reconnection){\r\n\r\n                let method = processive ? 'connect' : 'send' ;\r\n\r\n                setTimeout(() => me[method](message) , reSendDelay) ; \r\n            \r\n            }else{\r\n\r\n                delete messages[id] ;\r\n\r\n                me.fire('messageerror' , message) ;\r\n            }\r\n        \r\n        }else{\r\n\r\n            concatenateChannels.call('forward' , message) ;\r\n        }\r\n    }\r\n }\n\n    }\n    \n                    return function(message){\n    \n                        \n        if(!var_init_locked_1609121325936){\n\n            isBoolean = include('src::is.boolean');\nisDefined = include('src::is.defined');\nisSendMessage = include('src::is.message.send');\nisSendProcessiveMessage = include('src::is.message.send.processive');\nisSendCancelProcessiveMessage = include('src::is.message.send.processive.cancel');\nisReplyMessage = include('src::is.message.reply');\nisReplySuccessMessage = include('src::is.message.reply.success');\nisReplySuccessCancelProcessiveMessage = include('src::is.message.reply.success.processive.cancel');\nisReplySuccessProcessiveMessage = include('src::is.message.reply.success.processive');\nisReplyFailureMessage = include('src::is.message.reply.failure');\nisPromise = include('src::is.promise');\nisProcessivePromise = include('src::is.promise.processive');\n\n            var_init_locked_1609121325936 = true ;\n        }\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.receive"
  },
  "src::data.message.channel.register": {
    "meta": "code.meta.script.function",
    "signature": "<data.message.Address> src::data.message.channel.register(<string|object> address , <mixed> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.function",
      "src::function.get",
      "src::is.string",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,isFunction,get,isString,emptyFn;\n    \n                    let var_init_locked_1609121326115;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 登记地址\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.function\r\n * \r\n * @import get from function.get\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @param {string|object} address 地址\r\n * \r\n * @param {mixed} fn 地址所绑定的函数\r\n * \r\n * @param {mixed} scope 绑定函数的作用域\r\n * \r\n * @return {data.message.Address} 消息地址\r\n * \r\n */\r\n\r\n function main(address , fn , scope){\r\n\r\n    let me = this ;\r\n\r\n    if(isString(address)){\r\n\r\n        return register.call(me , address , fn , scope) ;\r\n    \r\n    }else if(isObject(address)){\r\n\r\n        let names = Object.keys(address),\r\n            result = {};\r\n\r\n        for(let name of names){\r\n\r\n            result[name] = register.call(me , name ,address[name]) ;\r\n        }\r\n\r\n        return result ;\r\n    }\r\n }\r\n\r\n function register(address , fn , scope){\r\n\r\n    let me = this,\r\n    {\r\n        addresses\r\n    } = me ;\r\n\r\n    if(!addresses.hasOwnProperty(address)){\r\n\r\n        let resignerConfig ;\r\n    \r\n        if(isObject(fn)){\r\n    \r\n            let config = fn ;\r\n    \r\n            {\r\n                let {\r\n                    receive = emptyFn,\r\n                    reply = result => result,\r\n                    scope\r\n                } = config ;\r\n    \r\n                resignerConfig = {\r\n                    receive:get(receive , scope),\r\n                    reply:get(reply , scope)\r\n                } ;\r\n            }\r\n    \r\n        }else if(isFunction(fn)){\r\n    \r\n            resignerConfig = {\r\n                receive:get(fn , scope),\r\n                reply:get(fn , scope) \r\n            } ;\r\n        \r\n        }else{\r\n    \r\n            resignerConfig = {\r\n                receive(){\r\n                },\r\n                reply(result){\r\n    \r\n                    return result ;\r\n                }\r\n            } ;\r\n        }\r\n    \r\n        addresses[address] = {\r\n            ...resignerConfig,\r\n            send(address , params , config = {}){\r\n    \r\n                return me.send(address , params , {\r\n                    ...config,\r\n                    fromAddress:address\r\n                }) ;\r\n            }\r\n        } ;\r\n     }\r\n\r\n     return addresses[address] ;\r\n}\n    \n                    return function(address , fn , scope){\n    \n                        \n        if(!var_init_locked_1609121326115){\n\n            isObject = include('src::is.object.simple');\nisFunction = include('src::is.function');\nget = include('src::function.get');\nisString = include('src::is.string');\nisObject = include('src::is.object.simple');\nemptyFn = include('src::function.empty')();\n\n            var_init_locked_1609121326115 = true ;\n        }\n        \n    \n                        return main.call(this , address , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.register"
  },
  "src::data.message.channel.unregister": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.unregister(<string|array> address)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(address){\n\n        \r\n/**\r\n * \r\n * 注销地址\r\n * \r\n * @param {string|array} address 地址\r\n * \r\n */\r\n\r\n let {\r\n    addresses\r\n } = this ;\r\n\r\n delete addresses[address] ;\n\n    }\n    \n                    return function(address){\n    \n                        \n    \n                        return main.call(this , address) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.unregister"
  },
  "src::data.message.channel.reply": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.reply(<data.Message> message)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(message){\n\n        \r\n/**\r\n * \r\n * 回复消息\r\n * \r\n * @param {data.Message} message 消息\r\n * \r\n */\r\n\r\n let me = this,\r\n    {\r\n        rootAddress\r\n    } = me;\r\n\r\n me.proxy.call('doSend' , {\r\n     ...message,\r\n     channels:[\r\n        rootAddress\r\n     ]\r\n }) ;\n\n    }\n    \n                    return function(message){\n    \n                        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.reply"
  },
  "src::data.message.channel.reply.success": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.reply.success(<data.Message> message , <mixed> result)",
    "standard": true,
    "importNames": [
      "src::data.message.channel.reply"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121326159 = new Map();\n    \n                    return function(message , result){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121326159.has(this)){\n\n            var_current_scope_1609121326159.set(this , (() => {\n                const reply = include('src::data.message.channel.reply').bind(this);\n\n                function main(message , result){\n\n        \r\n/**\r\n * \r\n * 回复消息发送成功\r\n * \r\n * @import reply from ..reply scoped\r\n * \r\n * @param {data.Message} message 消息\r\n * \r\n * @param {mixed} result 回复结果\r\n * \r\n */\r\n\r\n reply({\r\n     ...message,\r\n     received:true,\r\n     result\r\n }) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121326159.get(this) ;\n\n        \n    \n                        return main.call(this , message , result) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.reply.success"
  },
  "src::data.message.channel.reply.failure": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.reply.failure(<data.Message> message)",
    "standard": true,
    "importNames": [
      "src::data.message.channel.reply"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121326201 = new Map();\n    \n                    return function(message){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121326201.has(this)){\n\n            var_current_scope_1609121326201.set(this , (() => {\n                const reply = include('src::data.message.channel.reply').bind(this);\n\n                function main(message){\n\n        \r\n/**\r\n * \r\n * 回复消息发送失败\r\n * \r\n * @import reply from ..reply scoped\r\n * \r\n * @param {data.Message} message 消息\r\n *\r\n */\r\n\r\nreply({\r\n    ...message,\r\n    received:false\r\n}) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121326201.get(this) ;\n\n        \n    \n                        return main.call(this , message) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.reply.failure"
  },
  "src::data.message.channel": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.message.channel()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::data.message.channel.constructor",
      "src::data.message.channel.fire",
      "src::data.message.channel.forward",
      "src::data.message.channel.send",
      "src::data.message.channel.connect",
      "src::data.message.channel.disconnect",
      "src::data.message.channel.disconnect.all",
      "src::data.message.channel.receive",
      "src::data.message.channel.register",
      "src::data.message.channel.unregister",
      "src::data.message.channel.destroy",
      "src::data.message.channel.reply.success",
      "src::data.message.channel.reply.failure",
      "src::data.message.channel.concat",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1609121325842__1,extend,constructor,method_fire,method_forward,method_send,method_connect,method_disconnect,method_disconnectAll,method_receive,method_register,method_unregister,method_destroy,method_replySuccess,method_replyFailure,method_concat,isObject;\n    \n                    let var_init_locked_1609121325842;\n    \n                    let var_class_1609121325842;\n    \n                    \n\n                    let var_global_main_1609121325842 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121325842){\n\n            mixin_1609121325842__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::data.message.channel.constructor');\nmethod_fire = include('src::data.message.channel.fire');\nmethod_forward = include('src::data.message.channel.forward');\nmethod_send = include('src::data.message.channel.send');\nmethod_connect = include('src::data.message.channel.connect');\nmethod_disconnect = include('src::data.message.channel.disconnect');\nmethod_disconnectAll = include('src::data.message.channel.disconnect.all');\nmethod_receive = include('src::data.message.channel.receive');\nmethod_register = include('src::data.message.channel.register');\nmethod_unregister = include('src::data.message.channel.unregister');\nmethod_destroy = include('src::data.message.channel.destroy');\nmethod_replySuccess = include('src::data.message.channel.reply.success');\nmethod_replyFailure = include('src::data.message.channel.reply.failure');\nmethod_concat = include('src::data.message.channel.concat');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            fire(...args){\n\n            return method_fire.apply(this , args) ;\n\n        }\nforward(...args){\n\n            return method_forward.apply(this , args) ;\n\n        }\nsend(...args){\n\n            return method_send.apply(this , args) ;\n\n        }\nconnect(...args){\n\n            return method_connect.apply(this , args) ;\n\n        }\ndisconnect(...args){\n\n            return method_disconnect.apply(this , args) ;\n\n        }\ndisconnectAll(...args){\n\n            return method_disconnectAll.apply(this , args) ;\n\n        }\nreceive(...args){\n\n            return method_receive.apply(this , args) ;\n\n        }\nregister(...args){\n\n            return method_register.apply(this , args) ;\n\n        }\nunregister(...args){\n\n            return method_unregister.apply(this , args) ;\n\n        }\ndestroy(...args){\n\n            return method_destroy.apply(this , args) ;\n\n        }\nreplySuccess(...args){\n\n            return method_replySuccess.apply(this , args) ;\n\n        }\nreplyFailure(...args){\n\n            return method_replyFailure.apply(this , args) ;\n\n        }\nconcat(...args){\n\n            return method_concat.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121325842 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121325842 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel' ;\n                }\n\n            } ;\n\n            main = var_class_1609121325842 ;\n        \nvar_global_main_1609121325842 = main;\n\n            var_init_locked_1609121325842 = true ;\n        }\n        \n    \n                        return var_global_main_1609121325842 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel"
  },
  "src::data.message.channel.electron.renderer.webview": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.electron.renderer.webview(<object> config)",
    "standard": true,
    "importNames": [
      "src::array.from",
      "src::is.array",
      "src::is.message",
      "src::data.message.channel",
      "src::event.listener.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from,isArray,is,Channel,add;\n    \n                    let var_init_locked_1609121326233;\n    \n                    let var_class_1609121326233;\n    \n                    \n\n                    let var_global_main_1609121326233 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121326233){\n\n            from = include('src::array.from');\nisArray = include('src::is.array');\nis = include('src::is.message');\nChannel = include('src::data.message.channel')();\nadd = include('src::event.listener.add');\n\n            \r\n/**\r\n * \r\n * 消息通道 Electron 渲染 WebView 版\r\n * \r\n * @import from from array.from\r\n * \r\n * @import is.array\r\n * \r\n * @import is from is.message\r\n * \r\n * @import Channel from data.message.channel value\r\n * \r\n * @import add from event.listener.add\r\n *\r\n * @param {object} config 配置 \r\n * \r\n * @require electron\r\n * \r\n */\r\nclass main extends Channel{\r\n\r\n    constructor({\r\n        webview,\r\n        ...options\r\n    }){\r\n\r\n        super({\r\n            ...options,\r\n            initFn(){\r\n\r\n                this.webview = webview ;\r\n            }\r\n        }) ;\r\n\r\n        this.isDestroyed = false ;\r\n    }\r\n\r\n    doReceive(receive){\r\n\r\n        let me = this,\r\n        {\r\n            webview\r\n        } = me ;\r\n\r\n        add(webview , 'ipc-message' , ({\r\n            channel,\r\n            args\r\n        }) => {\r\n\r\n            let message = args[0] ;\r\n\r\n            if(channel === 'ipc-message' && is(message)){\r\n\r\n                receive(message) ;\r\n            }\r\n        }) ;\r\n\r\n        add(webview , 'destroyed' , () => me.isDestroyed = true) ;\r\n    }\r\n\r\n    doSend(message){\r\n\r\n        let {\r\n            webview,\r\n            isDestroyed\r\n        } = this;\r\n\r\n        if(!isDestroyed){\r\n\r\n            webview.send('ipc-message' , message) ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121326233 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326233 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel.electron.renderer.webview' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326233 ;\n        \nvar_global_main_1609121326233 = main;\n\n            var_init_locked_1609121326233 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326233(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.electron.renderer.webview"
  },
  "src::data.message.channel.electron.renderer": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.electron.renderer(<object> config)",
    "standard": true,
    "importNames": [
      "src::data.message.channel"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Channel;\n    \n                    let var_init_locked_1609121326261;\n    \n                    let var_class_1609121326261;\n    \n                    \n\n                    let var_global_main_1609121326261 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121326261){\n\n            Channel = include('src::data.message.channel')();\n\n            \r\n/**\r\n * \r\n * 消息通道Electron 渲染进程版\r\n * \r\n * @import Channel from data.message.channel value\r\n *\r\n * @param {object} config 配置 \r\n * \r\n */\r\n\r\n const {\r\n    ipcRenderer\r\n } = require('electron') ;\r\n\r\nclass main extends Channel{\r\n\r\n    constructor({\r\n        isWebview = false,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        this.isWebview = isWebview ;\r\n    }\r\n\r\n    doReceive(receive){\r\n\r\n        ipcRenderer.on('ipc-message' , (event , message) => receive(message)) ;\r\n    }\r\n\r\n    doSend(message){\r\n\r\n        let {\r\n            isWebview\r\n        } = this ;\r\n\r\n        ipcRenderer[isWebview ? 'sendToHost' : 'send']('ipc-message' , message) ;\r\n    }\r\n }\n\n            var_class_1609121326261 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326261 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel.electron.renderer' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326261 ;\n        \nvar_global_main_1609121326261 = main;\n\n            var_init_locked_1609121326261 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326261(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.electron.renderer"
  },
  "src::data.message.channel.process.child": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.process.child(<object> config)",
    "standard": true,
    "importNames": [
      "src::data.message.channel"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Channel;\n    \n                    let var_init_locked_1609121326284;\n    \n                    let var_class_1609121326284;\n    \n                    \n\n                    let var_global_main_1609121326284 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121326284){\n\n            Channel = include('src::data.message.channel')();\n\n            \r\n/**\r\n * \r\n * 消息通道子进程版\r\n * \r\n * @import Channel from data.message.channel value\r\n *\r\n * @param {object} config 配置 \r\n * \r\n */\r\n\r\n class main extends Channel{\r\n\r\n    doReceive(receive){\r\n\r\n        process.on('message' , receive) ;\r\n    }\r\n\r\n    doSend(message){\r\n\r\n        if(process.connected){\r\n\r\n            process.send(message) ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121326284 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326284 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel.process.child' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326284 ;\n        \nvar_global_main_1609121326284 = main;\n\n            var_init_locked_1609121326284 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326284(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.process.child"
  },
  "src::data.message.channel.process.main": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.message.channel.process.main(<object> config)",
    "standard": true,
    "importNames": [
      "src::array.from",
      "src::is.object.simple",
      "src::data.message.channel"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from,isObject,Channel;\n    \n                    let var_init_locked_1609121326324;\n    \n                    let var_class_1609121326324;\n    \n                    \n\n                    let var_global_main_1609121326324 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121326324){\n\n            from = include('src::array.from');\nisObject = include('src::is.object.simple');\nChannel = include('src::data.message.channel')();\n\n            \r\n/**\r\n * \r\n * 消息通道主进程版\r\n * \r\n * @import from from array.from\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import Channel from data.message.channel value\r\n *\r\n * @param {object} config 配置 \r\n * \r\n */\r\n\r\n const {\r\n    fork\r\n } = require('child_process') ;\r\n\r\n class main extends Channel{\r\n\r\n    constructor({\r\n        childProcess,\r\n        ...options\r\n    }){\r\n\r\n        super({\r\n            ...options,\r\n            initFn(){\r\n\r\n                if(isObject(childProcess)){\r\n\r\n                    let {\r\n                        path,\r\n                        args,\r\n                        ...options\r\n                    } = childProcess ;\r\n\r\n                    childProcess = fork(path , args , options) ;\r\n                }\r\n\r\n                this.childProcess = childProcess ;\r\n            }\r\n        }) ;\r\n    }\r\n\r\n    doReceive(receive){\r\n\r\n        let {\r\n            childProcess\r\n        } = this ;\r\n\r\n        childProcess.on('message' , message => receive(message)) ;\r\n    }\r\n\r\n    doSend(message){\r\n\r\n        let {\r\n            childProcess\r\n        } = this;\r\n\r\n        if(childProcess.connected){\r\n\r\n            childProcess.send(message) ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121326324 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326324 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.message.channel.process.main' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326324 ;\n        \nvar_global_main_1609121326324 = main;\n\n            var_init_locked_1609121326324 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326324(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.message.channel.process.main"
  },
  "src::data.model": {
    "meta": "code.meta.script.function",
    "signature": "<data.Model> src::data.model(<object> model)",
    "standard": true,
    "importNames": [
      "src::data.reader.create"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createReader;\n    \n                    let var_init_locked_1609121326358;\n    \n                    let var_class_1609121326358;\n    \n                    \n\n                    let var_global_main_1609121326358 ;\n    \n                    return function(model){\n    \n                        \n        if(!var_init_locked_1609121326358){\n\n            createReader = include('src::data.reader.create');\n\n            \r\n/**\r\n * \r\n * 数据模型类\r\n * \r\n * @import createReader from data.reader.create\r\n * \r\n * @param {object} model 数据模型定义\r\n * \r\n * @return {data.Model} 数据模型对象 \r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(model){\r\n\r\n        let me = this ;\r\n\r\n        me.reader = createReader(model) ;\r\n\r\n        me.data = {} ;\r\n    }\r\n\r\n    load(data){\r\n\r\n        let me = this,\r\n        {\r\n            reader\r\n        } = me ;\r\n\r\n        let result = reader.read(data) ;\r\n\r\n        if(result.length){\r\n\r\n            me.data = result[0] ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121326358 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326358 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.model' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326358 ;\n        \nvar_global_main_1609121326358 = main;\n\n            var_init_locked_1609121326358 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326358(model) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.model"
  },
  "src::data.observable": {
    "meta": "code.meta.script.function",
    "signature": "<data.Observable> src::data.observable()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::object.property.inner.define",
      "src::object.property.inner.get",
      "src::object.property.inner.set",
      "src::is.data.item",
      "src::is.data.record",
      "src::is.data.recordset"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,define,get,set,isItem,isRecord,isRecordset;\n    \n                    let var_init_locked_1609121326383;\n    \n                    let var_class_1609121326383;\n    \n                    \n\n                    let var_global_main_1609121326383 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121326383){\n\n            Observable = include('src::mixin.observable');\ndefine = include('src::object.property.inner.define');\nget = include('src::object.property.inner.get');\nset = include('src::object.property.inner.set');\nisItem = include('src::is.data.item');\nisRecord = include('src::is.data.record');\nisRecordset = include('src::is.data.recordset');\n\n            \r\n/**\r\n * \r\n * 创建数据记录观察器\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import define from object.property.inner.define\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @import set from object.property.inner.set\r\n * \r\n * @import isItem from is.data.item\r\n * \r\n * @import isRecord from is.data.record\r\n * \r\n * @import isRecordset from is.data.recordset\r\n * \r\n * @return {data.Observable} 数据观察者对象 \r\n * \r\n */\r\n\r\n class main extends mixins({\r\n     mixins:[\r\n        Observable\r\n     ]\r\n }){\r\n\r\n    constructor(){\r\n\r\n        super() ;\r\n\r\n        define(this , 'bubbleTarget') ;\r\n    }\r\n\r\n    get  belongToObservable(){\r\n\r\n        return  get(this , 'bubbleTarget') ;\r\n    }\r\n\r\n    belongTo(dataItem){\r\n\r\n        let me = this ;\r\n\r\n        if(me.isIndependent && isItem(dataItem)){\r\n\r\n            set(me , 'bubbleTarget' , get(dataItem , 'observable')) ;\r\n        }\r\n    }\r\n\r\n    get isIndependent(){\r\n\r\n        return !get(this , 'bubbleTarget') ;\r\n    }\r\n\r\n    independent(){\r\n\r\n        let me = this,\r\n        {\r\n            isIndependent\r\n        } = me ;\r\n\r\n        if(isIndependent){\r\n\r\n            return ;\r\n        }\r\n   \r\n        set(me , 'bubbleTarget' , null) ;\r\n    }\r\n }\n\n            var_class_1609121326383 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326383 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.observable' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326383 ;\n        \nvar_global_main_1609121326383 = main;\n\n            var_init_locked_1609121326383 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326383() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.observable"
  },
  "src::is.data.item": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.item(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object",
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,get;\n    \n                    let var_init_locked_1609121326402;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断是否为数据项\r\n * \r\n * @import is.object\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {boolean} 判断结果 \r\n * \r\n */\r\n\r\n return isObject(data) && get(data , 'DATA_RECORD') === true ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121326402){\n\n            isObject = include('src::is.object');\nget = include('src::object.property.inner.get');\n\n            var_init_locked_1609121326402 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.item"
  },
  "src::is.data.record": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.record(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.data.item"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,is;\n    \n                    let var_init_locked_1609121326420;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定指定数据是否为数据记录\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is from .item\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果为数据记录则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return is(data) && isObject(data);\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121326420){\n\n            isObject = include('src::is.object.simple');\nis = include('src::is.data.item');\n\n            var_init_locked_1609121326420 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.record"
  },
  "src::is.data.recordset": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.recordset(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::is.data.item"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,is;\n    \n                    let var_init_locked_1609121326441;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定指定数据是否为数据记录集合\r\n * \r\n * @import is.array\r\n * \r\n * @import is from .item\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果为数据记录则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return is(data) && isArray(data) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121326441){\n\n            isArray = include('src::is.array');\nis = include('src::is.data.item');\n\n            var_init_locked_1609121326441 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.recordset"
  },
  "src::data.proxy.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.proxy.constructor({<mixed> reader , <mixed> model})",
    "standard": true,
    "importNames": [
      "src::object.proxy",
      "src::data.reader.json"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createProxy,createReader;\n    \n                    let var_init_locked_1609121326464;\n    \n                    \n\n                    function main({reader , model}){\n\n        \r\n/**\r\n * \r\n * 初始化数据代理\r\n * \r\n * @import createProxy from object.proxy\r\n * \r\n * @import createReader from data.reader.json\r\n * \r\n * @param {object} [options = {}] 配置\r\n * \r\n * @param {mixed} [options.reader = {}] 配置读取器\r\n * \r\n * @param {mixed} [options.model] 数据模型\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n me.proxy = createProxy(me) ;\r\n\r\n me.reader = createReader({\r\n     ...reader,\r\n     model\r\n }) ;\n\n    }\n    \n                    return function({reader = {} , model} = {}){\n    \n                        \n        if(!var_init_locked_1609121326464){\n\n            createProxy = include('src::object.proxy');\ncreateReader = include('src::data.reader.json');\n\n            var_init_locked_1609121326464 = true ;\n        }\n        \n    \n                        return main.call(this , {reader , model}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.proxy.constructor"
  },
  "src::data.reader.fields": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.reader.fields(<mixed> fields)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::is.array",
      "src::is.object.simple",
      "src::is.string",
      "src::is.number",
      "src::function.empty",
      "src::is.function",
      "src::data.reader"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined,isArray,isObject,isString,isNumber,empty,isFunction,createReader;\n    \n                    let var_init_locked_1609121326519;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 数据读取器字段配置\r\n * \r\n * @import is.defined\r\n * \r\n * @import is.array\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import is.number\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @import is.function\r\n * \r\n * @import is.defined\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import createReader from data.reader\r\n * \r\n * @param {mixed} fields 字段配置\r\n * \r\n * @return {mixed} 封装后的字段配置 \r\n * \r\n */\r\n\r\n function main(fields){\r\n\r\n    let result = [],\r\n        me = this;\r\n     \r\n    if(isObject(fields)){\r\n\r\n        let names = Object.keys(fields) ;\r\n\r\n        for(let name of names){\r\n\r\n            let config = fields[name] ;\r\n\r\n            if(isString(config)){\r\n\r\n                config = {\r\n                    name,\r\n                    mapping:config\r\n                }\r\n            \r\n            }else if(isFunction(config)){\r\n\r\n                config = {\r\n                    name,\r\n                    convert:config\r\n                } ;\r\n            }\r\n\r\n            if(isObject(config)){\r\n\r\n                result.push(getField.call(me , {\r\n                    ...config,\r\n                    name\r\n                })) ;\r\n            }\r\n        }\r\n\r\n    }else if(isArray(fields)){\r\n\r\n        for(let field of fields){\r\n\r\n            if(isString(field)){\r\n\r\n                field = {\r\n                    name:field,\r\n                    mapping:field\r\n                } ;\r\n            }\r\n\r\n            if(isObject(field)){\r\n\r\n                result.push(getField.call(me , field)) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result ;\r\n }\r\n\r\n function processDefaultValue(defaultValue) {\r\n     \r\n    if(isFunction(defaultValue)){\r\n\r\n        return defaultValue ;\r\n    }\r\n\r\n    return () => defaultValue ;\r\n }\r\n\r\n function getField({\r\n    name,\r\n    type,\r\n    mapping,\r\n    convert,\r\n    local = false,\r\n    equals,\r\n    set,\r\n    afterSet,\r\n    get,\r\n    defaultValue,\r\n    reader,\r\n    mode = 'readonly',\r\n    ...options\r\n}) {\r\n\r\n   const me = this,\r\n   {\r\n       getData\r\n   } = me;\r\n\r\n   defaultValue = processDefaultValue(defaultValue) ;\r\n\r\n    let field = {\r\n        name,\r\n        mode,\r\n        equals,\r\n        get,\r\n        defaultValue,\r\n        afterSet\r\n    }  ;\r\n\r\n    if(isString(type) && !isFunction(set)){\r\n\r\n        field.set = value => include(`data.convert.${type}`)(value , options) ;\r\n    \r\n    }else{\r\n\r\n        field.set = set ;\r\n\r\n    }\r\n\r\n    if(!local){\r\n\r\n       field.convert = (raw , raws , index , data) =>{\r\n\r\n            if(isDefined(reader)){\r\n\r\n                if(isFunction(reader)){\r\n\r\n                    return me.read(data , data => reader(data , raw , raws , index)) ;\r\n                \r\n                }else if(isString(reader)){\r\n\r\n                    return me.read(data , reader) ;\r\n                \r\n                }else if(isObject(reader)){\r\n\r\n                    let {\r\n                        fields,\r\n                        root,\r\n                        addFields,\r\n                        ...options\r\n                    } = reader,\r\n                    rootProperty;\r\n\r\n                    if(isFunction(root)){\r\n\r\n                        rootProperty = data => root(data , raw , raws , index) ;\r\n                    \r\n                    }else{\r\n\r\n                        rootProperty = root ;\r\n                    }\r\n\r\n                    let readConfig = {\r\n                        root:rootProperty,\r\n                        ...options\r\n                    } ;\r\n\r\n                    if(fields){\r\n\r\n                        return createReader(fields , addFields).read(data , readConfig) ;\r\n                    }\r\n\r\n                    return me.read(data , readConfig) ;\r\n                }\r\n\r\n                return [] ;\r\n\r\n            }else if(isFunction(convert)){\r\n\r\n                raw = convert(raw , raws , index , data) ;\r\n            \r\n            }else{\r\n\r\n                if(isString(mapping)){\r\n\r\n                    raw = getData(raw , mapping) ;\r\n                \r\n                }else{\r\n\r\n                    raw = getData(raw , name) ;\r\n                }\r\n\r\n                if(isString(type)){\r\n\r\n                    raw = include(`data.convert.${type}`)(raw , options) ;\r\n                }\r\n\r\n            }\r\n\r\n            if(isDefined(raw)){\r\n\r\n                if(typeof raw === 'number' && isNaN(raw)){\r\n\r\n                    return defaultValue() ;\r\n                }\r\n\r\n                return raw ;\r\n            }\r\n\r\n            return defaultValue() ;\r\n\r\n        } ;\r\n    \r\n    }else{\r\n\r\n        field.convert = () => defaultValue() ;\r\n    }\r\n\r\n    return field ;\r\n}\n    \n                    return function(fields){\n    \n                        \n        if(!var_init_locked_1609121326519){\n\n            isDefined = include('src::is.defined');\nisArray = include('src::is.array');\nisObject = include('src::is.object.simple');\nisString = include('src::is.string');\nisNumber = include('src::is.number');\nempty = include('src::function.empty')();\nisFunction = include('src::is.function');\nisDefined = include('src::is.defined');\nisObject = include('src::is.object.simple');\ncreateReader = include('src::data.reader');\n\n            var_init_locked_1609121326519 = true ;\n        }\n        \n    \n                        return main.call(this , fields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.fields"
  },
  "src::object.property.inner.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::object.property.inner.has(<object> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerName;\n    \n                    let var_init_locked_1609121326594;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 判断是否拥有内置属性\r\n * \r\n *  @import innerName from .name\r\n * \r\n * @param {object} target  定义内部属性的宿主\r\n * \r\n * @param {string} name 内部属性名称\r\n * \r\n * @return {boolean} 如果拥有指定内部属性则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return target.hasOwnProperty(innerName(name)) ;\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121326594){\n\n            innerName = include('src::object.property.inner.name');\n\n            var_init_locked_1609121326594 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.inner.has"
  },
  "src::object.property.define.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.define.set(<string> name , <function> onSet , <function> onAfterSet , <function> isEquals)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::data.equals",
      "src::object.property.inner.get",
      "src::object.property.inner.set",
      "src::object.property.inner.has"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,equals,get,set,has;\n    \n                    let var_init_locked_1609121326573;\n    \n                    \n\n                    function main(name , onSet , onAfterSet , isEquals){\n\n        \r\n/**\r\n * \r\n * 设置属性\r\n * \r\n * @import is.function\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @import get from ..inner.get\r\n * \r\n * @import set from ..inner.set\r\n * \r\n * @import has from ..inner.has\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {function} [onSet] 设置属性值\r\n * \r\n * @param {function} [onAfterSet] 设置属性值之后调用\r\n * \r\n * @param {function} [isEquals] 属性值判断是否相等，只在启动改变属性事件有效\r\n * \r\n */\r\n \r\n isEquals = isEquals || equals ;\r\n\r\n return function(value){\r\n\r\n    let me = this,\r\n        oldValue = get(me , name) ;\r\n\r\n    if(!isEquals.call(me , value , oldValue)){\r\n\r\n        if(isFunction(onSet)){\r\n\r\n            value = onSet.call(me , value , oldValue) ;\r\n        }\r\n\r\n        set(me , name , value) ;\r\n\r\n        if(isFunction(onAfterSet)){\r\n\r\n            value = onAfterSet.call(me , value) ;\r\n        }\r\n    }\r\n} ;\n\n    }\n    \n                    return function(name , onSet , onAfterSet , isEquals){\n    \n                        \n        if(!var_init_locked_1609121326573){\n\n            isFunction = include('src::is.function');\nequals = include('src::data.equals');\nget = include('src::object.property.inner.get');\nset = include('src::object.property.inner.set');\nhas = include('src::object.property.inner.has');\n\n            var_init_locked_1609121326573 = true ;\n        }\n        \n    \n                        return main.call(this , name , onSet , onAfterSet , isEquals) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.define.set"
  },
  "src::object.property.define.get": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.define.get(<string> name , <function> onGet)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::object.property.inner.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,get;\n    \n                    let var_init_locked_1609121326615;\n    \n                    \n\n                    function main(name , onGet){\n\n        \r\n/**\r\n * \r\n * 获取属性\r\n * \r\n * @import is.function\r\n * \r\n * @import get from ..inner.get\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {function} onGet 获取属性值\r\n * \r\n */\r\n \r\nreturn function(){\r\n\r\n   let me = this,\r\n       value = get(me , name) ;\r\n\r\n   if(isFunction(onGet)){\r\n\r\n       return onGet.call(me , value) ;\r\n   }\r\n\r\n   return value ;\r\n} ;\n\n    }\n    \n                    return function(name , onGet){\n    \n                        \n        if(!var_init_locked_1609121326615){\n\n            isFunction = include('src::is.function');\nget = include('src::object.property.inner.get');\n\n            var_init_locked_1609121326615 = true ;\n        }\n        \n    \n                        return main.call(this , name , onGet) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.define.get"
  },
  "src::object.property.define": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.define(<object> target , <string|object> name , {<boolean> mode , <string> value , <boolean> equals , <function> set , <function> afterSet , <function> get})",
    "standard": true,
    "importNames": [
      "src::object.property.inner.define",
      "src::is.function",
      "src::object.property.define.set",
      "src::object.property.define.get",
      "src::is.object.simple",
      "src::object.property.define"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerDefine,isFunction,doSet,doGet,isObject,define;\n    \n                    let var_init_locked_1609121326552;\n    \n                    \n\n                    function main(target , name , {mode , value , equals , set , afterSet , get}){\n\n        /**\r\n * \r\n * 定义一个缓存属性\r\n * \r\n * @import innerDefine from .inner.define\r\n * \r\n * @import is.function\r\n * \r\n * @import doSet from .define.set\r\n * \r\n * @import doGet from .define.get\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import define from .define\r\n * \r\n * @param {object} target 目标对象\r\n * \r\n * @param {string|object} name 属性名称\r\n * \r\n * @param {object} [options = {}] 属性配置\r\n * \r\n * @param {boolean} options.mode 读写模式\r\n * \r\n * @param {string} [options.value] 属性初始始化值\r\n * \r\n * @param {boolean} [options.equals] 判断属性值是否相等\r\n * \r\n * @param {function} [options.set] 设置值\r\n * \r\n * @param {function} [options.afterSet] 设置值之后调用\r\n * \r\n * @param {function} [options.get] 获取值\r\n * \r\n */\r\n\r\n if(isObject(name)){\r\n\r\n    let properties = name ;\r\n\r\n    let names = Object.keys(properties) ;\r\n\r\n    for(let name of names){\r\n\r\n        define(target , name , properties[name]) ;\r\n    }\r\n\r\n }else{\r\n\r\n    switch(mode){\r\n    \r\n        case 'readonly':\r\n    \r\n            if(isFunction(get)){\r\n    \r\n                Object.defineProperty(target , name , {\r\n                    get:doGet(name , get),\r\n                    configurable:true,\r\n                    enumerable:true\r\n                }) ;\r\n    \r\n                innerDefine(target , name , value) ;\r\n    \r\n            }else{\r\n    \r\n                Object.defineProperty(target , name , {\r\n                    value,\r\n                    configurable:true,\r\n                    enumerable:true\r\n                }) ;\r\n            }\r\n    \r\n            break ;\r\n    \r\n        case 'writeonly':\r\n    \r\n            Object.defineProperty(target , name , {\r\n                set:doSet(name , set , afterSet , equals),\r\n                configurable:true,\r\n                enumerable:true\r\n            }) ;\r\n    \r\n            innerDefine(target , name , value) ;\r\n    \r\n            break ;\r\n    \r\n        case 'readwrite':\r\n\r\n            Object.defineProperty(target , name , {\r\n                set:doSet(name , set , afterSet , equals),\r\n                get:doGet(name , get),\r\n                configurable:true,\r\n                enumerable:true\r\n            }) ;\r\n    \r\n            innerDefine(target , name , value) ;\r\n    \r\n    }\r\n }\n\n    }\n    \n                    return function(target , name , {mode , value , equals , set , afterSet , get} = {}){\n    \n                        \n        if(!var_init_locked_1609121326552){\n\n            innerDefine = include('src::object.property.inner.define');\nisFunction = include('src::is.function');\ndoSet = include('src::object.property.define.set');\ndoGet = include('src::object.property.define.get');\nisObject = include('src::is.object.simple');\ndefine = include('src::object.property.define');\n\n            var_init_locked_1609121326552 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , {mode , value , equals , set , afterSet , get}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.define"
  },
  "src::data.reader.record": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.reader.record(<mixed> record , <mixed> raw , <array> raws , <number> index , <mixed> data , <function> addFields)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::object.property.define",
      "src::object.property.inner.define",
      "src::is.data.item",
      "src::is.defined",
      "src::is.array",
      "src::data.reader.fields"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,define,innerDefine,is,isDefined,isArray,getFields;\n    \n                    let var_init_locked_1609121326535;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 根据获取原始数据转换后正式数据\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import define from object.property.define\r\n * \r\n * @import innerDefine from object.property.inner.define\r\n * \r\n * @import is from is.data.item\r\n * \r\n * @import is.defined\r\n * \r\n * @import is.array\r\n * \r\n * @import getFields from .fields\r\n * \r\n * @param {mixed} record 数据记录 \r\n * \r\n * @param {mixed} raw 行级原始数据\r\n * \r\n * @param {array} raws 一组行级原始数据\r\n * \r\n * @param {number} index 原始数据下标\r\n * \r\n * @param {mixed} data 原始数据\r\n * \r\n * @param {function} [addFields = () => {}] 自定义数据记录\r\n * \r\n * @return {object} 正式数据\r\n * \r\n */\r\n\r\n function main(record , raw , raws , index , data , addFields){\r\n\r\n    let me = this,\r\n    {\r\n        fields\r\n    } = me,\r\n    isConvert = isDefined(raw) && isDefined(raws) && isDefined(index) && isDefined(data) ;\r\n\r\n    record = record || {} ;\r\n\r\n    innerDefine(record , 'DATA_RECORD' , true) ;\r\n\r\n    processFields(isConvert , record , fields , raw , raws , index , data) ;\r\n\r\n    let additionalFields = addFields(record) ;\r\n\r\n    if(isDefined(additionalFields)){\r\n\r\n        additionalFields = getFields.call(me , additionalFields) ;\r\n\r\n        processFields(isConvert , record , additionalFields , raw , raws , index , data) ;\r\n    }\r\n    \r\n    return record ;\r\n }\r\n\r\n function processFields(isConvert , record , fields , raw , raws , index , data){\r\n\r\n    for(let {\r\n        name,\r\n        convert,\r\n        mode,\r\n        equals,\r\n        set,\r\n        afterSet,\r\n        get,\r\n        defaultValue\r\n    } of fields){\r\n\r\n        if(record.hasOwnProperty(name)){\r\n\r\n            continue ;\r\n        }\r\n    \r\n        if(isConvert){\r\n    \r\n            let value = convert(raw , raws , index , data) ;\r\n    \r\n            define(record , name , {\r\n                mode,\r\n                equals,\r\n                set,\r\n                afterSet,\r\n                get,\r\n                value\r\n            }) ;\r\n        \r\n        }else{\r\n\r\n            let config = {\r\n                mode,\r\n                equals,\r\n                set,\r\n                afterSet,\r\n                get\r\n            } ;\r\n\r\n            if(raw){\r\n\r\n                let value = raw[name] ;\r\n\r\n                config.value = isDefined(value) ? value : defaultValue() ;\r\n            \r\n            }else{\r\n\r\n                config.value = defaultValue() ;\r\n            }\r\n    \r\n            define(record , name , config) ;\r\n        }\r\n    }\r\n }\n    \n                    return function(record , raw , raws , index , data , addFields = () => {}){\n    \n                        \n        if(!var_init_locked_1609121326535){\n\n            generate = include('src::id.generate');\ndefine = include('src::object.property.define');\ninnerDefine = include('src::object.property.inner.define');\nis = include('src::is.data.item');\nisDefined = include('src::is.defined');\nisArray = include('src::is.array');\ngetFields = include('src::data.reader.fields');\n\n            var_init_locked_1609121326535 = true ;\n        }\n        \n    \n                        return main.call(this , record , raw , raws , index , data , addFields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.record"
  },
  "src::data.reader.raws": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::data.reader.raws(<mixed> data , <string> root)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,from;\n    \n                    let var_init_locked_1609121326637;\n    \n                    \n\n                    function main(data , root){\n\n        \r\n/**\r\n * \r\n * 获取一组原始数据用来解析数据记录\r\n * \r\n * @import is.function\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} data 原始数据\r\n * \r\n * @param {string} root 根遍历路径\r\n * \r\n * @return {array} 一组原始数据 \r\n * \r\n */\r\n\r\nlet {\r\n    getData\r\n} = this,\r\nraws;\r\n\r\nif(isFunction(root)){\r\n\r\n    raws = root(data) ;\r\n\r\n}else{\r\n\r\n    raws = getData(data , root) ;\r\n}\r\n\r\nreturn from(raws) ;\n\n    }\n    \n                    return function(data , root){\n    \n                        \n        if(!var_init_locked_1609121326637){\n\n            isFunction = include('src::is.function');\nfrom = include('src::array.from');\n\n            var_init_locked_1609121326637 = true ;\n        }\n        \n    \n                        return main.call(this , data , root) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.raws"
  },
  "src::data.reader.names": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.reader.names(<array> fields)",
    "standard": true,
    "importNames": [
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121326664;\n    \n                    \n\n                    function main(fields){\n\n        \r\n/**\r\n * \r\n * 根据字段定义获取相关字段名称信息\r\n * \r\n * @import is.function\r\n * \r\n * @param {array} fields 字段集合\r\n * \r\n * @return {object} 名称集合\r\n * \r\n */\r\n\r\n let names = [] ;\r\n\r\nfor(let {\r\n    name\r\n} of fields){\r\n\r\n    names.push(name) ;\r\n}\r\n\r\nreturn names ;\n\n    }\n    \n                    return function(fields){\n    \n                        \n        if(!var_init_locked_1609121326664){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121326664 = true ;\n        }\n        \n    \n                        return main.call(this , fields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.names"
  },
  "src::data.reader.data": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::data.reader.data(<data.Record> record , <object> options)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.define",
      "src::object.property.inner.get",
      "src::object.clear",
      "src::data.clone",
      "src::is.function",
      "src::data.reader.fields",
      "src::is.defined",
      "src::data.reader.names"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let define,get,clear,clone,isFunction,getFields,isDefined,getNames;\n    \n                    let var_init_locked_1609121326650;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 基于数据记录生成一个与之对应的只读数据对象\r\n * \r\n * @import define from object.property.inner.define\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @import clear from object.clear\r\n * \r\n * @import clone from data.clone\r\n * \r\n * @import is.function\r\n * \r\n * @import getFields from .fields\r\n * \r\n * @import is.defined\r\n * \r\n * @import getNames from .names\r\n * \r\n * @param {data.Record} record 数据记录\r\n * \r\n * @param {object} [options = {}] 配置\r\n * \r\n * @return {object} 数据对象\r\n * \r\n */\r\n\r\n const {\r\n    defineProperty\r\n } = Object ;\r\n\r\n function main(record , {\r\n    ignoreFields = [],\r\n    fields = {}\r\n }){\r\n\r\n    let me = this,\r\n    {\r\n        names\r\n    } = me,\r\n    addNames = getNames(me.getAddFields(record));\r\n\r\n    names = [\r\n        ...names,\r\n        ...addNames,\r\n        ...Object.keys(fields)\r\n    ] ;\r\n\r\n    names = Array.from(new Set(names)) ;\r\n\r\n    let data = {},\r\n        cache = {};\r\n\r\n    for(let name of names){\r\n\r\n        if(ignoreFields.includes(name)){\r\n\r\n            continue ;\r\n        }\r\n\r\n        defineProperty(data , name , {\r\n            get(){\r\n\r\n                if(cache.hasOwnProperty(name)){\r\n\r\n                    return cache[name] ;\r\n                }\r\n\r\n                if(fields.hasOwnProperty(name)){\r\n\r\n                    return cache[name] = clone(fields[name](record)) ;\r\n                }\r\n\r\n                return cache[name] = clone(record[name]) ;\r\n            },\r\n            enumerable:true\r\n        }) ;\r\n    }\r\n\r\n    return data ;\r\n }\n    \n                    return function(record , options = {}){\n    \n                        \n        if(!var_init_locked_1609121326650){\n\n            define = include('src::object.property.inner.define');\nget = include('src::object.property.inner.get');\nclear = include('src::object.clear');\nclone = include('src::data.clone');\nisFunction = include('src::is.function');\ngetFields = include('src::data.reader.fields');\nisDefined = include('src::is.defined');\ngetNames = include('src::data.reader.names');\n\n            var_init_locked_1609121326650 = true ;\n        }\n        \n    \n                        return main.call(this , record , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.data"
  },
  "src::data.reader": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.reader()",
    "standard": true,
    "importNames": [
      "src::data.reader.fields",
      "src::data.reader.record",
      "src::data.reader.raws",
      "src::is.object.simple",
      "src::data.reader.data",
      "src::data.reader.names",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getFields,getRecord,getRaws,isObject,createData,getNames,isDefined;\n    \n                    let var_init_locked_1609121326500;\n    \n                    let var_class_1609121326500;\n    \n                    \n\n                    let var_global_main_1609121326500 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121326500){\n\n            getFields = include('src::data.reader.fields');\ngetRecord = include('src::data.reader.record');\ngetRaws = include('src::data.reader.raws');\nisObject = include('src::is.object.simple');\ncreateData = include('src::data.reader.data');\ngetNames = include('src::data.reader.names');\nisDefined = include('src::is.defined');\n\n            /**\r\n * \r\n * 数据读取器\r\n * \r\n * @import getFields from .reader.fields\r\n * \r\n * @import getRecord from .reader.record\r\n * \r\n * @import getRaws from .reader.raws\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import createData from .reader.data\r\n * \r\n * @import getNames from .reader.names\r\n * \r\n * @import is.defined\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n class main {\r\n\r\n    constructor(fields = [] , addFields){\r\n\r\n        let me = this ;\r\n\r\n        fields = getFields.call(me , fields) ;\r\n\r\n        me.addFields = addFields ;\r\n\r\n        let names = getNames(fields) ;\r\n\r\n        me.names = names ;\r\n\r\n        me.fields = fields ;\r\n    }\r\n\r\n    data(record , options){\r\n\r\n        return createData.call(this , record , options) ;\r\n    }\r\n\r\n    getAddFieldNames(record){\r\n\r\n        let {\r\n            names\r\n        } = this.getAddFields(record) ;\r\n\r\n        return names ;\r\n    }\r\n\r\n    getAddFields(record){\r\n\r\n        let me = this,\r\n        {\r\n            addFields\r\n        } = me,\r\n        additionalFields = addFields(record);\r\n    \r\n        if(isDefined(additionalFields)){\r\n    \r\n            return getFields.call(me , additionalFields) ;\r\n        }\r\n    \r\n        return [] ;\r\n    }\r\n\r\n    create(data){\r\n\r\n        let me = this,\r\n        {\r\n            addFields\r\n        } = me ;\r\n\r\n        return getRecord.call(me , undefined , data , undefined , undefined , undefined , addFields) ;\r\n    }\r\n\r\n    read(data , root = '.'){\r\n\r\n        let config = {\r\n            root:'.',\r\n            multi:true\r\n        } ;\r\n\r\n        if(isObject(root)){\r\n\r\n            Object.assign(config , root) ;\r\n        \r\n        }else{\r\n\r\n            config.root = root ;\r\n        }\r\n\r\n        root = config.root ;\r\n\r\n        let {\r\n            multi\r\n        } = config,\r\n        me = this,\r\n        {\r\n            addFields\r\n        } = me,\r\n        raws = getRaws.call(me , data , root),\r\n        records = [],\r\n        count = 0;\r\n\r\n        if(multi === false && raws.length){\r\n\r\n            return getRecord.call(me , null , raws[0] , raws , count , data , addFields) ;\r\n        }\r\n\r\n        for(let raw of raws){\r\n\r\n            records.push(getRecord.call(me , null , raw , raws , count ++ , data , addFields)) ;\r\n        }\r\n\r\n        return records ;\r\n    }\r\n }\n\n            var_class_1609121326500 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326500 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.reader' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326500 ;\n        \nvar_global_main_1609121326500 = main;\n\n            var_init_locked_1609121326500 = true ;\n        }\n        \n    \n                        return var_global_main_1609121326500 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader"
  },
  "src::string.split": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::string.split(<String> target , <RegEx> splitRe)",
    "standard": true,
    "importNames": [
      "src::is.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isEmpty;\n    \n                    let var_init_locked_1609121326704;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 将字符串通过间隔符分隔成数组\r\n * \r\n * @import is.empty\r\n * \r\n * @param {String} target 字符串\r\n * \r\n * @param {RegEx} splitRe 字符串分隔符\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nfunction main(target , splitRe){\r\n\r\n    return target.split(splitRe).filter(filter) ;\r\n }\r\n\r\n function filter(target){\r\n\r\n    return !isEmpty(target) ;\r\n }\n    \n                    return function(target , splitRe){\n    \n                        \n        if(!var_init_locked_1609121326704){\n\n            isEmpty = include('src::is.empty');\n\n            var_init_locked_1609121326704 = true ;\n        }\n        \n    \n                        return main.call(this , target , splitRe) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "string.split"
  },
  "src::object.value.get": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::object.value.get(<object> data , <string> key)",
    "standard": true,
    "importNames": [
      "src::string.split",
      "src::is.object",
      "src::is.array"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let split,isObject,isArray;\n    \n                    let var_init_locked_1609121326687;\n    \n                    \n\n                    function main(data , key){\n\n        \r\n/**\r\n * \r\n * 获得一个对象的键值\r\n * \r\n * @import split from string.split\r\n * \r\n * @import is.object\r\n * \r\n * @import is.array\r\n * \r\n * @param {object} data 对象数据\r\n * \r\n * @param {string} [key = '.'] 对象键值\r\n * \r\n * @return {mixed} 对应对象数据的键值的数据 \r\n * \r\n */\r\n\r\nif(key === '.'){\r\n\r\n    return data ;\r\n}\r\n\r\nconst arrayItemRe1 = /^(\\w+)\\[(\\d+)\\]$/,\r\n      arrayItemRe2 = /^\\[(\\d+)\\]$/;\r\n\r\nif(isObject(data) || isArray(data)){\r\n\r\n    let keys = split(key , /\\./),\r\n        result;\r\n\r\n    for(let key of keys){\r\n\r\n        if(arrayItemRe1.test(key) || arrayItemRe2.test(key)){\r\n\r\n            {\r\n                let keyMatch = key.match(arrayItemRe1) ;\r\n    \r\n                if(keyMatch){\r\n    \r\n                    result = data[keyMatch[1]][Number(keyMatch[2])] ;\r\n                \r\n                }\r\n            }\r\n    \r\n            {\r\n                let keyMatch = key.match(arrayItemRe2) ;\r\n    \r\n                if(keyMatch){\r\n    \r\n                    result = data[Number(keyMatch[1])] ;\r\n                \r\n                }\r\n            }\r\n        \r\n        }else{\r\n\r\n            result = data[key] ;\r\n        }\r\n\r\n        if(isObject(result) || isArray(result)){\r\n\r\n            data = result ;\r\n        \r\n        }else{\r\n\r\n            break ;\r\n        }\r\n    }\r\n\r\n    return result ;\r\n}\n\n    }\n    \n                    return function(data , key = '.'){\n    \n                        \n        if(!var_init_locked_1609121326687){\n\n            split = include('src::string.split');\nisObject = include('src::is.object');\nisArray = include('src::is.array');\n\n            var_init_locked_1609121326687 = true ;\n        }\n        \n    \n                        return main.call(this , data , key) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.value.get"
  },
  "src::data.reader.json": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.reader.json(<object> fields , <function> addFields)",
    "standard": true,
    "importNames": [
      "src::data.reader",
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Reader,get;\n    \n                    let var_init_locked_1609121326481;\n    \n                    let var_class_1609121326481;\n    \n                    \n\n                    let var_global_main_1609121326481 ;\n    \n                    return function(fields , addFields){\n    \n                        \n        if(!var_init_locked_1609121326481){\n\n            Reader = include('src::data.reader')();\nget = include('src::object.value.get');\n\n            /**\r\n * \r\n * JSON 数据读取器\r\n * \r\n * @import Reader from data.reader value\r\n * \r\n * @import get from object.value.get\r\n * \r\n * @param {object} fields 字段配置\r\n * \r\n * @param {function} addFields 附加字段配置\r\n * \r\n */\r\n\r\n class main extends Reader{\r\n\r\n   getData(data , path){\r\n\r\n      return get(data , path) ;\r\n   }\r\n   \r\n }\n\n            var_class_1609121326481 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326481 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.reader.json' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326481 ;\n        \nvar_global_main_1609121326481 = main;\n\n            var_init_locked_1609121326481 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326481(fields , addFields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.reader.json"
  },
  "src::data.proxy.create": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::data.proxy.create(<mixed> proxy)",
    "standard": true,
    "importNames": [
      "src::class.create.option"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let create;\n    \n                    let var_init_locked_1609121326722;\n    \n                    \n\n                    function main(proxy){\n\n        \r\n/**\r\n * \r\n * 创建新的代理\r\n * \r\n * @import create from class.create.option\r\n * \r\n * @param {mixed} [proxy = 'memory'] 数据代理\r\n * \r\n * @return {mixed} 数据代理 \r\n * \r\n */\r\n\r\n return create('data.proxy' , proxy) ;\n\n    }\n    \n                    return function(proxy = 'memory'){\n    \n                        \n        if(!var_init_locked_1609121326722){\n\n            create = include('src::class.create.option');\n\n            var_init_locked_1609121326722 = true ;\n        }\n        \n    \n                        return main.call(this , proxy) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.proxy.create"
  },
  "src::class.create.option": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::class.create.option(<string> namespace , <mixed> option)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.object.simple",
      "src::is.class",
      "src::class.create",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isObject,isClass,create,isDefined;\n    \n                    let var_init_locked_1609121326741;\n    \n                    \n\n                    function main(namespace , option){\n\n        /**\r\n * \r\n * 基于配置的实例\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.class\r\n * \r\n * @import create from class.create\r\n * \r\n * @import is.defined\r\n * \r\n * @param {string} namespace 命名空间\r\n * \r\n * @param {mixed}  [option] 配置\r\n * \r\n * @return {mixed} 类实例\r\n * \r\n */\r\n\r\n if(isString(option)){\r\n\r\n    return create(`${namespace}.${option}`) ;\r\n\r\n }else if(isObject(option)){\r\n\r\n    let {\r\n        type,\r\n        ...currentOptions\r\n    } = option,\r\n    name;\r\n\r\n    if(type){\r\n\r\n        name = `${namespace}.${type}` ;\r\n    \r\n    }else{\r\n\r\n        name = namespace ;\r\n    }\r\n\r\n    return create(name , currentOptions) ;\r\n \r\n}else if(!isDefined(options)){\r\n\r\n    return create(namespace) ;\r\n}\n\n    }\n    \n                    return function(namespace , option){\n    \n                        \n        if(!var_init_locked_1609121326741){\n\n            isString = include('src::is.string');\nisObject = include('src::is.object.simple');\nisClass = include('src::is.class');\ncreate = include('src::class.create');\nisDefined = include('src::is.defined');\n\n            var_init_locked_1609121326741 = true ;\n        }\n        \n    \n                        return main.call(this , namespace , option) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "class.create.option"
  },
  "src::data.proxy.memory": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.proxy.memory(<object> options)",
    "standard": true,
    "importNames": [
      "src::data.proxy"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Proxy;\n    \n                    let var_init_locked_1609121326759;\n    \n                    let var_class_1609121326759;\n    \n                    \n\n                    let var_global_main_1609121326759 ;\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121326759){\n\n            Proxy = include('src::data.proxy')();\n\n            \r\n/**\r\n * \r\n * 内存数据代理\r\n * \r\n * @param {object} options 配置\r\n * \r\n * @import Proxy from data.proxy value\r\n * \r\n */\r\n\r\n class main extends Proxy{\r\n\r\n    get proxyType(){\r\n\r\n        return 'memory' ;\r\n    }\r\n\r\n    doRead(data){\r\n\r\n        return data; \r\n    }\r\n }\n\n            var_class_1609121326759 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326759 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.proxy.memory' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326759 ;\n        \nvar_global_main_1609121326759 = main;\n\n            var_init_locked_1609121326759 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121326759(options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.proxy.memory"
  },
  "src::data.proxy.read": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.proxy.read(<mixed> options)",
    "standard": true,
    "importNames": [
      "src::is.promise"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isPromise;\n    \n                    let var_init_locked_1609121326795;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 读取数据\r\n * \r\n * @import is.promise\r\n * \r\n * @param {mixed} options 读取数据配置\r\n * \r\n */\r\n\r\nfunction fireReadEvent(data){\r\n\r\n    let me = this,\r\n    {\r\n        reader\r\n    } = me ;\r\n\r\n    me.fireEvent('read' , reader(data)) ;\r\n}\r\n\r\nfunction main(options){\r\n\r\n    let me = this,\r\n    {\r\n        proxy\r\n    } = me,\r\n    data = proxy.call('doRead' , options);\r\n   \r\n    if(isPromise(data)){\r\n   \r\n       data.then(data => fireReadEvent.call(me , data)) ;\r\n    \r\n    }else{\r\n\r\n        fireReadEvent.call(me , data) ;\r\n    }\r\n}\r\n\r\n\r\n\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121326795){\n\n            isPromise = include('src::is.promise');\n\n            var_init_locked_1609121326795 = true ;\n        }\n        \n    \n                        return main.call(this , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.proxy.read"
  },
  "src::data.proxy": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.proxy()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::data.proxy.constructor",
      "src::data.proxy.read",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1609121326776__1,extend,constructor,method_read,isObject;\n    \n                    let var_init_locked_1609121326776;\n    \n                    let var_class_1609121326776;\n    \n                    \n\n                    let var_global_main_1609121326776 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121326776){\n\n            mixin_1609121326776__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::data.proxy.constructor');\nmethod_read = include('src::data.proxy.read');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            read(...args){\n\n            return method_read.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121326776 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326776 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.proxy' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326776 ;\n        \nvar_global_main_1609121326776 = main;\n\n            var_init_locked_1609121326776 = true ;\n        }\n        \n    \n                        return var_global_main_1609121326776 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.proxy"
  },
  "src::data.recordset": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::data.recordset(<data.Reader> reader , <array> records)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.define",
      "src::object.property.inner.get",
      "src::data.observable",
      "src::is.data.record",
      "src::is.array",
      "src::is.class"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let define,get,createObservable,is,isArray,isClass;\n    \n                    let var_init_locked_1609121326820;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 创建一个专有于数据读取器的数组\r\n * \r\n * @import define from object.property.inner.define\r\n * \r\n * @import get from object.property.inner.get\r\n * \r\n * @import createObservable from .observable\r\n * \r\n * @import is from is.data.record\r\n * \r\n * @import is.array\r\n * \r\n * @import is.class\r\n * \r\n * @param {data.Reader} reader 数据读取器\r\n * \r\n * @param {array} records 数据记录数组\r\n * \r\n * @return {array} 数组\r\n * \r\n */\r\n\r\nconst {\r\n    push\r\n} = Array.prototype ;\r\n\r\nfunction main(reader , records){\r\n\r\n    let recordset = new Recordset() ;\r\n\r\n    define(recordset , 'reader' , reader) ;\r\n\r\n    define(recordset , 'observable' , createObservable()) ;\r\n\r\n    push.call(recordset , ...createRecords.call(recordset , records)) ;\r\n\r\n    return recordset ;\r\n\r\n}\r\n\r\nclass Recordset extends Array{\r\n\r\n    push(...raws){  \r\n\r\n        return super.push(...createRecords.call(this , raws)) ;\r\n    }\r\n\r\n    unshift(...raws){\r\n\r\n        return super.unshift(...createRecords.call(this , raws)) ;\r\n    }\r\n\r\n    splice(index , howMany , ...raws){\r\n\r\n        let me = this,\r\n        {\r\n            length\r\n        } = me;\r\n\r\n        for(let i = 0 ; i < howMany ; i ++){\r\n\r\n            let itemIndex = index + i ;\r\n\r\n            if(itemIndex < length){\r\n\r\n                get(me[itemIndex] , 'observable').independent() ;\r\n            }\r\n        }\r\n\r\n        return super.splice(index , howMany , ...createRecords.call(me , raws)) ;\r\n    }\r\n\r\n    pop(){\r\n\r\n        let me = this,\r\n        {\r\n            length\r\n        } = me;\r\n\r\n        if(length){\r\n\r\n            get(me[length - 1] , 'observable').independent() ;\r\n        }\r\n\r\n        return super.pop() ;\r\n    }\r\n\r\n    shift(){\r\n\r\n        let me = this,\r\n        {\r\n            length\r\n        } = me;\r\n\r\n        if(length){\r\n\r\n            get(me[0] , 'observable').independent() ;\r\n        }\r\n\r\n        return super.shift() ;\r\n    }\r\n }\r\n\r\n function createRecords(raws){\r\n\r\n    let records = [],\r\n        readRaws = [],\r\n        me = this;\r\n\r\n    for(let raw of raws){\r\n\r\n        if(is(raw)){\r\n\r\n            let observable = get(raw , 'observable');\r\n\r\n            if(observable.isIndependent){\r\n\r\n                observable.belongTo(me) ;\r\n\r\n                records.push(raw) ;\r\n            }\r\n\r\n        }else{\r\n\r\n            readRaws.push(raw) ;\r\n        }\r\n    }\r\n\r\n    let recordset = get(me , 'reader').read(readRaws , {\r\n        isRecordset:false\r\n    }) ;\r\n\r\n    for(let record of recordset){\r\n\r\n        get(record , 'observable').belongTo(me) ;\r\n\r\n        records.push(record) ;\r\n\r\n    }\r\n\r\n    return records ;\r\n }\n    \n                    return function(reader , records){\n    \n                        \n        if(!var_init_locked_1609121326820){\n\n            define = include('src::object.property.inner.define');\nget = include('src::object.property.inner.get');\ncreateObservable = include('src::data.observable');\nis = include('src::is.data.record');\nisArray = include('src::is.array');\nisClass = include('src::is.class');\n\n            var_init_locked_1609121326820 = true ;\n        }\n        \n    \n                        return main.call(this , reader , records) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.recordset"
  },
  "src::data.store.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.add(<mixed> records , <boolean> isFireEvent)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(records , isFireEvent){\n\n        /**\r\n * \r\n * 插入记录\r\n * \r\n * @param {mixed} records 数据记录\r\n * \r\n * @param {boolean} [isFireEvent = true] 是否触发插入事件\r\n * \r\n */\r\n\r\nlet me = this,\r\n {\r\n   recordset\r\n } = me ;\r\n\r\n records = recordset.add(records) ;\r\n\r\n if(records.length){\r\n\r\n    if(isFireEvent){\r\n\r\n      me.fireEvent('add' , records) ;\r\n    }\r\n }\r\n\r\n return records ;\n\n    }\n    \n                    return function(records , isFireEvent = true){\n    \n                        \n    \n                        return main.call(this , records , isFireEvent) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.add"
  },
  "src::data.store.base": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.base()",
    "standard": true,
    "importNames": [
      "src::data.model.get",
      "src::data.model.create",
      "src::object.assign",
      "src::data.proxy.create",
      "src::is.proxy.memory",
      "src::data.reader.json"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,create,assign,createProxy,isMemoryProxy,createReader;\n    \n                    let var_init_locked_1609121326855;\n    \n                    let var_class_1609121326855;\n    \n                    \n\n                    let var_global_main_1609121326855 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121326855){\n\n            get = include('src::data.model.get');\ncreate = include('src::data.model.create');\nassign = include('src::object.assign');\ncreateProxy = include('src::data.proxy.create');\nisMemoryProxy = include('src::is.proxy.memory');\ncreateReader = include('src::data.reader.json');\n\n            \r\n/**\r\n * \r\n * 数据存储器\r\n * \r\n * @import get from data.model.get\r\n * \r\n * @import create from data.model.create\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import createProxy from data.proxy.create\r\n * \r\n * @import isMemoryProxy from is.proxy.memory\r\n * \r\n * @import createReader from data.reader.json\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nclass main{\r\n\r\n    createRecord(data){\r\n\r\n        let records = this.reader(data) ;\r\n\r\n        if(records.length){\r\n\r\n            return records[0] ;\r\n        }\r\n    }\r\n\r\n    onProxyRead(proxy , records){\r\n\r\n        let me = this,\r\n        {\r\n            recordset\r\n        } = me;\r\n\r\n        recordset.add(records) ;\r\n\r\n        me.fireEvent('load' , records) ;\r\n    }\r\n}\r\n\r\n \n\n            var_class_1609121326855 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121326855 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.store.base' ;\n                }\n\n            } ;\n\n            main = var_class_1609121326855 ;\n        \nvar_global_main_1609121326855 = main;\n\n            var_init_locked_1609121326855 = true ;\n        }\n        \n    \n                        return var_global_main_1609121326855 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.base"
  },
  "src::is.proxy.memory": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.proxy.memory(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::data.proxy"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Proxy;\n    \n                    let var_init_locked_1609121326874;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断是否内存代理\r\n * \r\n * @import Proxy from data.proxy value\r\n * \r\n * @param {mixed} data 测试数据\r\n * \r\n * @return {boolean} 如果为内存代理则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n\r\n return data instanceof Proxy && data.proxyType === 'memory' ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121326874){\n\n            Proxy = include('src::data.proxy')();\n\n            var_init_locked_1609121326874 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.proxy.memory"
  },
  "src::data.store.clear": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.clear()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 清理\r\n * \r\n * \r\n */\r\n\r\nlet me = this,\r\n    {\r\n        recordset\r\n    } = me ;\r\n\r\nrecordset.clear() ;\r\n\r\nme.fireEvent('clear') ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.clear"
  },
  "src::data.store.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.constructor({<object> proxy , <mixed> data , <boolean> autoLoad , <array> fields , <data.Model> model})",
    "standard": true,
    "importNames": [
      "src::data.model.create",
      "src::data.model.get",
      "src::object.assign",
      "src::data.proxy.create",
      "src::is.proxy.memory",
      "src::data.reader.json",
      "src::data.recordset",
      "src::object.link"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let create,get,assign,createProxy,isMemoryProxy,createReader,createRecordset,link;\n    \n                    let var_init_locked_1609121326936;\n    \n                    \n\n                    function main({proxy , data , autoLoad , fields , model}){\n\n        \r\n/**\r\n * \r\n * 初始化数据存储器\r\n * \r\n * @import create from data.model.create\r\n * \r\n * @import get from data.model.get\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import createProxy from data.proxy.create\r\n * \r\n * @import isMemoryProxy from is.proxy.memory\r\n * \r\n * @import createReader from data.reader.json\r\n * \r\n * @import createRecordset from data.recordset\r\n * \r\n * @import link from object.link\r\n * \r\n * @param {object} config 配置\r\n * \r\n * @param {object} [config.proxy = {}] 数据代理\r\n * \r\n * @param {mixed} [config.data] 初始数据\r\n * \r\n * @param {boolean} [config.autoLoad = false] 自动加载\r\n * \r\n * @param {array} [config.fields] 数据字段定义\r\n * \r\n * @param {data.Model} [config.model] 数据模型\r\n * \r\n * \r\n */\r\n\r\nif(fields){\r\n\r\n    model = create({\r\n        fields\r\n    }) ;\r\n\r\n}\r\n\r\nif(model){\r\n\r\n    model = get(model) ;\r\n\r\n}\r\n\r\nlet me = this ;\r\n\r\nme.proxy = createProxy(assign({\r\n    type:'memory',\r\n    model,\r\n    reader:{\r\n        type:'json'\r\n    },\r\n    listeners:{\r\n        read:'onProxyRead',\r\n        scope:me\r\n    }\r\n} , proxy)) ;\r\n\r\nlet recordset = me.recordset = createRecordset(me) ;\r\n\r\nif(data){\r\n\r\n    let {\r\n        proxy\r\n    } = me ;\r\n\r\n    if(isMemoryProxy(proxy)){\r\n\r\n        proxy.read(data)\r\n    }\r\n\r\n}else if(autoLoad){\r\n\r\n    me.load() ;\r\n}\r\n\r\nme.reader = createReader({\r\n    model\r\n}) ;\r\n\r\nlink(me , recordset , [\r\n    'indexOf',\r\n    'findRecords',\r\n    'getById'\r\n]) ;\n\n    }\n    \n                    return function({proxy = {} , data , autoLoad = false , fields , model}){\n    \n                        \n        if(!var_init_locked_1609121326936){\n\n            create = include('src::data.model.create');\nget = include('src::data.model.get');\nassign = include('src::object.assign');\ncreateProxy = include('src::data.proxy.create');\nisMemoryProxy = include('src::is.proxy.memory');\ncreateReader = include('src::data.reader.json');\ncreateRecordset = include('src::data.recordset');\nlink = include('src::object.link');\n\n            var_init_locked_1609121326936 = true ;\n        }\n        \n    \n                        return main.call(this , {proxy , data , autoLoad , fields , model}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.constructor"
  },
  "src::object.link": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.link(<mixed> dest , <mixed> source , <array> names)",
    "standard": true,
    "importNames": [
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121326979;\n    \n                    \n\n                    function main(dest , source , names){\n\n        /**\r\n * \r\n * 将对象的方法或者属性进行链接\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} dest 目标对象\r\n * \r\n * @param {mixed} source 来源对象\r\n * \r\n * @param {array} names 字段名称集合\r\n * \r\n */\r\n\r\n for(let name of names){\r\n\r\n    let value = source[name] ;\r\n\r\n    if(isFunction(value)){\r\n\r\n        dest[name] = (...args) => source[name](...args) ;\r\n    \r\n    }else{\r\n\r\n        Object.defineProperty(dest , name , {\r\n\r\n            set:value => source[name] = value,\r\n\r\n            get:() => source[name]\r\n\r\n        }) ;\r\n    }\r\n }\n\n    }\n    \n                    return function(dest , source , names){\n    \n                        \n        if(!var_init_locked_1609121326979){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121326979 = true ;\n        }\n        \n    \n                        return main.call(this , dest , source , names) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.link"
  },
  "src::data.store.create": {
    "meta": "code.meta.script.function",
    "signature": "<data.Store> src::data.store.create(<object> model)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(model){\n\n        \r\n/**\r\n * \r\n * 创建新的数据存储器\r\n * \r\n * @param {object} model 数据模型定义\r\n * \r\n * @return {data.Store} 创建后的数据存储器\r\n * \r\n */\n\n    }\n    \n                    return function(model){\n    \n                        \n    \n                        return main.call(this , model) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.create"
  },
  "src::data.store.destroy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.destroy()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 销毁数据存储器\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n   records,\r\n   recordMap\r\n } = me ;\r\n\r\n for(let record of records){\r\n\r\n   record.destroy() ;\r\n\r\n   delete recordMap[record.id] ;\r\n }\r\n\r\n records.length = 0 ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.destroy"
  },
  "src::data.store.find.records": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::data.store.find.records(<mixed> property , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isFunction;\n    \n                    let var_init_locked_1609121327063;\n    \n                    \n\n                    function main(property , value){\n\n        \r\n/**\r\n * \r\n * 寻找符合查询条件的记录\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} property 属性名称\r\n * \r\n * @param {mixed} value 属性值\r\n * \r\n * @return {array} 查询出来的数据记录\r\n * \r\n */\r\n\r\n let {\r\n    recordset\r\n } = this ;\r\n\r\n return recordset.findRecords(property , value) ;\n\n    }\n    \n                    return function(property , value){\n    \n                        \n        if(!var_init_locked_1609121327063){\n\n            isString = include('src::is.string');\nisFunction = include('src::is.function');\n\n            var_init_locked_1609121327063 = true ;\n        }\n        \n    \n                        return main.call(this , property , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.find.records"
  },
  "src::data.store.get.id": {
    "meta": "code.meta.script.function",
    "signature": "<data.Model> src::data.store.get.id(<mixed> id)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(id){\n\n        \r\n/**\r\n * \r\n * 根据编号获取记录\r\n * \r\n * @param {mixed} id 记录编号\r\n * \r\n * @return {data.Model} 数据记录 \r\n * \r\n */\r\n\r\n let {\r\n    recordset\r\n } = this ;\r\n\r\n return recordset.getById(id) ;\n\n    }\n    \n                    return function(id){\n    \n                        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.get.id"
  },
  "src::data.store.insert": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.insert(<number> index , <mixed> records , <boolean> isFireEvent)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(index , records , isFireEvent){\n\n        \r\n/**\r\n * \r\n * 插入记录\r\n * \r\n * @param {number} index 插入位置\r\n * \r\n * @param {mixed} records 数据记录\r\n * \r\n * @param {boolean} [isFireEvent = true] 是否触发插入事件\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n   recordset\r\n } = me ;\r\n\r\n records = recordset.insert(index , records) ;\r\n\r\n if(records.length){\r\n\r\n    if(isFireEvent){\r\n\r\n      me.fireEvent('insert' , index , records) ;\r\n    }\r\n }\r\n\r\n return records ;\n\n    }\n    \n                    return function(index , records , isFireEvent = true){\n    \n                        \n    \n                        return main.call(this , index , records , isFireEvent) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.insert"
  },
  "src::data.store.load": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.load(<mixed> options , <boolean> isClear)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(options , isClear){\n\n        \r\n/**\r\n * \r\n * 加载数据\r\n * \r\n * @param {mixed} options 数据或者配置\r\n * \r\n * @param {boolean} [isClear = true] 是否在加载前清除\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    proxy\r\n} = me;\r\n\r\nif(isClear){\r\n\r\n    me.clear() ;\r\n}\r\n\r\nproxy.read(options) ;\n\n    }\n    \n                    return function(options , isClear = true){\n    \n                        \n    \n                        return main.call(this , options , isClear) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.load"
  },
  "src::data.store.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.remove(<mixed> records , <boolean> isFireEvent)",
    "standard": true,
    "importNames": [
      "src::array.remove",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove,from;\n    \n                    let var_init_locked_1609121327141;\n    \n                    \n\n                    function main(records , isFireEvent){\n\n        \r\n/**\r\n * \r\n * 删除记录\r\n * \r\n * @import remove from array.remove\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} records 数据记录\r\n * \r\n * @param {boolean} [isFireEvent = true] 是否触发删除事件\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    recordset\r\n } = me;\r\n\r\n records = recordset.remove(records) ;\r\n\r\n if(records.length && isFireEvent){\r\n\r\n   me.fireEvent('remove' , records) ;\r\n }\r\n\r\n return records ;\r\n\r\n\r\n\r\n\r\n\n\n    }\n    \n                    return function(records , isFireEvent = true){\n    \n                        \n        if(!var_init_locked_1609121327141){\n\n            remove = include('src::array.remove');\nfrom = include('src::array.from');\n\n            var_init_locked_1609121327141 = true ;\n        }\n        \n    \n                        return main.call(this , records , isFireEvent) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.remove"
  },
  "src::data.store.tree.base": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.tree.base()",
    "standard": true,
    "importNames": [
      "src::data.store",
      "src::data.model.node.tree.mind",
      "src::class.define",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Store,Model,define,from;\n    \n                    let var_init_locked_1609121327168;\n    \n                    let var_class_1609121327168;\n    \n                    \n\n                    let var_global_main_1609121327168 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121327168){\n\n            Store = include('src::data.store')();\nModel = include('src::data.model.node.tree.mind')();\ndefine = include('src::class.define');\nfrom = include('src::array.from');\n\n            \r\n/**\r\n * \r\n * 树型数据存储器\r\n * \r\n * @import Store from data.store value\r\n * \r\n * @import Model from data.model.node.tree.mind value\r\n * \r\n * @import define from class.define\r\n * \r\n * @import from from array.from\r\n * \r\n * @class\r\n * \r\n * \r\n */\r\n\r\n class main extends Store{\r\n\r\n    constructor({\r\n        fields,\r\n        rootConfig,\r\n        synchronize,\r\n        listeners = {},\r\n        ...options\r\n    }){\r\n\r\n        let currentModel ;\r\n\r\n        if(fields){\r\n\r\n            currentModel = define(class extends Model{\r\n\r\n                static get fieldConfigurations(){\r\n\r\n                    return [\r\n                        ...super.fieldConfigurations,\r\n                        ...fields\r\n                    ];\r\n                }\r\n            }) ;\r\n\r\n        }\r\n\r\n        super({\r\n            ...options,\r\n            model:currentModel,\r\n            listeners:[{\r\n                load:'onLoad',\r\n                expand:'onExpand',\r\n                collapse:'onCollapse'\r\n            } , listeners]\r\n        }) ;\r\n\r\n        let me = this ;\r\n\r\n        me.rootConfig = rootConfig || {} ;\r\n\r\n        me.synchronize = synchronize || (() => []) ;\r\n    }\r\n\r\n    onExpand(){\r\n\r\n        this.layout() ;\r\n\r\n    }\r\n\r\n    onCollapse(){\r\n\r\n        this.layout() ;\r\n    }\r\n\r\n    onLoad(store , nodes){\r\n\r\n        for(let node of nodes){\r\n\r\n            if(!node.isBindStore){\r\n\r\n                continue ;\r\n            }\r\n\r\n            let {\r\n                parentNode\r\n            } = node ;\r\n\r\n            if(!parentNode){\r\n                \r\n                let me = this,\r\n                {\r\n                    rootConfig\r\n                } = me ;\r\n\r\n                me.rootNode = node ;\r\n\r\n                node.set(rootConfig) ;\r\n\r\n                doReorder(node) ;\r\n\r\n                node.suspendEvents() ;\r\n\r\n                me.fireEvent('root' , node) ;\r\n\r\n                node.resumeEvents() ;\r\n\r\n                break ;\r\n            }\r\n        }\r\n    }\r\n }\r\n\r\n\r\n function doReorder(node){\r\n\r\n    let {\r\n        store,\r\n        childNodes\r\n    } = node ;\r\n\r\n    store.insert(store.indexOf(node) + 1 , childNodes) ;\r\n\r\n }\n\n            var_class_1609121327168 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121327168 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.store.tree.base' ;\n                }\n\n            } ;\n\n            main = var_class_1609121327168 ;\n        \nvar_global_main_1609121327168 = main;\n\n            var_init_locked_1609121327168 = true ;\n        }\n        \n    \n                        return var_global_main_1609121327168 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.tree.base"
  },
  "src::object.clone": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.clone(<object> target)",
    "standard": true,
    "importNames": [
      "src::object.assign"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign;\n    \n                    let var_init_locked_1609121327234;\n    \n                    \n\n                    function main(target){\n\n        \r\n/**\r\n * \r\n * 拷贝对象\r\n * \r\n * @import assign from .assign\r\n * \r\n * @param {object} target 目标数据\r\n * \r\n * @return {object} 拷贝后的对象\r\n * \r\n */\r\n\r\n return assign({} , target) ;\n\n    }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121327234){\n\n            assign = include('src::object.assign');\n\n            var_init_locked_1609121327234 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.clone"
  },
  "src::data.store": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store(<object> config)",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::array.clear",
      "src::object.clear",
      "src::array.clone",
      "src::object.clone",
      "src::array.from",
      "src::is.object.simple",
      "src::is.function",
      "src::is.number",
      "src::function.empty",
      "src::event.listener.add",
      "src::event.listener.remove",
      "src::id.generate",
      "src::is.empty",
      "src::is.string",
      "src::array.insert",
      "src::data.convert.number",
      "src::data.reader.json"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,aclear,oclear,aClone,oClone,from,isObject,isFunction,isNumber,empty,add,remove,generate,isEmpty,isString,insert,toNumber,createReader;\n    \n                    let var_init_locked_1609121327203;\n    \n                    let var_class_1609121327203;\n    \n                    \n\n                    let var_global_main_1609121327203 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121327203){\n\n            Observable = include('src::mixin.observable');\naclear = include('src::array.clear');\noclear = include('src::object.clear');\naClone = include('src::array.clone');\noClone = include('src::object.clone');\nfrom = include('src::array.from');\nisObject = include('src::is.object.simple');\nisFunction = include('src::is.function');\nisNumber = include('src::is.number');\nempty = include('src::function.empty')();\nadd = include('src::event.listener.add');\nremove = include('src::event.listener.remove');\ngenerate = include('src::id.generate');\nisEmpty = include('src::is.empty');\nisObject = include('src::is.object.simple');\nisFunction = include('src::is.function');\nisString = include('src::is.string');\ninsert = include('src::array.insert');\ntoNumber = include('src::data.convert.number');\ncreateReader = include('src::data.reader.json');\n\n            /**\r\n * \r\n * 数据存储器类\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import aclear from array.clear\r\n * \r\n * @import oclear from object.clear\r\n * \r\n * @import aClone from array.clone\r\n * \r\n * @import oClone from object.clone\r\n * \r\n * @import from from array.from\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.function\r\n * \r\n * @import is.number\r\n * \r\n * @import empty from function.empty value\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import remove from event.listener.remove\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import is.empty\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.function\r\n * \r\n * @import is.string\r\n * \r\n * @import insert from array.insert\r\n * \r\n * @import toNumber from data.convert.number\r\n * \r\n * @import createReader from data.reader.json\r\n * \r\n * @param {object} config 配置\r\n * \r\n * @class\r\n * \r\n */\r\n\r\nfunction defaultRecordId(record , me){\r\n\r\n    let {\r\n        idField\r\n    } = me ;\r\n\r\n    if(!record.hasOwnProperty(idField)){\r\n\r\n        Object.defineProperty(record , idField , {\r\n            enumerable: false,\r\n            configurable: false,\r\n            writable: false,\r\n            value:generate('record-')\r\n        }) ;\r\n    }\r\n\r\n    return record[idField] ;\r\n}\r\n\r\nfunction defaultRecordMerge(record){\r\n\r\n    return record ;\r\n}\r\n\r\nfunction defaultRecordValid(){\r\n\r\n    return true ;\r\n}\r\n\r\nfunction createFixedRecordPositions(sorts){\r\n\r\n    let results = [] ;\r\n\r\n    for(let sort of sorts){\r\n\r\n        if(isString(sort)){\r\n\r\n            sort = {\r\n                field:sort\r\n            } ;\r\n        }\r\n\r\n        if(isObject(sort)){\r\n\r\n            let {\r\n                field,\r\n                direction = 'asc'\r\n            } = sort;\r\n\r\n            switch(direction){\r\n\r\n                case 'asc':\r\n\r\n                    sort = (record , appendRecord) => toNumber(record[field]) <= toNumber(appendRecord[field]) ;\r\n\r\n                    break ;\r\n\r\n                case 'desc':\r\n\r\n                    sort = (record , appendRecord) => toNumber(record[field]) >= toNumber(appendRecord[field]) ;\r\n            }            \r\n        }\r\n        \r\n        if(isFunction(sort)){\r\n\r\n            results.push(sort) ;\r\n        }\r\n    }\r\n\r\n    return results ;\r\n}\r\n\r\nclass main extends mixins({\r\n    mixins:[\r\n        Observable\r\n    ]\r\n}){\r\n\r\n    constructor({\r\n        idField = '_id',\r\n        id = defaultRecordId,\r\n        merge = defaultRecordMerge,\r\n        valid = defaultRecordValid,\r\n        reader = {},\r\n        sorts = [],\r\n        properties = {},\r\n        isEmpty = false,\r\n        ...options\r\n    } = {}){\r\n\r\n        super(options) ;\r\n\r\n        if(isEmpty === true){\r\n\r\n            return ;\r\n        }\r\n\r\n        let me = this ;\r\n\r\n        me.idField = idField ;\r\n\r\n        me.doRecordMerge = merge ;\r\n\r\n        me.doRecordId = id ;\r\n\r\n        me.doRecordValid = valid ;\r\n\r\n        me.data = [] ;\r\n\r\n        me.ids = {} ;\r\n\r\n        me.reader = createReader(reader) ;\r\n\r\n        let names = Object.keys(properties),\r\n            orginProperties = {},\r\n            store = this;\r\n\r\n        for(let name of names){\r\n\r\n            let property = properties[name] ;\r\n\r\n            if(isFunction(property)){\r\n\r\n                orginProperties[name] = {\r\n                    enumerable:true,\r\n                    get(){\r\n\r\n                        return property(this , store) ;\r\n                    }\r\n                } ;\r\n\r\n            }else if(isObject(property)){\r\n\r\n                let {\r\n                    set = empty,\r\n                    get = empty\r\n                } = property ;\r\n\r\n                orginProperties[name] = {\r\n                    enumerable:true,\r\n                    get(){\r\n\r\n                        return get(this , store) ;\r\n                    },\r\n\r\n                    set(value){\r\n\r\n                        set(value , this , store) ;\r\n                    }\r\n                } ;\r\n            }\r\n        }\r\n\r\n        me.properties = orginProperties ;\r\n\r\n        me.fixedRecordPositions = createFixedRecordPositions(sorts) ;\r\n    }\r\n\r\n    clone(){\r\n\r\n        let target = new main({\r\n            isEmpty:true\r\n        }),\r\n        {\r\n            doRecordMerge,\r\n            doRecordId,\r\n            doRecordValid,\r\n            data,\r\n            ids,\r\n            reader,\r\n            properties,\r\n            fixedRecordPositions\r\n        } = this;\r\n\r\n        target.doRecordMerge = doRecordMerge ;\r\n\r\n        target.doRecordId = doRecordId ;\r\n\r\n        target.doRecordValid = doRecordValid ;\r\n\r\n        target.data = aClone(data) ;\r\n\r\n        target.ids = oClone(ids) ;\r\n\r\n        target.reader = reader ;\r\n\r\n        target.properties = properties ;\r\n\r\n        target.fixedRecordPositions = fixedRecordPositions ;\r\n\r\n        return target ;\r\n    }\r\n\r\n    get isEmpty(){\r\n\r\n        return this.data.length === 0 ;\r\n    }\r\n\r\n    pipe(store){\r\n\r\n        let me = this ;\r\n\r\n        me.pipeStore = store ;\r\n\r\n        let onPipeStoreLoad = () => {\r\n\r\n            let {\r\n                pipeData\r\n            } = this ;\r\n\r\n            if(!isEmpty(pipeData)){\r\n\r\n                store.load(pipeData) ;\r\n            }\r\n\r\n        },\r\n            onPipeStoreChange = () => {\r\n\r\n                let {\r\n                    pipeData\r\n                } = this ;\r\n    \r\n                if(!isEmpty(pipeData)){\r\n    \r\n                    store.append(pipeData) ;\r\n                }\r\n    \r\n            };\r\n\r\n        add(me , {\r\n            load:onPipeStoreLoad,\r\n            change:onPipeStoreChange\r\n        });\r\n\r\n        me.onPipeStoreLoad = onPipeStoreLoad ;\r\n\r\n        me.onPipeStoreChange = onPipeStoreChange ; \r\n\r\n        return store ;\r\n    }\r\n\r\n    unpipe(){\r\n\r\n        let me = this,\r\n        {\r\n            pipeStore,\r\n            onPipeStoreLoad,\r\n            onPipeStoreChange\r\n        } = me ;\r\n\r\n        if(pipeStore){\r\n\r\n            remove(me , {\r\n                load:onPipeStoreLoad,\r\n                change:onPipeStoreChange\r\n            }) ;\r\n\r\n            delete me.pipeStore ;\r\n\r\n            delete me.onPipeStoreLoad ;\r\n\r\n            delete me.onPipeStoreChange ;\r\n        }\r\n    }\r\n\r\n    getRecordById(id){\r\n\r\n        let me = this,\r\n        {\r\n            ids,\r\n            data\r\n        } = me ;\r\n\r\n        if(ids.hasOwnProperty(id)){\r\n\r\n            return data[ids[id]] ;\r\n        }\r\n    }\r\n\r\n    indexOf(record){\r\n\r\n        let me = this,\r\n        {\r\n            doRecordId,\r\n            ids\r\n        } = me,\r\n        index = ids[doRecordId(record , me)];\r\n\r\n        return isNumber(index) ? index : -1 ;\r\n    }\r\n\r\n    getPreviousRecord(record){\r\n\r\n        let me = this,\r\n        {\r\n            data\r\n        } = me,\r\n        index = me.indexOf(record);\r\n\r\n        if(index > 0){\r\n\r\n            return data[index - 1] ;\r\n        }\r\n    }\r\n\r\n    get last(){\r\n\r\n        let {\r\n            data,\r\n            isEmpty\r\n        } = this ;\r\n\r\n        if(!isEmpty){\r\n\r\n            return data[data.length - 1] ;\r\n        }\r\n    }\r\n\r\n    append(data , isFireEvent = true){\r\n\r\n        let me = this,\r\n        {\r\n            data:records,\r\n            doRecordMerge,\r\n            doRecordValid,\r\n            doRecordId,\r\n            reader,\r\n            properties\r\n        } = me ;\r\n\r\n        data = reader.read(data) ;\r\n\r\n        let updates = [],\r\n            appends = [],\r\n            all = [];\r\n\r\n        for(let record of data){\r\n\r\n            if(!doRecordValid(record , me)){\r\n\r\n                continue ;\r\n            }\r\n\r\n            if(properties){\r\n\r\n                Object.defineProperties(record , properties) ;\r\n            }\r\n\r\n            let id = doRecordId(record , me),\r\n                oldRecord = me.getRecordById(id) ;\r\n\r\n            if(oldRecord){\r\n\r\n                record = records[me.indexOf(oldRecord)] = doRecordMerge(record , oldRecord , me) ;\r\n\r\n                updates.push(record) ;\r\n\r\n                all.push(record) ;\r\n\r\n            }else{\r\n\r\n                me.doAppend(record) ;\r\n\r\n                appends.push(record) ;\r\n\r\n                all.push(record) ;\r\n                \r\n            }\r\n        }\r\n\r\n        if(appends.length && isFireEvent){\r\n\r\n            me.fireEvent('append' , appends) ;\r\n\r\n        }\r\n\r\n        if(updates.length && isFireEvent){\r\n\r\n            me.fireEvent('update' , updates) ;\r\n        }\r\n\r\n        if(all.length && isFireEvent){\r\n\r\n            me.fireEvent('change' , all) ;\r\n\r\n            me.fireEvent('pipedata' , all) ;\r\n        }\r\n        \r\n        return {\r\n            updates,\r\n            appends,\r\n            all\r\n        } ;\r\n    }\r\n\r\n    getAppendRecordIndex(record){\r\n\r\n        let me = this,\r\n        {\r\n            data,\r\n            fixedRecordPositions\r\n        } = me,\r\n        {\r\n            length:len\r\n        } = data,\r\n        fixedRecordPosition = 0,\r\n        fixedRecordPositionIndex = 0;\r\n\r\n        for(let i = len - 1 ; i >= 0 ; i --){\r\n\r\n            let item = data[i],\r\n                j = 0 ;\r\n\r\n            for(let doFixedRecordPosition of fixedRecordPositions){\r\n\r\n                if(j > fixedRecordPositionIndex){\r\n\r\n                    break ;\r\n                }\r\n\r\n                if(!doFixedRecordPosition(item , record , me)){\r\n\r\n                    break ;\r\n                }\r\n\r\n                j ++ ;\r\n            }\r\n\r\n            \r\n            if(j > fixedRecordPositionIndex){\r\n\r\n                fixedRecordPositionIndex ++ ;\r\n\r\n                fixedRecordPosition = i + 1 ;\r\n            \r\n            }else if(fixedRecordPositionIndex !== 0){\r\n\r\n                break ;\r\n            }\r\n        }\r\n        \r\n        if(fixedRecordPositions.length){\r\n\r\n            return fixedRecordPosition ;\r\n        }\r\n\r\n        return len ;\r\n    }\r\n\r\n    doAppend(record){\r\n\r\n        let me = this,\r\n        {\r\n            data,\r\n            ids,\r\n            doRecordId\r\n        } = me,\r\n        id = doRecordId(record , me),\r\n        index = me.getAppendRecordIndex(record);\r\n\r\n        insert(data , index , record) ;\r\n\r\n        ids[id] = index;\r\n    }\r\n\r\n    load(data){\r\n\r\n        let me = this ;\r\n\r\n        me.clear() ;\r\n\r\n        me.append(data , false) ;\r\n\r\n        let {\r\n            data:realData\r\n        } = me ;\r\n\r\n        me.fireEvent('load' , realData) ;\r\n\r\n        me.fireEvent('pipedata' , realData) ;\r\n    }\r\n\r\n    refresh(){\r\n\r\n        let me = this,\r\n        {\r\n            ids,\r\n            doRecordId,\r\n            data\r\n        } = me ;\r\n\r\n        let count = 0 ;\r\n\r\n        for(let record of data){\r\n\r\n            ids[doRecordId(record , me)] = count ++;\r\n        }\r\n\r\n    }\r\n\r\n    clear(){\r\n\r\n        let me = this,\r\n        {\r\n            data,\r\n            ids\r\n        } = me ;\r\n\r\n        aclear(data) ;\r\n\r\n        oclear(ids) ;\r\n\r\n        me.fireEvent('clear') ;\r\n    }\r\n\r\n    get pipeData(){\r\n\r\n        return this.data ;\r\n    }\r\n}\n\n            var_class_1609121327203 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121327203 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.store' ;\n                }\n\n            } ;\n\n            main = var_class_1609121327203 ;\n        \nvar_global_main_1609121327203 = main;\n\n            var_init_locked_1609121327203 = true ;\n        }\n        \n    \n                        return var_global_main_1609121327203 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store"
  },
  "src::data.store.tree.insert": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.tree.insert(<number> index , <mixed> nodes)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(index , nodes){\n\n        \r\n/**\r\n * \r\n * 插入节点\r\n * \r\n * @param {number} index 插入位置\r\n * \r\n * @param {mixed} nodes 节点数据\r\n * \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    recordset\r\n} = me,\r\ninsertNodes = [];\r\n\r\nnodes = recordset.add(nodes) ;\r\n\r\nfor(let node of nodes){\r\n\r\n    insertNodes.push(node) ;\r\n\r\n    insertNodes.push(...node.descendantNodes) ;\r\n}\r\n\r\nrecordset.insert(index , insertNodes) ;\r\n\r\nme.fireEvent('insert' , insertNodes) ;\r\n\r\nreturn nodes ;\n\n    }\n    \n                    return function(index , nodes){\n    \n                        \n    \n                        return main.call(this , index , nodes) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.tree.insert"
  },
  "src::data.store.tree.mind": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.tree.mind(<object> options)",
    "standard": true,
    "importNames": [
      "src::data.store.tree"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Store;\n    \n                    let var_init_locked_1609121327285;\n    \n                    let var_class_1609121327285;\n    \n                    \n\n                    let var_global_main_1609121327285 ;\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121327285){\n\n            Store = include('src::data.store.tree')();\n\n            \r\n/**\r\n * \r\n * 获取脑图实例\r\n * \r\n * @import Store from data.store.tree value\r\n * \r\n * @param {object} options 脑图配置\r\n * \r\n */\r\n\r\n class main extends Store{\r\n\r\n    constructor({\r\n        margin = {},\r\n        lineOffsetX = 0,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        let me = this,\r\n        {\r\n            bottom:marginBottom = 0,\r\n            right:marginRight = 0\r\n        } = margin ;\r\n\r\n        me.marginBottom = marginBottom ;\r\n\r\n        me.marginRight = marginRight ;\r\n\r\n        me.lineOffsetX = lineOffsetX ;\r\n    }\r\n\r\n    get region(){\r\n\r\n        let {\r\n            rootNode\r\n        } = this,\r\n        {\r\n            x,\r\n            y,\r\n            firstDescendantNodes,\r\n            lastDescendantNodes,\r\n            leafNodes\r\n        } = rootNode;\r\n\r\n        for(let node of firstDescendantNodes){\r\n        \r\n            let {\r\n                y:nodeY\r\n            } = node.getAnchorXY('tr') ;\r\n        \r\n            if(y > nodeY){\r\n        \r\n                y = nodeY ;\r\n            }\r\n        }\r\n        \r\n        let bottom = y ;\r\n        \r\n        for(let node of lastDescendantNodes){\r\n        \r\n            let {\r\n                y:nodeY\r\n            } = node.getAnchorXY('br') ;\r\n        \r\n            if(bottom < nodeY){\r\n        \r\n                bottom = nodeY ;\r\n            }\r\n        }\r\n        \r\n        let {\r\n            x:right\r\n        } = rootNode.getAnchorXY('r') ;\r\n        \r\n        for(let leafNode of leafNodes){\r\n        \r\n            let {\r\n                x\r\n            } = leafNode.getAnchorXY('r') ;\r\n        \r\n            if(right < x){\r\n        \r\n                right = x ;\r\n            }\r\n        }\r\n        \r\n        const {\r\n            min,\r\n            abs\r\n        } = Math ;\r\n        \r\n        x = min(x , 0),\r\n        y = min(y , 0) ;\r\n        \r\n        return {\r\n            x:abs(x),\r\n            y:abs(y),\r\n            width:right,\r\n            height:bottom\r\n        } ;\r\n    }\r\n\r\n    layout(){\r\n\r\n        let me = this,\r\n        {\r\n            rootNode,\r\n            recordset\r\n        } = me,\r\n        records = recordset.findRecords('hidden' , false);\r\n\r\n        if(rootNode){\r\n\r\n            rootNode.layout() ;\r\n\r\n            let {\r\n                region,\r\n                lineOffsetX\r\n            } = me ;\r\n\r\n            me.fireEvent('layout' , records , lines(records , region , lineOffsetX)) ;\r\n        }\r\n    }\r\n\r\n    get columns(){\r\n\r\n        let {\r\n            leafNodes\r\n        } = this.rootNode;\r\n\r\n        return Math.max(...leafNodes.map(node => node.depth)) + 1 ;\r\n    }\r\n\r\n    get rows(){\r\n\r\n        let {\r\n            leafNodes\r\n        } = this.rootNode;\r\n\r\n        return leafNodes.length ;\r\n    }\r\n }\r\n\r\nfunction lines(nodes , {\r\n    x,\r\n    y\r\n} , lineOffsetX){\r\n\r\n   let lines = [];\r\n\r\n   for(let node of nodes){\r\n\r\n        if(node.hidden){\r\n\r\n            continue ;\r\n        }\r\n\r\n       let {\r\n           x:startX,\r\n           y:startY\r\n       } = node.getAnchorXY('r'),\r\n       {\r\n           children\r\n       } = node;\r\n\r\n       startX += lineOffsetX ;\r\n\r\n       for(let childNode of children){\r\n\r\n            if(!nodes.includes(childNode)){\r\n\r\n                continue ;\r\n            }\r\n\r\n           let {\r\n               x:endX,\r\n               y:endY\r\n           } = childNode.getAnchorXY('l'),\r\n           points = [\r\n            startX + x,\r\n            startY + y,\r\n            startX + x,\r\n            endY + y,\r\n            startX + x,\r\n            endY + y,\r\n            endX + x,\r\n            endY + y\r\n           ];\r\n\r\n           lines.push({\r\n               start:node,\r\n               end:childNode,\r\n               points\r\n           }) ;\r\n       }\r\n   }\r\n\r\n   return lines ;\r\n}\n\n            var_class_1609121327285 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121327285 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.store.tree.mind' ;\n                }\n\n            } ;\n\n            main = var_class_1609121327285 ;\n        \nvar_global_main_1609121327285 = main;\n\n            var_init_locked_1609121327285 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121327285(options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.tree.mind"
  },
  "src::data.store.tree.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::data.store.tree.remove(<mixed> nodes)",
    "standard": true,
    "importNames": [
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from;\n    \n                    let var_init_locked_1609121327332;\n    \n                    \n\n                    function main(nodes){\n\n        \r\n/**\r\n * \r\n * 去除节点\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} nodes 节点数据\r\n * \r\n */\r\n\r\nnodes = from(nodes) ;\r\n\r\nlet me = this,\r\n    {\r\n        recordset\r\n    } = me,\r\n    removeNodes = [] ;\r\n\r\nfor(let node of nodes){\r\n\r\n    let {\r\n        descendantNodes\r\n    } = node ;\r\n\r\n    removeNodes.push(...recordset.remove([\r\n        node,\r\n        ...descendantNodes\r\n    ])) ;\r\n}\r\n\r\nme.fireEvent('remove' , removeNodes) ;\n\n    }\n    \n                    return function(nodes){\n    \n                        \n        if(!var_init_locked_1609121327332){\n\n            from = include('src::array.from');\n\n            var_init_locked_1609121327332 = true ;\n        }\n        \n    \n                        return main.call(this , nodes) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.tree.remove"
  },
  "src::data.store.tree": {
    "meta": "code.meta.class",
    "signature": "<void> src::data.store.tree()",
    "standard": true,
    "importNames": [
      "src::data.store.tree.base",
      "src::data.store.tree.insert",
      "src::data.store.tree.remove",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let extend,method_insert,method_remove,isObject;\n    \n                    let var_init_locked_1609121327307;\n    \n                    let var_class_1609121327307;\n    \n                    \n\n                    let var_global_main_1609121327307 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121327307){\n\n            extend = include('src::data.store.tree.base')();\nmethod_insert = include('src::data.store.tree.insert');\nmethod_remove = include('src::data.store.tree.remove');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[]}){\n\n            \n\n            \n\n            \n\n            insert(...args){\n\n            return method_insert.apply(this , args) ;\n\n        }\nremove(...args){\n\n            return method_remove.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121327307 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121327307 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::data.store.tree' ;\n                }\n\n            } ;\n\n            main = var_class_1609121327307 ;\n        \nvar_global_main_1609121327307 = main;\n\n            var_init_locked_1609121327307 = true ;\n        }\n        \n    \n                        return var_global_main_1609121327307 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "data.store.tree"
  },
  "src::is.browser.support.pointer": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.browser.support.pointer()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121327383;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 判断当前浏览器是否支持点触\r\n * \r\n * @return {boolean} 如果是支持点触则返回 true ，否则返回 false \r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn global.hasOwnProperty('onpointerdown');\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121327383){\n\n            return var_once_value_1609121327383 ;\n\n        }\n        return var_once_value_1609121327383 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.browser.support.pointer"
  },
  "src::is.browser.support.touch": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.browser.support.touch()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121327405;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 判断当前浏览器是否支持触摸\r\n * \r\n * @return {boolean} 如果是支持触摸则返回 true ，否则返回 false \r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn global.hasOwnProperty('ontouchstart');\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121327405){\n\n            return var_once_value_1609121327405 ;\n\n        }\n        return var_once_value_1609121327405 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.browser.support.touch"
  },
  "src::is.class.from": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.class.from(<mixed> data , <mixed> baseClass)",
    "standard": true,
    "importNames": [
      "src::is.class",
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isClass,isString;\n    \n                    let var_init_locked_1609121327428;\n    \n                    \n\n                    function main(data , baseClass){\n\n        \r\n/**\r\n * \r\n * 判定数据是否为指定类\r\n * \r\n * @import is.class\r\n * \r\n * @import is.string\r\n * \r\n * @param {mixed} data 测试数据\r\n * \r\n * @param {mixed} baseClass 基准类\r\n * \r\n * @return {boolean} 如果数据为基准类时则返回 true ,  否则返回 false\r\n * \r\n */\r\n\r\n if(isString(baseClass)){\r\n\r\n    baseClass = include(baseClass)() ;\r\n }\r\n\r\n return isClass(data) && isClass(baseClass) && (data === baseClass || data.prototype instanceof baseClass) ;\n\n    }\n    \n                    return function(data , baseClass){\n    \n                        \n        if(!var_init_locked_1609121327428){\n\n            isClass = include('src::is.class');\nisString = include('src::is.string');\n\n            var_init_locked_1609121327428 = true ;\n        }\n        \n    \n                        return main.call(this , data , baseClass) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.class.from"
  },
  "src::is.data.model.class": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.model.class(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::data.model",
      "src::is.class.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let dataModel,isClass;\n    \n                    let var_init_locked_1609121327456;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断是否为数据模型类\r\n * \r\n * \r\n * @import data.model\r\n * \r\n * @import isClass from is.class.from\r\n * \r\n * @param {mixed} data 参照数据\r\n * \r\n * @return {boolean} 如果是数据模型类则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return isClass(data , 'data.model') ;\r\n\r\n\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327456){\n\n            dataModel = include('src::data.model');\nisClass = include('src::is.class.from');\n\n            var_init_locked_1609121327456 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.model.class"
  },
  "src::is.data.model": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.model(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::data.model"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Model;\n    \n                    let var_init_locked_1609121327480;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定数据是否为数据模型对象\r\n * \r\n * @import Model from data.model value\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果检测为数据模型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return data instanceof Model ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327480){\n\n            Model = include('src::data.model')();\n\n            var_init_locked_1609121327480 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.model"
  },
  "src::is.data.record.empty": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.record.empty(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.data.record"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isRecord;\n    \n                    let var_init_locked_1609121327506;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定指定数据是否为数据记录\r\n * \r\n * @import isRecord from is.data.record\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果为数据记录则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nif(isRecord(data)){\r\n\r\n    return !data.hasOwnProperty('__ZBEE_DATA_ID__') ;\r\n }\r\n\r\n return false ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327506){\n\n            isRecord = include('src::is.data.record');\n\n            var_init_locked_1609121327506 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.record.empty"
  },
  "src::is.data.store": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.data.store(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::data.store"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Store;\n    \n                    let var_init_locked_1609121327529;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判定数据是否为数据存储器对象\r\n * \r\n * @import Store from data.store value\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果检测为数据存储器则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn data instanceof Store ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327529){\n\n            Store = include('src::data.store')();\n\n            var_init_locked_1609121327529 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.data.store"
  },
  "src::is.directory": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.directory(<string> path)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(path){\n\n        \r\n/**\r\n * \r\n * 判断路径是否为文件夹路径\r\n * \r\n * @param {string} path 路径\r\n * \r\n * @return {boolean} 路径是文件夹则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nconst {\r\n    stat\r\n} = require('fs') ;\r\n\r\nreturn new Promise(resolve => stat(path , (error , stats) => error ? resolve(false) : resolve(stats.isDirectory())))  ;\r\n\n\n    }\n    \n                    return function(path){\n    \n                        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.directory"
  },
  "src::is.file": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.file(<string> path)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(path){\n\n        \r\n/**\r\n * \r\n * 判断路径是否为文件路径\r\n * \r\n * @param {string} path 路径\r\n * \r\n * @return {boolean} 路径是文件则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nconst {\r\n    stat\r\n} = require('fs') ;\r\n\r\nreturn new Promise(resolve => stat(path , (error , stats) => error ? resolve(false) : resolve(stats.isFile())))  ;\r\n\n\n    }\n    \n                    return function(path){\n    \n                        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.file"
  },
  "src::is.html.iframe": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.html.iframe(<mixed> el)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el){\n\n        /**\r\n * \r\n * 判断给定元素引用是否为 iframe 元素\r\n * \r\n * @param {mixed} el\r\n * \r\n * @return {boolean} 如果元素为 iframe 元素，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn el instanceof HTMLIFrameElement ;\n\n    }\n    \n                    return function(el){\n    \n                        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.html.iframe"
  },
  "src::is.model.data": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.model.data(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::model",
      "src::is.class"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let model,isClass;\n    \n                    let var_init_locked_1609121327613;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断当前数据是否为数据模型\r\n * \r\n * @import model\r\n * \r\n * @import is.class\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果检测数据为数据模型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isClass(data , 'model') ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327613){\n\n            model = include('src::model');\nisClass = include('src::is.class');\n\n            var_init_locked_1609121327613 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.model.data"
  },
  "src::is.null": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.null(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1609121327642;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判断给定数据是否定义\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果数据定义则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn data === null ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327642){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1609121327642 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.null"
  },
  "src::is.numeric": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.numeric(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为数值类型\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为数值类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn !isNaN(parseFloat(data)) && isFinite(data);\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.numeric"
  },
  "src::is.object.empty": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.object.empty(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断对象是否没有字段\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果没有字段则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return Object.keys(data).length === 0 ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.object.empty"
  },
  "src::is.object.method": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.object.method(<mixed> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121327709;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 是否对象方法\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} target 对象\r\n * \r\n * @param {string} name 字段名称\r\n * \r\n * @return {boolean} 如果指定字段是函数的话则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nlet {\r\n    value\r\n} = Object.getOwnPropertyDescriptor(target , name) ;\r\n\r\nreturn isFunction(value) ;\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121327709){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121327709 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.object.method"
  },
  "src::is.object.property": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.object.property(<mixed> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121327728;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 是否对象属性\r\n * \r\n * @import is.function\r\n * \r\n * @param {mixed} target 对象\r\n * \r\n * @param {string} name 字段名称\r\n * \r\n * @return {boolean} 如果指定字段是函数的话则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nlet {\r\n    set,\r\n    get,\r\n    value\r\n} = Object.getOwnPropertyDescriptor(target , name) ;\r\n\r\nreturn isFunction(set) || isFunction(get) || !isFunction(value);\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121327728){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121327728 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.object.property"
  },
  "src::is.pc": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.pc()",
    "standard": true,
    "importNames": [
      "src::os.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let name;\n    \n                    let var_init_locked_1609121327753;\n    \n                    let var_once_value_1609121327753;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 判断当前环境是否是电脑\r\n * \r\n * @import name from os.name\r\n * \r\n * @once\r\n * \r\n * @return {boolean} 如果是电脑则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nswitch(name()){\r\n\r\n    case 'MacOS':\r\n    case 'Windows':\r\n    case 'Linux':\r\n\r\n        return true ;\r\n}\r\n\r\nreturn false ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121327753){\n\n            name = include('src::os.name');\n\n            var_init_locked_1609121327753 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121327753){\n\n            return var_once_value_1609121327753 ;\n\n        }\n        return var_once_value_1609121327753 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.pc"
  },
  "src::os.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::os.name()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121327782;\n\n                    function main(){\n\n        /**\r\n * \r\n * 返回当前操作系统的名称\r\n * \r\n * @once\r\n * \r\n * @return {string} 操作系统的名称\r\n * \r\n */\r\n\r\nconst NAMES = {\r\n    iphone: 'iOS',\r\n    android:'Android',\r\n    mac: 'MacOS',\r\n    win: 'Windows',\r\n    linux: 'Linux',\r\n    other: 'Other'\r\n};\r\n\r\nlet userAgent = navigator.userAgent.toLowerCase(),\r\n    name = NAMES[(userAgent.match(/mac|win|linux/) || ['other'])[0]];\r\n\r\nswitch(name){\r\n\r\n    case 'MacOS':\r\n    case 'Linux':\r\n\r\n        {\r\n\r\n            let name = NAMES[(userAgent.match(/iphone|android/) || ['other'])[0]] ;\r\n\r\n            if(name !== 'Other'){\r\n\r\n                return name ;\r\n            }\r\n        }\r\n}\r\n\r\nreturn name ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121327782){\n\n            return var_once_value_1609121327782 ;\n\n        }\n        return var_once_value_1609121327782 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "os.name"
  },
  "src::is.primitive": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.primitive(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.number",
      "src::is.boolean",
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber,isBoolean,isString;\n    \n                    let var_init_locked_1609121327803;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为原始类型\r\n * \r\n * @import is.number\r\n * \r\n * @import is.boolean\r\n * \r\n * @import is.string\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为原始类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isNumber(data) || isBoolean(data) || isString(data) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327803){\n\n            isNumber = include('src::is.number');\nisBoolean = include('src::is.boolean');\nisString = include('src::is.string');\n\n            var_init_locked_1609121327803 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.primitive"
  },
  "src::is.store.data": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.store.data(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::store",
      "src::is.class"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let store,isClass;\n    \n                    let var_init_locked_1609121327829;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 判断当前数据是否为数据存储器\r\n * \r\n * @import store\r\n * \r\n * @import is.class\r\n * \r\n * @param {mixed} data 检测数据\r\n * \r\n * @return {boolean} 如果检测数据为数据存储器则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isClass(data , 'store') ;\r\n \n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121327829){\n\n            store = include('src::store');\nisClass = include('src::is.class');\n\n            var_init_locked_1609121327829 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.store.data"
  },
  "src::is.week.day.first": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.week.day.first(<Date> date , <number> weekStartDay)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(date , weekStartDay){\n\n        \r\n/**\r\n * \r\n * 判断指定日期是否为一周的第一天\r\n * \r\n * @param {Date} date 校验日期\r\n * \r\n * @param {number} [weekStartDay = 1] 确认一周是从周几算起\r\n *  \r\n * @return {boolean} 如果是第一天的话，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return date.getDay() === weekStartDay ;\r\n\r\n \n\n    }\n    \n                    return function(date , weekStartDay = 1){\n    \n                        \n    \n                        return main.call(this , date , weekStartDay) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.week.day.first"
  },
  "src::is.week.day.last": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.week.day.last(<Date> date , <number> weekStartDay)",
    "standard": true,
    "importNames": [
      "src::week.days"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDays;\n    \n                    let var_init_locked_1609121327871;\n    \n                    \n\n                    function main(date , weekStartDay){\n\n        \r\n/**\r\n * \r\n * 判断指定日期是否为一周的最后一天\r\n * \r\n * @import getDays from week.days\r\n * \r\n * @param {Date} date 校验日期\r\n * \r\n * @param {number} [weekStartDay = 1] 确认一周是从周几算起\r\n *  \r\n * @return {boolean} 如果是最后一天的话，则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nlet days = getDays(weekStartDay) ;\r\n\r\nreturn date.getDay() === days[days.length - 1] ;\n\n    }\n    \n                    return function(date , weekStartDay = 1){\n    \n                        \n        if(!var_init_locked_1609121327871){\n\n            getDays = include('src::week.days');\n\n            var_init_locked_1609121327871 = true ;\n        }\n        \n    \n                        return main.call(this , date , weekStartDay) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.week.day.last"
  },
  "src::week.days": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::week.days(<number> startDay)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(startDay){\n\n        \r\n/**\r\n * \r\n * 获得一周周期排列\r\n * \r\n * @param {number} [startDay = 0] 确定起始周几\r\n * \r\n * @return {array} 一周周期排列数字集合\r\n * \r\n */\r\n\r\n let result = [\r\n     startDay\r\n ];\r\n\r\nwhile(result.length < 7){\r\n\r\n    startDay ++ ;\r\n\r\n    if(startDay <= 6){\r\n\r\n        result.push(startDay) ;\r\n    \r\n    }else{\r\n\r\n        result.push(startDay = 0) ;\r\n    }\r\n}\r\n\r\nreturn result ;\r\n\n\n    }\n    \n                    return function(startDay = 0){\n    \n                        \n    \n                        return main.call(this , startDay) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "week.days"
  },
  "src::directory.copy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::directory.copy(<string> src , <string> dest , <boolean> isCopySrcFolder , <fuction> fn)",
    "standard": true,
    "importNames": [
      "src::is.directory",
      "src::directory.paths.file.all",
      "src::directory.create",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory,getAllFilePaths,createDirectory,emptyFn;\n    \n                    let var_init_locked_1609121327917;\n    \n                    \n\n                    function main(src , dest , isCopySrcFolder , fn){\n\n        \r\n/**\r\n * \r\n * 拷贝文件夹\r\n * \r\n * @import is.directory\r\n * \r\n * @import getAllFilePaths from .paths.file.all\r\n * \r\n * @import createDirectory from directory.create\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @param {string} src 拷贝的源文件夹目录\r\n * \r\n * @param {string} dest 目标文件夹目录\r\n * \r\n * @param {boolean} [isCopySrcFolder = true] 是否不拷贝源文件夹目录\r\n * \r\n * @param {fuction} [fn] 回调函数 \r\n * \r\n */\r\n\r\n const {\r\n    copyFileSync\r\n } = require('fs'),\r\n {\r\n    dirname\r\n } = require('path'),\r\n destPaths = [];\r\n\r\n fn = fn || emptyFn ;\r\n\r\n if(isDirectory(src)){\r\n\r\n    let paths = getAllFilePaths(src);\r\n\r\n    for(let path of paths){\r\n\r\n        let destPath = path.replace(isCopySrcFolder ? dirname(src) : src , dest) ;\r\n\r\n        createDirectory(dirname(destPath)) ;\r\n\r\n        copyFileSync(path , destPath) ;\r\n\r\n        fn(path , destPath) ;\r\n\r\n        destPaths.push(destPath) ;\r\n    }\r\n }\r\n\r\n return destPaths ;\n\n    }\n    \n                    return function(src , dest , isCopySrcFolder = true , fn){\n    \n                        \n        if(!var_init_locked_1609121327917){\n\n            isDirectory = include('src::is.directory');\ngetAllFilePaths = include('src::directory.paths.file.all');\ncreateDirectory = include('src::directory.create');\nemptyFn = include('src::function.empty')();\n\n            var_init_locked_1609121327917 = true ;\n        }\n        \n    \n                        return main.call(this , src , dest , isCopySrcFolder , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.copy"
  },
  "src::directory.paths.file.all": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::directory.paths.file.all(<string> path , <RegExp> testRe)",
    "standard": true,
    "importNames": [
      "src::is.directory",
      "src::is.file"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory,isFile;\n    \n                    let var_init_locked_1609121327938;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 读取目录下所有文件的路径\r\n * \r\n * @import is.directory\r\n * \r\n * @import is.file\r\n * \r\n * @param {string} path 文件夹目录路径\r\n * \r\n * @param {RegExp} [testRe] 路径匹配正则表达式\r\n * \r\n * @return {array} 多个文件路径\r\n * \r\n */\r\n\r\nfunction main(path , testRe){\r\n\r\n    if(isDirectory(path)){\r\n\r\n        const {\r\n            readdirSync\r\n        } = require('fs'),\r\n        {\r\n            join\r\n        } = require('path');\r\n    \r\n        let names = readdirSync(path),\r\n            paths = [];\r\n    \r\n        for(let name of names){\r\n    \r\n            let targetPath = join(path , name) ;\r\n    \r\n            if(isFile(targetPath)){\r\n\r\n                if(testRe && !testRe.test(targetPath)){\r\n\r\n                    continue ;\r\n                }\r\n    \r\n                paths.push(targetPath) ;\r\n            \r\n            }else{\r\n    \r\n                paths.push(...main(targetPath , testRe)) ;\r\n            }\r\n        }\r\n    \r\n        return paths ;\r\n    }\r\n    \r\n    return [] ;\r\n}\n    \n                    return function(path , testRe){\n    \n                        \n        if(!var_init_locked_1609121327938){\n\n            isDirectory = include('src::is.directory');\nisFile = include('src::is.file');\n\n            var_init_locked_1609121327938 = true ;\n        }\n        \n    \n                        return main.call(this , path , testRe) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.paths.file.all"
  },
  "src::directory.create": {
    "meta": "code.meta.script.function",
    "signature": "async <mixed> src::directory.create(<string> path)",
    "standard": true,
    "importNames": [
      "src::is.directory"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory;\n    \n                    let var_init_locked_1609121327954;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 创建不存在的目录，如果存在的话，则维持现状\r\n * \r\n * @import is.directory\r\n * \r\n * @param {string} path 目录路径\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nconst {\r\n    mkdir\r\n} = require('fs'),\r\nfolderRe = /(?:^\\/)|(?:[^\\/\\\\]+(?:[\\/\\\\]|$))/g;\r\n\r\nasync function main(path){\r\n\r\n    let folderNames = path.match(folderRe),\r\n        folderPath = '';\r\n\r\n    for(let folderName of folderNames){\r\n\r\n        folderPath += folderName ;\r\n\r\n        if(folderName !== '/' && !await isDirectory(folderPath)){\r\n\r\n            await new Promise((resolve , reject) => mkdir(folderPath , error => error ? reject(error) : resolve())) ;\r\n        }\r\n    }\r\n}\r\n\n    \n                    return async function(path){\n    \n                        \n        if(!var_init_locked_1609121327954){\n\n            isDirectory = include('src::is.directory');\n\n            var_init_locked_1609121327954 = true ;\n        }\n        \n    \n                        return await main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.create"
  },
  "src::directory.includes": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::directory.includes(<string> path , {<mixed> includes , <mixed> excludes , <mixed> suffixes})",
    "standard": true,
    "importNames": [
      "src::array.from",
      "src::is.file",
      "src::is.directory",
      "src::directory.paths.file.all",
      "src::path.ext"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from,isFile,isDirectory,getFilePaths,ext;\n    \n                    let var_init_locked_1609121327981;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 在指定目录下包含下符合包含、排除规则的所有文件\r\n * \r\n * @import from from array.from\r\n * \r\n * @import is.file\r\n * \r\n * @import is.directory\r\n * \r\n * @import getFilePaths from .paths.file.all\r\n * \r\n * @import ext from path.ext\r\n * \r\n * @param {string} path 指定目录路径\r\n * \r\n * @param {object} options 配置\r\n * \r\n * @param {mixed} options.includes 包含资源\r\n * \r\n * @param {mixed} [options.excludes] 排除资源\r\n * \r\n * @param {mixed} [options.suffixes] 文件后缀名\r\n * \r\n * @return {array} 所有符合规则的文件\r\n * \r\n */\r\n\r\nconst {\r\n    join\r\n} = require('path');\r\n\r\nfunction main(path , {\r\n    includes,\r\n    excludes,\r\n    suffixes\r\n}){\r\n\r\n    let includeFilePaths = getPaths(path , includes),\r\n        excludeFilePaths = getPaths(path , excludes);\r\n\r\n    if(suffixes){\r\n\r\n        suffixes = from(suffixes) ;\r\n    }\r\n    \r\n    return includeFilePaths.filter(path => {\r\n\r\n        if(!excludeFilePaths.includes(path)){\r\n\r\n            if(suffixes && !suffixes.includes(ext(path))){\r\n\r\n                return false ;\r\n            }\r\n\r\n            return true ;\r\n        }\r\n\r\n        return false ;\r\n\r\n    }) ;\r\n}\r\n\r\nfunction getPaths(path , resources){\r\n\r\n    resources = from(resources) ;\r\n\r\n    let resourcePaths = [] ;\r\n\r\n    for(let resource of resources){\r\n\r\n        let resourcePath = join(path , resource) ;\r\n    \r\n        if(isFile(resourcePath)){\r\n    \r\n            resourcePaths.push(resourcePath) ;\r\n    \r\n        }else if(isDirectory(resourcePath)){\r\n    \r\n            resourcePaths.push(...getFilePaths(resourcePath)) ;\r\n        }\r\n    }\r\n\r\n    return resourcePaths ;\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\n    \n                    return function(path , {includes , excludes , suffixes}){\n    \n                        \n        if(!var_init_locked_1609121327981){\n\n            from = include('src::array.from');\nisFile = include('src::is.file');\nisDirectory = include('src::is.directory');\ngetFilePaths = include('src::directory.paths.file.all');\next = include('src::path.ext');\n\n            var_init_locked_1609121327981 = true ;\n        }\n        \n    \n                        return main.call(this , path , {includes , excludes , suffixes}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.includes"
  },
  "src::path.ext": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::path.ext(<string> path)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 获得路径的后缀名\r\n * \r\n * @param {string} path 路径\r\n * \r\n * @return {string} 后缀名\r\n * \r\n */\r\n\r\nconst extRe = /\\.[^\\/\\\\]+$/ ;\r\n\r\nfunction main(path){\r\n\r\n    let result = path.match(extRe) ;\r\n\r\n    if(result){\r\n\r\n        return result[0] ;\r\n    }\r\n}\n    \n                    return function(path){\n    \n                        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "path.ext"
  },
  "src::directory.paths.directory": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::directory.paths.directory(<string> path)",
    "standard": true,
    "importNames": [
      "src::is.directory"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory;\n    \n                    let var_init_locked_1609121328022;\n    \n                    \n\n                    function main(path){\n\n        \r\n/**\r\n * \r\n * 读取目录下所有的直接文件夹路径\r\n * \r\n * @import is.directory\r\n * \r\n * @param {string} path 文件夹目录路径\r\n * \r\n * @return {array} 多个文件夹路径\r\n * \r\n */\r\n\r\nif(isDirectory(path)){\r\n\r\n    const {\r\n        readdirSync\r\n    } = require('fs'),\r\n    {\r\n        join\r\n    } = require('path');\r\n\r\n    let names = readdirSync(path),\r\n        paths = [];\r\n\r\n    for(let name of names){\r\n\r\n        let targetPath = join(path , name) ;\r\n\r\n        if(isDirectory(targetPath)){\r\n\r\n            paths.push(targetPath) ;\r\n        }\r\n    }\r\n\r\n    return paths ;\r\n}\r\n\r\nreturn [] ;\n\n    }\n    \n                    return function(path){\n    \n                        \n        if(!var_init_locked_1609121328022){\n\n            isDirectory = include('src::is.directory');\n\n            var_init_locked_1609121328022 = true ;\n        }\n        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.paths.directory"
  },
  "src::directory.paths.file": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::directory.paths.file(<string> path)",
    "standard": true,
    "importNames": [
      "src::is.directory",
      "src::is.file"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory,isFile;\n    \n                    let var_init_locked_1609121328077;\n    \n                    \n\n                    function main(path){\n\n        \r\n/**\r\n * \r\n * 读取目录下所有的直接文件路径\r\n * \r\n * @import is.directory\r\n * \r\n * @import is.file\r\n * \r\n * @param {string} path 文件夹目录路径\r\n * \r\n * @return {array} 多个文件路径\r\n * \r\n */\r\n\r\nif(isDirectory(path)){\r\n\r\n    const {\r\n        readdirSync\r\n    } = require('fs'),\r\n    {\r\n        join\r\n    } = require('path');\r\n\r\n    let names = readdirSync(path),\r\n        paths = [];\r\n\r\n    for(let name of names){\r\n\r\n        let targetPath = join(path , name) ;\r\n\r\n        if(isFile(targetPath)){\r\n\r\n            paths.push(targetPath) ;\r\n        }\r\n    }\r\n\r\n    return paths ;\r\n}\r\n\r\nreturn [] ;\n\n    }\n    \n                    return function(path){\n    \n                        \n        if(!var_init_locked_1609121328077){\n\n            isDirectory = include('src::is.directory');\nisFile = include('src::is.file');\n\n            var_init_locked_1609121328077 = true ;\n        }\n        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.paths.file"
  },
  "src::directory.readFilePaths": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::directory.readFilePaths(<string> path)",
    "standard": true,
    "importNames": [
      "src::is.directory",
      "src::is.file"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDirectory,isFile;\n    \n                    let var_init_locked_1609121328098;\n    \n                    \n\n                    function main(path){\n\n        \r\n/**\r\n * \r\n * 读取目录下所有的直接文件路径\r\n * \r\n * @import is.directory\r\n * \r\n * @import is.file\r\n * \r\n * @param {string} path 文件夹目录路径\r\n * \r\n * @return {array} 多个文件路径\r\n * \r\n */\r\n\r\nif(isDirectory(path)){\r\n\r\n    const {\r\n        readdirSync\r\n    } = require('fs'),\r\n    {\r\n        join\r\n    } = require('path');\r\n\r\n    let names = readdirSync(path),\r\n        paths = [];\r\n\r\n    for(let name of names){\r\n\r\n        let targetPath = join(path , name) ;\r\n\r\n        if(isFile(targetPath)){\r\n\r\n            paths.push(targetPath) ;\r\n        }\r\n    }\r\n\r\n    return paths ;\r\n}\r\n\r\nreturn [] ;\r\n\r\n\r\n\n\n    }\n    \n                    return function(path){\n    \n                        \n        if(!var_init_locked_1609121328098){\n\n            isDirectory = include('src::is.directory');\nisFile = include('src::is.file');\n\n            var_init_locked_1609121328098 = true ;\n        }\n        \n    \n                        return main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "directory.readFilePaths"
  },
  "src::browser.animationFrame.clear": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.animationFrame.clear(<number> animationFrameId)",
    "standard": true,
    "importNames": [
      "src::browser.animationFrame.stop",
      "src::browser.animationFrame.map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let stop,getMap;\n    \n                    let var_init_locked_1609121328158;\n    \n                    \n\n                    function main(animationFrameId){\n\n        \r\n/**\r\n * \r\n * 清除一个连续动画帧\r\n * \r\n * @import stop from browser.animationFrame.stop\r\n * \r\n * @import getMap from browser.animationFrame.map\r\n * \r\n * @alias clearAnimationFrame\r\n * \r\n * @param {number} animationFrameId 动画帧编号\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\nstop(animationFrameId) ;\r\n\r\ngetMap().delete(animationFrameId) ;\r\n\n\n    }\n    \n                    return function(animationFrameId){\n    \n                        \n        if(!var_init_locked_1609121328158){\n\n            stop = include('src::browser.animationFrame.stop');\ngetMap = include('src::browser.animationFrame.map');\n\n            var_init_locked_1609121328158 = true ;\n        }\n        \n    \n                        return main.call(this , animationFrameId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.animationFrame.clear"
  },
  "src::browser.animationFrame.map": {
    "meta": "code.meta.script.function",
    "signature": "<Map> src::browser.animationFrame.map()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121328195;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 构建一个持久 Map 对象\r\n * \r\n * @return {Map} 动画帧维护集合\r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn new Map() ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121328195){\n\n            return var_once_value_1609121328195 ;\n\n        }\n        return var_once_value_1609121328195 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.animationFrame.map"
  },
  "src::browser.animationFrame.stop": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.animationFrame.stop(<number> animationFrameId)",
    "standard": true,
    "importNames": [
      "src::browser.animationFrame.map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getMap;\n    \n                    let var_init_locked_1609121328175;\n    \n                    \n\n                    function main(animationFrameId){\n\n        \r\n/**\r\n * \r\n * 清除一个连续动画帧\r\n * \r\n * @import getMap from browser.animationFrame.map\r\n * \r\n * @alias stopAnimationFrame\r\n * \r\n * @param {number} animationFrameId 动画帧编号\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\nlet map = getMap() ;\r\n\r\nif(map.has(animationFrameId)){\r\n\r\n    map.get(animationFrameId).stop() ;\r\n}\r\n\n\n    }\n    \n                    return function(animationFrameId){\n    \n                        \n        if(!var_init_locked_1609121328175){\n\n            getMap = include('src::browser.animationFrame.map');\n\n            var_init_locked_1609121328175 = true ;\n        }\n        \n    \n                        return main.call(this , animationFrameId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.animationFrame.stop"
  },
  "src::browser.animationFrame.set": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::browser.animationFrame.set(<function> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::browser.animationFrame.map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getMap;\n    \n                    let var_init_locked_1609121328216;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 创建一个连续动画帧\r\n * \r\n * @import getMap from browser.animationFrame.map\r\n * \r\n * @alias setAnimationFrame\r\n * \r\n * @param {function} fn 动画帧回调函数\r\n * \r\n * @param {mixed} scope 动画帧回调函数作用域\r\n * \r\n * @return {number} 动画帧编号\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nlet count = 0 ;\r\n\r\nfunction main(fn , scope){\r\n\r\n    count ++ ;\r\n\r\n    let map = getMap(),\r\n        animationFrame = new AnimationFrame(fn , scope);\r\n\r\n    map.set(count , animationFrame) ;\r\n\r\n    animationFrame.start() ;\r\n\r\n    return count ;\r\n}\r\n\r\nclass AnimationFrame{\r\n\r\n    constructor(fn , scope){\r\n\r\n        let me = this ;\r\n\r\n        me.fn = fn ;\r\n\r\n        me.scope = scope ;\r\n    }\r\n\r\n    start(){\r\n\r\n        let me = this,\r\n            {\r\n                fn,\r\n                scope\r\n            } = me,\r\n            animationFrame = time =>{\r\n\r\n                fn.call(scope , time) ;\r\n\r\n                me.animationFrameId = requestAnimationFrame(animationFrame) ;\r\n                \r\n            } ;\r\n\r\n        me.animationFrameId = requestAnimationFrame(animationFrame) ;\r\n    }\r\n\r\n    stop(){\r\n\r\n        cancelAnimationFrame(this.animationFrameId) ;\r\n    }\r\n}\n    \n                    return function(fn , scope){\n    \n                        \n        if(!var_init_locked_1609121328216){\n\n            getMap = include('src::browser.animationFrame.map');\n\n            var_init_locked_1609121328216 = true ;\n        }\n        \n    \n                        return main.call(this , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.animationFrame.set"
  },
  "src::browser.animationFrame.start": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.animationFrame.start(<number> animationFrameId)",
    "standard": true,
    "importNames": [
      "src::browser.animationFrame.map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getMap;\n    \n                    let var_init_locked_1609121328238;\n    \n                    \n\n                    function main(animationFrameId){\n\n        \r\n/**\r\n * \r\n * 清除一个连续动画帧\r\n * \r\n * @import getMap from browser.animationFrame.map\r\n * \r\n * @alias startAnimationFrame\r\n * \r\n * @param {number} animationFrameId 动画帧编号\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\nlet map = getMap() ;\r\n\r\nif(map.has(animationFrameId)){\r\n\r\n    map.get(animationFrameId).start() ;\r\n}\r\n\n\n    }\n    \n                    return function(animationFrameId){\n    \n                        \n        if(!var_init_locked_1609121328238){\n\n            getMap = include('src::browser.animationFrame.map');\n\n            var_init_locked_1609121328238 = true ;\n        }\n        \n    \n                        return main.call(this , animationFrameId) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.animationFrame.start"
  },
  "src::browser.canvas.begin": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.begin(<canvas.Context> context , <boolean> independent)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(context , independent){\n\n        \r\n/**\r\n * \r\n * 图形开始\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {boolean} [independent = true] 是否为独立图形\r\n * \r\n */\r\n\r\nif(independent){\r\n\r\n    context.beginPath();\r\n }\n\n    }\n    \n                    return function(context , independent = true){\n    \n                        \n    \n                        return main.call(this , context , independent) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.begin"
  },
  "src::browser.canvas.clear": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.clear(<canvas.Context> context , {<number> x , <number> y , <number> width , <number> height})",
    "standard": true,
    "importNames": [
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber;\n    \n                    let var_init_locked_1609121328277;\n    \n                    \n\n                    function main(context , {x , y , width , height}){\n\n        \r\n/**\r\n * \r\n * 清空画板\r\n * \r\n * @import is.number\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {number} [config.x = 0] 清空起始横坐标 \r\n * \r\n * @param {number} [config.y = 0] 清空起始纵坐标\r\n * \r\n * @param {number} config.width 清空宽度\r\n * \r\n * @param {number} config.height 清空高度\r\n * \r\n */\r\n\r\n let {\r\n    canvas\r\n } = context ;\r\n\r\n if(!isNumber(width)){\r\n\r\n    width = canvas.width ;\r\n }\r\n\r\n if(!isNumber(height)){\r\n\r\n    height = canvas.height ;\r\n }\r\n\r\n context.clearRect(x , y , width , height) ;\n\n    }\n    \n                    return function(context , {x = 0 , y = 0 , width , height} = {}){\n    \n                        \n        if(!var_init_locked_1609121328277){\n\n            isNumber = include('src::is.number');\n\n            var_init_locked_1609121328277 = true ;\n        }\n        \n    \n                        return main.call(this , context , {x , y , width , height}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.clear"
  },
  "src::browser.canvas.data.get": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.data.get(<canvas.Context> context , {<number> x , <number> y , <number> width , <number> height})",
    "standard": true,
    "importNames": [
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber;\n    \n                    let var_init_locked_1609121328299;\n    \n                    \n\n                    function main(context , {x , y , width , height}){\n\n        \r\n/**\r\n * \r\n * 获取画布数据\r\n * \r\n * @import is.number\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 绘制配置\r\n * \r\n * @param {number} [config.x = 0] 截图横坐标\r\n * \r\n * @param {number} [config.y = 0] 截图纵坐标\r\n * \r\n * @param {number} [config.width] 截图横坐标\r\n * \r\n * @param {number} [config.height] 截图纵坐标\r\n * \r\n * \r\n */\r\n\r\nlet {\r\n    canvas\r\n } = context ;\r\n\r\n if(!isNumber(width)){\r\n\r\n    width = canvas.width ;\r\n }\r\n\r\n if(!isNumber(height)){\r\n\r\n    height = canvas.height ;\r\n }\r\n\r\n return context.getImageData(x , y , width , height) ;\n\n    }\n    \n                    return function(context , {x = 0 , y = 0 , width , height} = {}){\n    \n                        \n        if(!var_init_locked_1609121328299){\n\n            isNumber = include('src::is.number');\n\n            var_init_locked_1609121328299 = true ;\n        }\n        \n    \n                        return main.call(this , context , {x , y , width , height}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.data.get"
  },
  "src::browser.canvas.data.insert": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.data.insert(<canvas.Context> context , {<ImageData> data , <number> x , <number> y})",
    "standard": true,
    "importNames": [
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber;\n    \n                    let var_init_locked_1609121328319;\n    \n                    \n\n                    function main(context , {data , x , y}){\n\n        \r\n/**\r\n * \r\n * 函数实现说明\r\n * \r\n * @import is.number\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 绘制配置\r\n * \r\n * @param {ImageData} config.data 截图数据\r\n * \r\n * @param {number} [config.x = 0] 截图横坐标\r\n * \r\n * @param {number} [config.y = 0] 截图纵坐标\r\n * \r\n */\r\n\r\ncontext.putImageData(data , x , y) ;\n\n    }\n    \n                    return function(context , {data , x = 0 , y = 0} = {}){\n    \n                        \n        if(!var_init_locked_1609121328319){\n\n            isNumber = include('src::is.number');\n\n            var_init_locked_1609121328319 = true ;\n        }\n        \n    \n                        return main.call(this , context , {data , x , y}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.data.insert"
  },
  "src::browser.canvas.data.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.data.set(<canvas.Context> context , {<ImageData> data})",
    "standard": true,
    "importNames": [
      "src::browser.canvas.clear",
      "src::browser.canvas.data.insert"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let clear,insert;\n    \n                    let var_init_locked_1609121328343;\n    \n                    \n\n                    function main(context , {data}){\n\n        \r\n/**\r\n * \r\n * 设置画布数据\r\n * \r\n * @import clear from browser.canvas.clear\r\n * \r\n * @import insert from browser.canvas.data.insert\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 绘制配置\r\n * \r\n * @param {ImageData} config.data 截图数据\r\n * \r\n * \r\n */\r\n\r\nclear(context) ;\r\n\r\ninsert(context , {\r\n    data\r\n}) ;\n\n    }\n    \n                    return function(context , {data} = {}){\n    \n                        \n        if(!var_init_locked_1609121328343){\n\n            clear = include('src::browser.canvas.clear');\ninsert = include('src::browser.canvas.data.insert');\n\n            var_init_locked_1609121328343 = true ;\n        }\n        \n    \n                        return main.call(this , context , {data}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.data.set"
  },
  "src::browser.canvas.draw.line.arc": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.draw.line.arc(<canvas.Context> context , {<number> x , <number> y , <number> r , <number> start , <number> end , <number> counterclockwise , <boolean> independent , <boolean> clip , <object> ...styles})",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::math.degree2radian",
      "src::browser.canvas.begin",
      "src::browser.canvas.end"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,degree2radian,doBegin,doEnd;\n    \n                    let var_init_locked_1609206957237;\n    \n                    \n\n                    function main(context , {x , y , r , start , end , counterclockwise , independent , clip , ...styles}){\n\n        \r\n/**\r\n * \r\n * 绘制弧线\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import degree2radian from math.degree2radian\r\n * \r\n * @import doBegin from browser.canvas.begin\r\n * \r\n * @import doEnd from browser.canvas.end\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {number} config.x 圆中心点横坐标\r\n * \r\n * @param {number} config.y 圆中心点纵坐标\r\n * \r\n * @param {number} config.r 圆的半径\r\n * \r\n * @param {number} [config.start = -90] 圆起始角度\r\n * \r\n * @param {number} config.end 圆终止角度\r\n * \r\n * @param {number} [config.counterclockwise = false] 如果为 false 则为顺时针，反之为逆时针\r\n * \r\n * @param {boolean} [config.independent = true] 是否为独立图形\r\n * \r\n * @param {boolean} [config.clip = false] 是否为剪切路径\r\n * \r\n * @param {object} [...config.styles] 画线样式\r\n * \r\n */\r\n\r\ndoBegin(context , independent) ;\r\n\r\nassign(context , styles) ;\r\n\r\ncontext.arc(x * scale , y , r , degree2radian(start) , degree2radian(end) , counterclockwise) ;\r\n\r\ndoEnd(context , clip) ;\n\n    }\n    \n                    return function(context , {x , y , r , start = -90 , end , counterclockwise = false , independent = true , clip = false , ...styles} = {}){\n    \n                        \n        if(!var_init_locked_1609206957237){\n\n            assign = include('src::object.assign');\ndegree2radian = include('src::math.degree2radian');\ndoBegin = include('src::browser.canvas.begin');\ndoEnd = include('src::browser.canvas.end');\n\n            var_init_locked_1609206957237 = true ;\n        }\n        \n    \n                        return main.call(this , context , {x , y , r , start , end , counterclockwise , independent , clip , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.draw.line.arc"
  },
  "src::math.degree2radian": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.degree2radian(<number> degree)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(degree){\n\n        \r\n/**\r\n * \r\n * 将角度转换成弧度\r\n * \r\n * @param {number} degree 角度\r\n * \r\n * @return {number} 弧度 \r\n * \r\n */\r\n\r\nreturn Math.PI / 180 * degree ;\r\n\n\n    }\n    \n                    return function(degree){\n    \n                        \n    \n                        return main.call(this , degree) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.degree2radian"
  },
  "src::browser.canvas.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.end(<canvas.Context> context , <boolean> clip)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(context , clip){\n\n        /**\r\n * \r\n * 图形结束\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {boolean} [clip = false] 是否为剪切路径\r\n * \r\n * \r\n */\r\n\r\n if(clip){\r\n\r\n    context.clip() ;\r\n \r\n }else{\r\n\r\n    context.stroke();\r\n }\n\n    }\n    \n                    return function(context , clip = false){\n    \n                        \n    \n                        return main.call(this , context , clip) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.end"
  },
  "src::browser.canvas.draw.line.bezierCurve": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.draw.line.bezierCurve(<canvas.Context> context , {<array> lineDash , <array> points , <object> ...styles})",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(context , {lineDash , points , ...styles}){\n\n        \r\n/**\r\n * \r\n * 绘制贝赛尔曲线\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {array} [config.lineDash = []] 虚线设置\r\n * \r\n * @param {array} [config.points = []] 画线点集合\r\n * \r\n * @param {object} [...config.styles] 画线样式\r\n * \r\n */\r\n\r\n if(points.length === 8){\r\n\r\n    context.beginPath();\r\n\r\n    Object.assign(context , styles) ;\r\n\r\n    context.setLineDash(lineDash) ;\r\n\r\n    context.moveTo(...points.slice(0 , 2));\r\n    \r\n    context.bezierCurveTo(...points.slice(2));\r\n    \r\n    context.stroke();\r\n }\n\n    }\n    \n                    return function(context , {lineDash = [] , points = [] , ...styles} = {}){\n    \n                        \n    \n                        return main.call(this , context , {lineDash , points , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.draw.line.bezierCurve"
  },
  "src::browser.canvas.draw.line": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.draw.line(<canvas.Context> context , {<array> points , <array> lineDash , <boolean> independent , <boolean> clip , <object> ...styles})",
    "standard": true,
    "importNames": [
      "src::browser.canvas.begin",
      "src::browser.canvas.end"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let doBegin,doEnd;\n    \n                    let var_init_locked_1609206957291;\n    \n                    \n\n                    function main(context , {points , lineDash , independent , clip , ...styles}){\n\n        \r\n/**\r\n * \r\n * 绘制直线\r\n * \r\n * @import doBegin from browser.canvas.begin\r\n * \r\n * @import doEnd from browser.canvas.end\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {array} [config.points = []] 画线点集合\r\n * \r\n * @param {array} [config.lineDash = []] 虚线设置\r\n * \r\n * @param {boolean} [config.independent = true] 是否为独立图形\r\n * \r\n * @param {boolean} [config.clip = false] 是否为剪切路径\r\n * \r\n * @param {object} [...config.styles] 画线样式\r\n * \r\n */\r\n\r\n if(points.length === 4){\r\n\r\n    doBegin(context , independent) ;\r\n\r\n    Object.assign(context , styles) ;\r\n\r\n    context.setLineDash(lineDash) ;\r\n\r\n    context.moveTo(...points.slice(0 , 2));\r\n    \r\n    context.lineTo(...points.slice(2));\r\n    \r\n    doEnd(context , clip) ;\r\n }\n\n    }\n    \n                    return function(context , {points = [] , lineDash = [] , independent = true , clip = false , ...styles} = {}){\n    \n                        \n        if(!var_init_locked_1609206957291){\n\n            doBegin = include('src::browser.canvas.begin');\ndoEnd = include('src::browser.canvas.end');\n\n            var_init_locked_1609206957291 = true ;\n        }\n        \n    \n                        return main.call(this , context , {points , lineDash , independent , clip , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.draw.line"
  },
  "src::browser.canvas.draw.word": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.draw.word(<canvas.Context> context , {<string> text , <number> x , <number> y , <object> ...styles})",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::browser.scale"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,scale;\n    \n                    let var_init_locked_1609121328445;\n    \n                    \n\n                    function main(context , {text , x , y , ...styles}){\n\n        \r\n/**\r\n * \r\n * 绘制文本\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import scale from browser.scale value\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {object} config = {} 绘制配置\r\n * \r\n * @param {string} config.text 绘制文本 \r\n * \r\n * @param {number} config.x 画线横坐标\r\n * \r\n * @param {number} config.y 画线纵坐标\r\n * \r\n * @param {object} [...config.styles] 文本样式\r\n * \r\n */\r\n\r\nassign(context , styles) ;\r\n\r\ncontext.fillText(text , x * scale , y * scale) ;\n\n    }\n    \n                    return function(context , {text , x , y , ...styles}){\n    \n                        \n        if(!var_init_locked_1609121328445){\n\n            assign = include('src::object.assign');\nscale = include('src::browser.scale')();\n\n            var_init_locked_1609121328445 = true ;\n        }\n        \n    \n                        return main.call(this , context , {text , x , y , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.draw.word"
  },
  "src::browser.scale": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::browser.scale()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121328469;\n\n                    function main(){\n\n        /**\r\n * \r\n * 获得当前浏览器的缩放比率\r\n * \r\n * @return {number} 缩放比率\r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn window.devicePixelRatio ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121328469){\n\n            return var_once_value_1609121328469 ;\n\n        }\n        return var_once_value_1609121328469 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.scale"
  },
  "src::browser.canvas.init": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.init(<HTMLElement> canvas , <number> scale)",
    "standard": true,
    "importNames": [
      "src::browser.scale",
      "src::os.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let browserScale,OS;\n    \n                    let var_init_locked_1610693101062;\n    \n                    \n\n                    function main(canvas , scale){\n\n        \r\n/**\r\n * \r\n * 初始化画板\r\n * \r\n * @import browserScale from browser.scale value\r\n * \r\n * @import OS from os.name value\r\n * \r\n * @param {HTMLElement} canvas 画板元素\r\n * \r\n * @param {number} [scale = 1] 外部传入缩放比例\r\n * \r\n * \r\n */\r\n\r\n let {\r\n    clientWidth,\r\n    clientHeight\r\n } = canvas ;\r\n\r\n scale *= browserScale ;\r\n\r\n /*switch(OS){\r\n\r\n   case 'Android':\r\n   case 'iOS':\r\n\r\n      scale = 1 ;\r\n }*/\r\n\r\n canvas.width = clientWidth * scale;\r\n\r\n canvas.height = clientHeight * scale;\r\n\r\n canvas.getContext('2d').scale(scale , scale) ;\n\n    }\n    \n                    return function(canvas , scale = 1){\n    \n                        \n        if(!var_init_locked_1610693101062){\n\n            browserScale = include('src::browser.scale')();\nOS = include('src::os.name')();\n\n            var_init_locked_1610693101062 = true ;\n        }\n        \n    \n                        return main.call(this , canvas , scale) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.init"
  },
  "src::browser.canvas.player.engine": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.player.engine(<browser.canvas.Player> player)",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::is.number",
      "src::event.listener.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,isNumber,add;\n    \n                    let var_init_locked_1609121328505;\n    \n                    let var_class_1609121328505;\n    \n                    \n\n                    let var_global_main_1609121328505 ;\n    \n                    return function(player){\n    \n                        \n        if(!var_init_locked_1609121328505){\n\n            Observable = include('src::mixin.observable');\nisNumber = include('src::is.number');\nadd = include('src::event.listener.add');\n\n            \r\n/**\r\n * \r\n * 播放器引擎\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import is.number\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @param {browser.canvas.Player} player 播放器\r\n * \r\n * \r\n */\r\n\r\n class main extends mixins({\r\n    mixins:[\r\n       Observable\r\n    ]\r\n}){\r\n\r\n    constructor({\r\n        player,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        let me = this ;\r\n\r\n        me.player = player ;\r\n\r\n        add(player , 'add' , 'onPlayerAdd' , {\r\n            scope:me\r\n        }) ;\r\n    }\r\n\r\n    onPlayerAdd(player , user){\r\n\r\n        this.start(user) ;\r\n    }\r\n\r\n    get isRunning(){\r\n\r\n        return this.hasOwnProperty('runId') ;\r\n    }\r\n\r\n    start(user){\r\n\r\n        let me = this,\r\n        {\r\n            isRunning,\r\n            player\r\n        } = me ;\r\n\r\n        if(!isRunning){\r\n\r\n            user = user || player.activeUser ;\r\n\r\n            if(user){\r\n\r\n                launch.call(me , user) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    end(){\r\n\r\n        let me = this,\r\n        {\r\n            runId\r\n        }= me ;\r\n\r\n        if(isNumber(runId)){\r\n\r\n            clearTimeout(runId) ;\r\n        }\r\n\r\n        delete me.runId ;\r\n    }\r\n }\r\n\r\n function launch(user) {\r\n     \r\n    let me = this,\r\n    {\r\n        player\r\n    } = me,\r\n    {\r\n        cursor,\r\n        records\r\n    } = user;\r\n\r\n    let record = records[cursor];\r\n\r\n    if(record){\r\n        \r\n        let {\r\n            api,\r\n            params,\r\n            delay\r\n        } = record ;\r\n\r\n        user.cursor = cursor + 1;\r\n\r\n        if(isNumber(delay)){\r\n\r\n            me.runId = setTimeout(() => {\r\n\r\n                include(`browser.canvas.record.api.${api}`).call(player , params) ;\r\n    \r\n                launch.call(me , user) ;\r\n    \r\n            } , delay) ;\r\n        \r\n        }else{\r\n\r\n            me.runId = null ;\r\n\r\n            include(`browser.canvas.record.api.${api}`).call(player , params) ;\r\n    \r\n            launch.call(me , user) ;\r\n        }\r\n    \r\n    }else{\r\n\r\n        me.end() ;\r\n\r\n        me.start() ;\r\n    }\r\n }\n\n            var_class_1609121328505 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121328505 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::browser.canvas.player.engine' ;\n                }\n\n            } ;\n\n            main = var_class_1609121328505 ;\n        \nvar_global_main_1609121328505 = main;\n\n            var_init_locked_1609121328505 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121328505(player) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.player.engine"
  },
  "src::browser.canvas.player": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.player(<canvas.Context> context)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.string",
      "src::is.function",
      "src::mixin.observable",
      "src::browser.canvas.data.get",
      "src::browser.canvas.data.set",
      "src::browser.canvas.player.engine",
      "src::array.remove.all"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,isString,isFunction,Observable,getData,setData,createEngine,removeAll;\n    \n                    let var_init_locked_1609121328538;\n    \n                    let var_class_1609121328538;\n    \n                    \n\n                    let var_global_main_1609121328538 ;\n    \n                    return function(context){\n    \n                        \n        if(!var_init_locked_1609121328538){\n\n            isObject = include('src::is.object.simple');\nisString = include('src::is.string');\nisFunction = include('src::is.function');\nObservable = include('src::mixin.observable');\ngetData = include('src::browser.canvas.data.get');\nsetData = include('src::browser.canvas.data.set');\ncreateEngine = include('src::browser.canvas.player.engine');\nremoveAll = include('src::array.remove.all');\n\n            /**\r\n * \r\n * 画板播放机\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import getData from browser.canvas.data.get\r\n * \r\n * @import setData from browser.canvas.data.set\r\n * \r\n * @import createEngine from .player.engine\r\n * \r\n * @import removeAll from array.remove.all\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n */\r\n\r\n const {\r\n    keys\r\n } = Object ;\r\n\r\n \r\nclass main extends mixins({\r\n    mixins:[\r\n       Observable\r\n    ]\r\n}){\r\n\r\n    constructor({\r\n        context,\r\n        user,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        let me = this ;\r\n\r\n        me.context = context ;\r\n\r\n        me.users = {};\r\n\r\n        tryCreateUser.call(me , {\r\n            [user]({\r\n                delay,\r\n                ...params\r\n            }){\r\n\r\n                return params ;\r\n            }\r\n        }) ;\r\n\r\n        me.engine = createEngine({\r\n            player:me\r\n        }) ;\r\n\r\n        me.activeUsers = [] ;\r\n        \r\n    }\r\n\r\n    saveData(){\r\n\r\n        let me = this,\r\n        {\r\n            context\r\n        } = me ;\r\n\r\n        me.data = getData(context) ;\r\n    }\r\n\r\n    redrawData(){\r\n\r\n        let {\r\n            data,\r\n            context\r\n        } = this ;\r\n\r\n        setData(context , {\r\n            data\r\n        }) ;\r\n    }\r\n\r\n    get activeUser(){\r\n\r\n        let {\r\n            activeUsers\r\n        } = this,\r\n        [\r\n            user\r\n        ] = activeUsers;\r\n\r\n        if(user){\r\n\r\n            removeAll(activeUsers , user) ;\r\n\r\n            return user ;\r\n        }\r\n    }\r\n\r\n    add({\r\n        user,\r\n        ...record\r\n    }){\r\n\r\n        let me = this,\r\n        {\r\n            users,\r\n            activeUsers\r\n        } = me;\r\n\r\n        tryCreateUser.call(me , user) ;\r\n\r\n        user = users[user] ;\r\n\r\n        let {\r\n            records,\r\n            convert\r\n        } = user;\r\n\r\n        records.push(convert(record)) ;\r\n\r\n        activeUsers.push(user) ;\r\n\r\n        me.fireEvent('add' , user , record) ;\r\n    }\r\n }\r\n\r\n function tryCreateUser(user){\r\n\r\n    let {\r\n        users\r\n    } = this ;\r\n\r\n    if(isString(user)){\r\n\r\n        user = {\r\n            [user]:{\r\n                covnert:record => record\r\n            }\r\n        } ;\r\n    }\r\n\r\n    console.log(user) ;\r\n\r\n    if(isObject(user)){\r\n\r\n        let names = keys(user) ;\r\n\r\n        for(let name of names){\r\n\r\n            if(!users.hasOwnProperty(name)){\r\n\r\n                let config = user[name] ;\r\n\r\n                if(isFunction(config)){\r\n\r\n                    config = {\r\n                        convert:config\r\n                    } ;\r\n                }\r\n\r\n                if(isObject(config)){\r\n\r\n                    users[name] = {\r\n                        ...config,\r\n                        cursor:0,\r\n                        records:[]\r\n                    } ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n }\r\n\n\n            var_class_1609121328538 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121328538 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::browser.canvas.player' ;\n                }\n\n            } ;\n\n            main = var_class_1609121328538 ;\n        \nvar_global_main_1609121328538 = main;\n\n            var_init_locked_1609121328538 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121328538(context) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.player"
  },
  "src::browser.canvas.record.api.brush.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.brush.end(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.record.api.brush.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121328560 = new Map();\n    \n                    return function(config){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121328560.has(this)){\n\n            var_current_scope_1609121328560.set(this , (() => {\n                const move = include('src::browser.canvas.record.api.brush.move').bind(this);\n\n                function main(config){\n\n        \r\n/**\r\n * \r\n * 画笔终止\r\n * \r\n * @import move from .move scoped\r\n * \r\n * @param {object} [config] 画线配置\r\n * \r\n */\r\n\r\n move(config) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121328560.get(this) ;\n\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.brush.end"
  },
  "src::browser.canvas.record.api.brush.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.brush.move({<number> x , <number> y , <object> ...styles})",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::browser.scale"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,scale;\n    \n                    let var_init_locked_1609121328576;\n    \n                    \n\n                    function main({x , y , ...styles}){\n\n        \r\n/**\r\n * \r\n * 画笔移动\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import scale from browser.scale value\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {number} config.x 画线横坐标\r\n * \r\n * @param {number} config.y 画线纵坐标\r\n * \r\n * @param {object} [...config.styles] 画线样式\r\n * \r\n */\r\n\r\n let {\r\n    context\r\n } = this ;\r\n\r\nassign(context , styles) ;\r\n\r\ncontext.lineTo(x * scale , y * scale);\r\n\r\ncontext.stroke();\n\n    }\n    \n                    return function({x , y , ...styles} = {}){\n    \n                        \n        if(!var_init_locked_1609121328576){\n\n            assign = include('src::object.assign');\nscale = include('src::browser.scale')();\n\n            var_init_locked_1609121328576 = true ;\n        }\n        \n    \n                        return main.call(this , {x , y , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.brush.move"
  },
  "src::browser.canvas.record.api.brush.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.brush.start({<number> x , <number> y , <object> ...styles})",
    "standard": true,
    "importNames": [
      "src::object.assign",
      "src::browser.scale"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let assign,scale;\n    \n                    let var_init_locked_1609121328596;\n    \n                    \n\n                    function main({x , y , ...styles}){\n\n        \r\n/**\r\n * \r\n * 画笔开始\r\n * \r\n * @import assign from object.assign\r\n * \r\n * @import scale from browser.scale value\r\n * \r\n * @param {object} [config = {}] 画线配置\r\n * \r\n * @param {number} config.x 画笔开始横坐标\r\n * \r\n * @param {number} config.y 画笔开始纵坐标\r\n * \r\n * @param {object} [...config.styles] 画线样式\r\n * \r\n */\r\n\r\n let {\r\n    context\r\n } = this ;\r\n\r\ncontext.beginPath();\r\n\r\nassign(context , styles) ;\r\n\r\ncontext.moveTo(x * scale , y * scale);\n\n    }\n    \n                    return function({x , y , ...styles} = {}){\n    \n                        \n        if(!var_init_locked_1609121328596){\n\n            assign = include('src::object.assign');\nscale = include('src::browser.scale')();\n\n            var_init_locked_1609121328596 = true ;\n        }\n        \n    \n                        return main.call(this , {x , y , ...styles}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.brush.start"
  },
  "src::browser.canvas.record.api.brush": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.brush(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.draw.line",
      "src::browser.scale"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let draw,scale;\n    \n                    let var_init_locked_1609121328623;\n    \n                    \n\n                    function main(config){\n\n        \r\n/**\r\n * \r\n * 画笔\r\n * \r\n * @import draw from browser.canvas.draw.line\r\n * \r\n * @import scale from browser.scale value\r\n * \r\n * @param {object} [config] 画线配置\r\n * \r\n * \r\n */\r\n\r\nlet {\r\n    context\r\n } = this ;\r\n\r\n draw(context , config) ;\n\n    }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121328623){\n\n            draw = include('src::browser.canvas.draw.line');\nscale = include('src::browser.scale')();\n\n            var_init_locked_1609121328623 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.brush"
  },
  "src::browser.canvas.record.api.eraser.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.eraser.end(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.record.api.eraser.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121328641 = new Map();\n    \n                    return function(config){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121328641.has(this)){\n\n            var_current_scope_1609121328641.set(this , (() => {\n                const move = include('src::browser.canvas.record.api.eraser.move').bind(this);\n\n                function main(config){\n\n        \r\n/**\r\n * \r\n * 橡皮擦移动\r\n * \r\n * @import move from .move scoped\r\n * \r\n * @param {object} [config] 擦除配置\r\n * \r\n **/\r\n\r\n move(config) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121328641.get(this) ;\n\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.eraser.end"
  },
  "src::browser.canvas.record.api.eraser.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.eraser.move({<number> x , <number> y , <number> size})",
    "standard": true,
    "importNames": [
      "src::browser.canvas.draw.line.arc",
      "src::browser.canvas.clear"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let arc,clear;\n    \n                    let var_init_locked_1609121328667;\n    \n                    \n\n                    function main({x , y , size}){\n\n        \r\n/**\r\n * \r\n * 橡皮擦移动\r\n * \r\n * @import arc from browser.canvas.draw.line.arc\r\n * \r\n * @import clear from browser.canvas.clear\r\n * \r\n * @param {object} [config = {}] 擦除配置\r\n * \r\n * @param {number} config.x 擦除横坐标\r\n * \r\n * @param {number} config.y 擦除纵坐标\r\n * \r\n * @param {number} config.size 橡皮擦大小\r\n * \r\n */\r\n\r\n let {\r\n    context\r\n } = this ;\r\n\r\n context.save() ;\r\n\r\n arc(context , {\r\n     x,\r\n     y,\r\n     r:size / 2,\r\n     end:270,\r\n     clip:true\r\n }) ;\r\n\r\n clear(context) ;\r\n\r\n context.restore() ;\n\n    }\n    \n                    return function({x , y , size} = {}){\n    \n                        \n        if(!var_init_locked_1609121328667){\n\n            arc = include('src::browser.canvas.draw.line.arc');\nclear = include('src::browser.canvas.clear');\n\n            var_init_locked_1609121328667 = true ;\n        }\n        \n    \n                        return main.call(this , {x , y , size}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.eraser.move"
  },
  "src::browser.canvas.record.api.eraser.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.eraser.start(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.record.api.eraser.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121328706 = new Map();\n    \n                    return function(config){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121328706.has(this)){\n\n            var_current_scope_1609121328706.set(this , (() => {\n                const move = include('src::browser.canvas.record.api.eraser.move').bind(this);\n\n                function main(config){\n\n        \r\n/**\r\n * \r\n * 橡皮擦开始\r\n * \r\n * @import move from .move scoped\r\n * \r\n * @param {object} [config] 擦除配置\r\n * \r\n */\r\n\r\n move(config) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121328706.get(this) ;\n\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.eraser.start"
  },
  "src::browser.canvas.record.api.eraser": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.eraser({<array> points , <number> size})",
    "standard": true,
    "importNames": [
      "src::browser.canvas.draw.line.arc",
      "src::browser.canvas.clear"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let arc,clear;\n    \n                    let var_init_locked_1609121328759;\n    \n                    \n\n                    function main({points , size}){\n\n        \r\n/**\r\n * \r\n * 橡皮擦\r\n * \r\n * @import arc from browser.canvas.draw.line.arc\r\n * \r\n * @import clear from browser.canvas.clear\r\n * \r\n * @param {object} [config = {}] 擦除配置\r\n * \r\n * @param {array} [config.points = []] 擦除点集合\r\n * \r\n * @param {number} config.size 橡皮擦大小\r\n * \r\n */\r\n\r\nlet {\r\n    context\r\n } = this ;\r\n\r\n context.save() ;\r\n\r\n let {\r\n     length\r\n } = points ;\r\n\r\n for(let i = 0 ; i < length ; i += 2){\r\n\r\n    let x = points[i] ;\r\n\r\n    arc(context , {\r\n        x,\r\n        y:x + 1,\r\n        r:size / 2,\r\n        end:270,\r\n        clip:true\r\n    }) ;\r\n }\r\n\r\n clear(context) ;\r\n\r\n context.restore() ;\n\n    }\n    \n                    return function({points = [] , size} = {}){\n    \n                        \n        if(!var_init_locked_1609121328759){\n\n            arc = include('src::browser.canvas.draw.line.arc');\nclear = include('src::browser.canvas.clear');\n\n            var_init_locked_1609121328759 = true ;\n        }\n        \n    \n                        return main.call(this , {points , size}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.eraser"
  },
  "src::browser.canvas.record.api.word.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.word.end()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 绘制文字结束\r\n * \r\n * \r\n */\r\n\r\n this.saveData() ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.word.end"
  },
  "src::browser.canvas.record.api.word.input": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.word.input(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.draw.word"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let draw;\n    \n                    let var_init_locked_1609121328795;\n    \n                    \n\n                    function main(config){\n\n        \r\n/**\r\n * \r\n * 绘制文字中\r\n * \r\n * @import draw from browser.canvas.draw.word\r\n * \r\n * @param {object} [config] 文字配置\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    context\r\n} = me ;\r\n\r\nme.redrawData() ;\r\n\r\ndraw(context , config) ;\n\n    }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121328795){\n\n            draw = include('src::browser.canvas.draw.word');\n\n            var_init_locked_1609121328795 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.word.input"
  },
  "src::browser.canvas.record.api.word.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.word.start()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 绘制文字开始\r\n * \r\n */\r\n\r\nthis.saveData() ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.word.start"
  },
  "src::browser.canvas.record.api.word": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.record.api.word(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.canvas.draw.word"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let draw;\n    \n                    let var_init_locked_1609121328837;\n    \n                    \n\n                    function main(config){\n\n        \r\n/**\r\n * \r\n * 绘制文字\r\n * \r\n * @import draw from browser.canvas.draw.word\r\n * \r\n * @param {object} [config] 文字配置\r\n * \r\n */\r\n\r\nlet {\r\n    context\r\n} = this ;\r\n\r\ndraw(context , config) ;\n\n    }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121328837){\n\n            draw = include('src::browser.canvas.draw.word');\n\n            var_init_locked_1609121328837 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.record.api.word"
  },
  "src::browser.canvas.recorder": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.recorder(<canvas.Context> context)",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::array.clear"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,arrayClear;\n    \n                    let var_init_locked_1609121328857;\n    \n                    let var_class_1609121328857;\n    \n                    \n\n                    let var_global_main_1609121328857 ;\n    \n                    return function(context){\n    \n                        \n        if(!var_init_locked_1609121328857){\n\n            Observable = include('src::mixin.observable');\narrayClear = include('src::array.clear');\n\n            \r\n/**\r\n * \r\n * 画板录制机\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import array.clear\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n */\r\n\r\n class main extends mixins({\r\n    mixins:[\r\n       Observable\r\n    ]\r\n}){\r\n\r\n    constructor({\r\n        user,\r\n        ...options\r\n    }){\r\n\r\n        super(options) ;\r\n\r\n        let me = this ;\r\n\r\n        me.user = user ;\r\n    }\r\n\r\n    begin(api , params){\r\n\r\n        record.call(this , api , params , 'start' , false) ;\r\n    }\r\n\r\n    record(api , params){\r\n\r\n        record.call(this , api , params , 'process') ;\r\n    }\r\n\r\n    end(api , params){\r\n\r\n        record.call(this , api , params , 'end' , false) ;\r\n    }\r\n }\r\n\r\n function record(api , params , type , isCalcDelay = true){\r\n\r\n    let me = this,\r\n    {\r\n        user,\r\n        previousTime\r\n    } = me,\r\n    record = {\r\n        type,\r\n        user,\r\n        api,\r\n        params\r\n    } ;\r\n\r\n    if(isCalcDelay){\r\n\r\n        record.delay = Date.now() - previousTime ;\r\n    }\r\n\r\n    me.previousTime = Date.now() ;\r\n\r\n    me.fireEvent('record' , record) ;\r\n }\n\n            var_class_1609121328857 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121328857 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::browser.canvas.recorder' ;\n                }\n\n            } ;\n\n            main = var_class_1609121328857 ;\n        \nvar_global_main_1609121328857 = main;\n\n            var_init_locked_1609121328857 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121328857(context) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.recorder"
  },
  "src::browser.canvas.word.width": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.canvas.word.width(<canvas.Context> context , <string> text)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(context , text){\n\n        \r\n/**\r\n * \r\n * 获得文本的宽度\r\n * \r\n * @param {canvas.Context} context 画板的上下文对象\r\n * \r\n * @param {string} text 文本\r\n * \r\n */\r\n\r\nlet {\r\n    width\r\n} = context.measureText(text) ;\r\n\r\nreturn width ;\n\n    }\n    \n                    return function(context , text){\n    \n                        \n    \n                        return main.call(this , context , text) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.canvas.word.width"
  },
  "src::browser.element.class.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.element.class.add(<HTMLElement> el , <mixed> cls)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.array",
      "src::browser.element.class.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isArray,add;\n    \n                    let var_init_locked_1609121328889;\n    \n                    \n\n                    function main(el , cls){\n\n        \r\n/**\r\n * \r\n * 添加样式类 \r\n * \r\n * @import is.string\r\n * \r\n * @import is.array\r\n * \r\n * @import add from .add\r\n * \r\n * @param {HTMLElement} el 添加样式类的元素\r\n * \r\n * @param {mixed} cls 样式类\r\n * \r\n */\r\n\r\nif(isString(cls)){\r\n\r\n    el.classList.add(cls) ;\r\n\r\n}else if(isArray(cls)){\r\n\r\n    for(let item of cls){\r\n\r\n        add(el , item) ;\r\n    }\r\n}\n\n    }\n    \n                    return function(el , cls){\n    \n                        \n        if(!var_init_locked_1609121328889){\n\n            isString = include('src::is.string');\nisArray = include('src::is.array');\nadd = include('src::browser.element.class.add');\n\n            var_init_locked_1609121328889 = true ;\n        }\n        \n    \n                        return main.call(this , el , cls) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.element.class.add"
  },
  "src::browser.element.class.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::browser.element.class.has(<HTMLElement> el , <string> cls)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el , cls){\n\n        \r\n/**\r\n * \r\n * 判断指定元素是否拥有指定样式类\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} cls 样式类\r\n * \r\n * @return {boolean} 如果元素拥有对应样式类则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return el.classList.contains(cls) ;\n\n    }\n    \n                    return function(el , cls){\n    \n                        \n    \n                        return main.call(this , el , cls) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.element.class.has"
  },
  "src::browser.element.class.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.element.class.remove(<HTMLElement> el , <mixed> cls)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.array",
      "src::browser.element.class.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isArray,remove;\n    \n                    let var_init_locked_1609121328931;\n    \n                    \n\n                    function main(el , cls){\n\n        \r\n/**\r\n * \r\n * 移除样式类 \r\n * \r\n * @import is.string\r\n * \r\n * @import is.array\r\n * \r\n * @import remove from .remove\r\n * \r\n * @param {HTMLElement} el 移除样式类的元素\r\n * \r\n * @param {mixed} cls 样式类\r\n * \r\n */\r\n\r\nif(isString(cls)){\r\n\r\n    el.classList.remove(cls) ;\r\n\r\n}else if(isArray(cls)){\r\n\r\n    for(let item of cls){\r\n\r\n        remove(el , item) ;\r\n    }\r\n}\n\n    }\n    \n                    return function(el , cls){\n    \n                        \n        if(!var_init_locked_1609121328931){\n\n            isString = include('src::is.string');\nisArray = include('src::is.array');\nremove = include('src::browser.element.class.remove');\n\n            var_init_locked_1609121328931 = true ;\n        }\n        \n    \n                        return main.call(this , el , cls) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.element.class.remove"
  },
  "src::browser.element.style": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.element.style(<HTMLElement> el , <string|array> name , <boolean> isNumber)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::browser.element.style"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,get;\n    \n                    let var_init_locked_1609121328956;\n    \n                    \n\n                    function main(el , name , isNumber){\n\n        \r\n/**\r\n * \r\n * 获得元素的样式\r\n * \r\n * @import is.array\r\n * \r\n * @import get from .style\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string|array} name 样式名称\r\n * \r\n * @param {boolean} [isNumber = false] 是否输出为数字 \r\n * \r\n * @return {mixed} 样式值 \r\n * \r\n */\r\n\r\n if(isArray(name)){\r\n\r\n    let names = name,\r\n        result = {};\r\n\r\n    for(let name of names){\r\n\r\n        result[name] = get(el , name , isNumber) ;\r\n    }\r\n\r\n    return result ;\r\n }\r\n\r\n let value = getComputedStyle(el , null)[name] ;\r\n\r\n if(isNumber){\r\n\r\n    return parseFloat(value) ;\r\n }\r\n\r\n return value ;\n\n    }\n    \n                    return function(el , name , isNumber = false){\n    \n                        \n        if(!var_init_locked_1609121328956){\n\n            isArray = include('src::is.array');\nget = include('src::browser.element.style');\n\n            var_init_locked_1609121328956 = true ;\n        }\n        \n    \n                        return main.call(this , el , name , isNumber) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.element.style"
  },
  "src::browser.element.xy": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.element.xy(<HTMLElement> el)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 获得元素的坐标\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @return {object} 坐标信息\r\n * \r\n */\r\n\r\n const {\r\n    round\r\n } = Math ;\r\n\r\nlet x = 0,\r\n    y = 0;\r\n\r\nif(el !== document && el !== document.body){\r\n\r\n    let {\r\n        left:bodyLeft,\r\n        top:bodyTop\r\n    } = document.body.getBoundingClientRect(),\r\n    {\r\n        left,\r\n        top\r\n    } = el.getBoundingClientRect();\r\n\r\n    x = left - bodyLeft,\r\n    y = top - bodyTop;\r\n}\r\n\r\nreturn {\r\n    x:round(x),\r\n    y:round(y)\r\n} ;\n\n    }\n    \n                    return function(el){\n    \n                        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.element.xy"
  },
  "src::browser.event.dispatch": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.dispatch(<HTMLElement> el , <string> name , <mixed> detail)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el , name , detail){\n\n        \r\n/**\r\n * \r\n * 触发一个自定义事件\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} name 自定义事件名称\r\n * \r\n * @param {mixed} detail 基于自定义事件传递的数据\r\n * \r\n */\r\n\r\nel.dispatchEvent(new CustomEvent(name , {\r\n   detail,\r\n   bubbles:false,\r\n   cancelable:false\r\n})) ;\r\n\n\n    }\n    \n                    return function(el , name , detail){\n    \n                        \n    \n                        return main.call(this , el , name , detail) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.dispatch"
  },
  "src::browser.event.gesture.contextmenu.contextmenu": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.contextmenu.contextmenu(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.prevent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prevent;\n    \n                    let var_init_locked_1609121329030;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 阻止默认右击菜单事件\r\n * \r\n * @import prevent from browser.event.prevent\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nprevent(e) ;\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329030){\n\n            prevent = include('src::browser.event.prevent');\n\n            var_init_locked_1609121329030 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.contextmenu.contextmenu"
  },
  "src::browser.event.prevent": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.prevent(<Event> e)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 禁用默认事件\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n e.preventDefault() ;\n\n    }\n    \n                    return function(e){\n    \n                        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.prevent"
  },
  "src::browser.event.gesture.contextmenu.event": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::browser.event.gesture.contextmenu.event()",
    "standard": true,
    "importNames": [
      "src::function.bind",
      "src::browser.event.gesture.longpress",
      "src::browser.event.gesture.contextmenu.contextmenu"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let bind,longpress,contextmenu;\n    \n                    let var_init_locked_1609121329112;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 右键事件配置\r\n * \r\n * @import bind from function.bind\r\n * \r\n * @import longpress from ..longpress\r\n * \r\n * @import contextmenu from .contextmenu\r\n *\r\n * @return {array} 事件配置  \r\n * \r\n */\r\n\r\n return [\r\n    'mouseup',\r\n    {\r\n        event:'contextmenu',\r\n        listener:contextmenu\r\n    },\r\n    {\r\n        event:'touchstart',\r\n        listener:bind(longpress , this , [\r\n            'contextmenu'\r\n        ])\r\n    }\r\n] ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121329112){\n\n            bind = include('src::function.bind');\nlongpress = include('src::browser.event.gesture.longpress');\ncontextmenu = include('src::browser.event.gesture.contextmenu.contextmenu');\n\n            var_init_locked_1609121329112 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.contextmenu.event"
  },
  "src::function.bind": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::function.bind(<function> fn , <mixed> scope , <mixed[]> args , <mixed> appendArgs)",
    "standard": true,
    "importNames": [
      "src::array.clone",
      "src::array.insert",
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let clone,insert,isNumber;\n    \n                    let var_init_locked_1609121329136;\n    \n                    \n\n                    function main(fn , scope , args , appendArgs){\n\n        \r\n/**\r\n * \r\n * 函数绑定作用域\r\n * \r\n * @import clone from array.clone\r\n * \r\n * @import insert from array.insert\r\n * \r\n * @import is.number\r\n * \r\n * @param {function} fn 函数\r\n * \r\n * @param {mixed} [scope] 作用域\r\n * \r\n * @param {mixed[]} [args] 函数参数\r\n * \r\n * @param {mixed} [appendArgs = true] 附加参数位置\r\n * \r\n * @return {function} 绑定作用域的函数\r\n * \r\n */\r\n\r\nif(arguments.length <= 2 ){\r\n\r\n    return fn.bind(scope) ;\r\n\r\n}\r\n\r\nreturn function() {\r\n\r\n    let callArgs = args || arguments;\r\n\r\n    if(appendArgs === true){\r\n\r\n        callArgs = [\r\n            ...arguments,\r\n            ...(args || [])\r\n        ];\r\n        \r\n    }else if (isNumber(appendArgs)){\r\n\r\n        callArgs = clone(arguments);\r\n        \r\n        insert(callArgs , appendArgs, args);\r\n    }\r\n\r\n    return fn.apply(scope || this, callArgs);\r\n};\n\n    }\n    \n                    return function(fn , scope , args , appendArgs = true){\n    \n                        \n        if(!var_init_locked_1609121329136){\n\n            clone = include('src::array.clone');\ninsert = include('src::array.insert');\nisNumber = include('src::is.number');\n\n            var_init_locked_1609121329136 = true ;\n        }\n        \n    \n                        return main.call(this , fn , scope , args , appendArgs) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.bind"
  },
  "src::browser.event.listeners": {
    "meta": "code.meta.script.function",
    "signature": "<Map> src::browser.event.listeners()",
    "standard": true,
    "importNames": [
      "src::map"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let map;\n    \n                    let var_init_locked_1609121329235;\n    \n                    let var_once_value_1609121329235;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 维护全局事件监听对象\r\n * \r\n * @import map value\r\n * \r\n * @return {Map} 集合对象 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn map ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121329235){\n\n            map = include('src::map')();\n\n            var_init_locked_1609121329235 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121329235){\n\n            return var_once_value_1609121329235 ;\n\n        }\n        return var_once_value_1609121329235 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listeners"
  },
  "src::browser.selector.is": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::browser.selector.is(<HTMLElement> el , <string> selector)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el , selector){\n\n        \r\n/**\r\n * \r\n * 判断元素是否匹配选择器\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} selector 选择器字符串\r\n * \r\n * @return {boolean} 如果元素匹配选择器则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n let {\r\n    ownerDocument\r\n } = el ;\r\n\r\n let els = Array.from(ownerDocument.querySelectorAll(selector)) ;\r\n\r\n return els.includes(el) ;\n\n    }\n    \n                    return function(el , selector){\n    \n                        \n    \n                        return main.call(this , el , selector) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.selector.is"
  },
  "src::browser.selector.parent": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::browser.selector.parent(<HTMLElement> el , <string> selector)",
    "standard": true,
    "importNames": [
      "src::browser.selector.is"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121329259;\n    \n                    \n\n                    function main(el , selector){\n\n        \r\n/**\r\n * \r\n * 判断元素及其元素父祖级元素是否匹配选择器\r\n * \r\n * @import is from .is\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} selector 选择器\r\n * \r\n * @return {boolean} 如果匹配则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n while(el){\r\n\r\n    if(is(el , selector)){\r\n\r\n        return el ;\r\n    }\r\n\r\n    el = el.parentElement ;\r\n }\n\n    }\n    \n                    return function(el , selector){\n    \n                        \n        if(!var_init_locked_1609121329259){\n\n            is = include('src::browser.selector.is');\n\n            var_init_locked_1609121329259 = true ;\n        }\n        \n    \n                        return main.call(this , el , selector) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.selector.parent"
  },
  "src::browser.event.stop": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.stop(<Event> e)",
    "standard": true,
    "importNames": [
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject;\n    \n                    let var_init_locked_1609121329295;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 停止事件\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\ne.stopPropagation() ;\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329295){\n\n            isObject = include('src::is.object.simple');\n\n            var_init_locked_1609121329295 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.stop"
  },
  "src::browser.event.listener.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.listener.add(<mixed> target , <mixed> event , <mixed> fn , <object> config)",
    "standard": true,
    "importNames": [
      "src::browser.event.listeners",
      "src::browser.selector.parent",
      "src::browser.event.stop",
      "src::browser.event.prevent",
      "src::event.listener.add",
      "src::is.object.simple",
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let listeners,is,stopEvent,preventEvent,doAdd,isObject,get;\n    \n                    let var_init_locked_1609121329219;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 监听事件\r\n * \r\n * @import listeners from ..listeners value\r\n * \r\n * @import is from browser.selector.parent\r\n * \r\n * @import stopEvent from ..stop\r\n * \r\n * @import preventEvent from ..prevent\r\n * \r\n * @import doAdd from event.listener.add\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {mixed} target 目标\r\n * \r\n * @param {mixed} event 目标监听事件\r\n * \r\n * @param {mixed} [fn] 目标监听回调\r\n * \r\n * @param {object} [config = {}] 配置\r\n * \r\n */\r\n\r\n function main(target , event , fn , config){\r\n\r\n    if(isObject(event)){\r\n\r\n        let {\r\n            scope,\r\n            ...listeners\r\n        } = event ;\r\n\r\n        let names = Object.keys(listeners) ;\r\n\r\n        for(let name of names){\r\n\r\n            let listener = listeners[name] ;\r\n\r\n            if(isObject(listener)){\r\n\r\n                let {\r\n                    fn,\r\n                    ...options\r\n                } = listener ;\r\n    \r\n                options.scope = options.scope || scope ;\r\n    \r\n                add(target , name , fn , options) ;\r\n            \r\n            }else{\r\n\r\n                add(target , name , listeners[name] , {\r\n                    scope\r\n                }) ;\r\n            }\r\n        }\r\n        \r\n    }else{\r\n\r\n        add(target , event , fn , config) ;\r\n    }\r\n\r\n }\r\n\r\n function add(target , event , fn , {\r\n     selector,\r\n     stop = false,\r\n     prevent = false,\r\n     scope,\r\n     ...config\r\n }){\r\n\r\n    if(listeners.has(target , event , fn , scope)){\r\n\r\n        return ;\r\n    }\r\n\r\n    let useFn = get(fn , scope),\r\n        listener = e =>{\r\n    \r\n            let {\r\n                target\r\n            } = e ;\r\n    \r\n            if(stop){\r\n                \r\n                stopEvent(e) ;\r\n            }\r\n    \r\n            if(prevent){\r\n    \r\n                preventEvent(e) ;\r\n            }\r\n    \r\n            if(selector){\r\n    \r\n                if(is(target , selector)){\r\n    \r\n                    useFn(e) ;\r\n                }\r\n                \r\n            }else{\r\n    \r\n                useFn(e) ;\r\n            }\r\n        };\r\n    \r\n    listeners.set(target , event , fn , scope , listener) ;\r\n    \r\n    doAdd(target , event , listener , {\r\n        options:{\r\n            passive:false\r\n        },\r\n        ...config\r\n    }) ;\r\n }\r\n\r\n\n    \n                    return function(target , event , fn , config = {}){\n    \n                        \n        if(!var_init_locked_1609121329219){\n\n            listeners = include('src::browser.event.listeners')();\nis = include('src::browser.selector.parent');\nstopEvent = include('src::browser.event.stop');\npreventEvent = include('src::browser.event.prevent');\ndoAdd = include('src::event.listener.add');\nisObject = include('src::is.object.simple');\nget = include('src::function.get');\n\n            var_init_locked_1609121329219 = true ;\n        }\n        \n    \n                        return main.call(this , target , event , fn , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.add"
  },
  "src::browser.event.listener.global.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.listener.global.add(<string> event , <function> fn , <object> config)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let add;\n    \n                    let var_init_locked_1609121329190;\n    \n                    \n\n                    function main(event , fn , config){\n\n        \r\n/**\r\n * \r\n * 监听全局事件\r\n * \r\n * @import add from ..add\r\n * \r\n * @param {string} event 目标监听事件\r\n * \r\n * @param {function} fn 目标监听回调\r\n * \r\n * @param {object} [config] 配置\r\n * \r\n * \r\n */\r\n\r\n add(window , event , fn , config) ;\n\n    }\n    \n                    return function(event , fn , config){\n    \n                        \n        if(!var_init_locked_1609121329190){\n\n            add = include('src::browser.event.listener.add');\n\n            var_init_locked_1609121329190 = true ;\n        }\n        \n    \n                        return main.call(this , event , fn , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.global.add"
  },
  "src::browser.event.name.single": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.event.name.single(<string> name , <PointerEvent> e)",
    "standard": true,
    "importNames": [
      "src::is.browser.support.pointer",
      "src::is.browser.support.touch"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isSupportPointer,isSupportTouch;\n    \n                    let var_init_locked_1609121329315;\n    \n                    \n\n                    function main(name , e){\n\n        \r\n/**\r\n * \r\n * 获取事件名称\r\n * \r\n * @import isSupportPointer from is.browser.support.pointer\r\n * \r\n * @import isSupportTouch from is.browser.support.touch\r\n * \r\n * @param {string} name 事件名称\r\n * \r\n * @param {PointerEvent} [e] 事件对象\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n let isTouch = isSupportTouch() ;\r\n\r\n if(e){\r\n\r\n    let {\r\n        pointerType,\r\n        touches\r\n    } = e;\r\n    \r\n    if(pointerType === 'touch' || touches){\r\n\r\n        isTouch = true ;\r\n    }\r\n }\r\n\r\nif(isTouch){\r\n\r\n    return `touch${name}` ;\r\n\r\n}else{\r\n\r\n    switch(name){\r\n\r\n        case 'start':\r\n    \r\n            name = 'down' ;\r\n    \r\n            break ;\r\n    \r\n        case 'end':\r\n    \r\n            name = 'up' ;\r\n    }\r\n    \r\n    if(isSupportPointer()){\r\n\r\n        return `pointer${name}` ;\r\n    }\r\n    \r\n    return `mouse${name}` ;\r\n}\r\n\r\n\n\n    }\n    \n                    return function(name , e){\n    \n                        \n        if(!var_init_locked_1609121329315){\n\n            isSupportPointer = include('src::is.browser.support.pointer');\nisSupportTouch = include('src::is.browser.support.touch');\n\n            var_init_locked_1609121329315 = true ;\n        }\n        \n    \n                        return main.call(this , name , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.name.single"
  },
  "src::browser.event.single": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.event.single(<Event> e , <string> name)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(e , name){\n\n        \r\n/**\r\n * \r\n * 获得单一的事件对象\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n * @param {string} name 事件名称\r\n *  \r\n * @return {mixed} 事件对象 \r\n * \r\n */\r\n\r\n let touches ;\r\n\r\n switch(name){\r\n\r\n    case 'start':\r\n    case 'move':\r\n\r\n        touches = e.touches ;\r\n\r\n        break ;\r\n\r\n    case 'end':\r\n\r\n        touches = e.changedTouches ;\r\n }\r\n\r\n if(touches){\r\n\r\n    return touches[0] ;\r\n }\r\n\r\n return e ;\n\n    }\n    \n                    return function(e , name){\n    \n                        \n    \n                        return main.call(this , e , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.single"
  },
  "src::browser.event.listener.remove": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.event.listener.remove(<mixed> target , <mixed> event , <mixed> fn , <object> scope)",
    "standard": true,
    "importNames": [
      "src::browser.event.listeners",
      "src::event.listener.remove",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let listeners,doRemove,isObject;\n    \n                    let var_init_locked_1609121329430;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 去除监听事件\r\n * \r\n * @import listeners from ..listeners value\r\n * \r\n * @import doRemove from event.listener.remove\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {mixed} target\r\n * \r\n * @param {mixed} event 目标监听事件\r\n * \r\n * @param {mixed} fn 目标监听回调\r\n * \r\n * @param {object} [scope] 作用域\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n function main(target , event , fn , scope){\r\n\r\n    if(isObject(event)){\r\n\r\n        let names = Object.keys(event) ;\r\n\r\n        for(let name of names){\r\n\r\n            if(name !== 'scope'){\r\n\r\n                let fn,\r\n                    listener = event[name];\r\n\r\n                if(isObject(listener)){\r\n\r\n                    fn = listener.fn ;\r\n\r\n                    scope = scope || listener.scope ;\r\n                \r\n                }else{\r\n\r\n                    fn = listener ;\r\n                }\r\n\r\n                remove(target , name , fn , scope) ;\r\n            }\r\n        }\r\n    \r\n    }else{\r\n\r\n        remove(target , event , fn , scope) ;\r\n    }\r\n }\r\n\r\n function remove(target , event , fn , scope){\r\n\r\n    let listener = listeners.get(target , event , fn , scope);\r\n\r\n    if(listener){\r\n\r\n        doRemove(target , event , listener) ;\r\n\r\n        listeners.delete(target , event , fn , scope) ;\r\n    }\r\n }\n    \n                    return function(target , event , fn , scope){\n    \n                        \n        if(!var_init_locked_1609121329430){\n\n            listeners = include('src::browser.event.listeners')();\ndoRemove = include('src::event.listener.remove');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121329430 = true ;\n        }\n        \n    \n                        return main.call(this , target , event , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.remove"
  },
  "src::browser.event.listener.global.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.listener.global.remove(<string> event , <function> fn)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove;\n    \n                    let var_init_locked_1609121329411;\n    \n                    \n\n                    function main(event , fn){\n\n        \r\n/**\r\n * \r\n * 去除监听全局事件\r\n * \r\n * @import remove from ..remove\r\n * \r\n * @param {string} event 目标监听事件\r\n * \r\n * @param {function} fn 目标监听回调\r\n * \r\n * \r\n */\r\n\r\nremove(window , event , fn) ;\n\n    }\n    \n                    return function(event , fn){\n    \n                        \n        if(!var_init_locked_1609121329411){\n\n            remove = include('src::browser.event.listener.remove');\n\n            var_init_locked_1609121329411 = true ;\n        }\n        \n    \n                        return main.call(this , event , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.global.remove"
  },
  "src::browser.event.gesture.longpress.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.longpress.disabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.global.remove",
      "src::browser.event.name.single"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let un,getName;\n    \n                    let var_init_locked_1609121329391;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 取消监听全局事件\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   onEnd,\r\n   onMove,\r\n   timer\r\n} = me;\r\n\r\nif(timer){\r\n\r\n    clearTimeout(timer) ;\r\n}\r\n\r\nun(getName('move' , e) , onMove) ;\r\n\r\nun(getName('end' , e) ,  onEnd) ;\r\n\r\ndelete me.onMove ;\r\n\r\ndelete me.onEnd ;\r\n\r\ndelete me.timer ;\r\n\r\ndelete me.startPoint ;\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329391){\n\n            un = include('src::browser.event.listener.global.remove');\ngetName = include('src::browser.event.name.single');\n\n            var_init_locked_1609121329391 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress.disabled"
  },
  "src::browser.event.gesture.longpress.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.longpress.end(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.longpress.disabled"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121329374 = new Map();\n    \n                    return function(e){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121329374.has(this)){\n\n            var_current_scope_1609121329374.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.longpress.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\ndisabled(e) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329374.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress.end"
  },
  "src::browser.event.touches": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.event.touches(<Event> e , <string> name)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(e , name){\n\n        \r\n/**\r\n * \r\n * 如果当前设备处于多点触控时返回，其它时候返回空\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n * @param {string} name 事件名称\r\n * \r\n * @return {mixed} 触摸事件集合\r\n * \r\n */\r\n\r\nlet touches ;\r\n\r\nswitch(name){\r\n\r\n   case 'start':\r\n   case 'move':\r\n\r\n       touches = e.touches ;\r\n\r\n       break ;\r\n\r\n   case 'end':\r\n\r\n       touches = e.changedTouches ;\r\n}\r\n\r\nif(touches && touches.length > 1){\r\n\r\n    return touches ;\r\n}\n\n    }\n    \n                    return function(e , name){\n    \n                        \n    \n                        return main.call(this , e , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.touches"
  },
  "src::math.point.line.distance": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.point.line.distance(<object> point1 , <object> point2)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(point1 , point2){\n\n        /**\r\n * \r\n * 计算两点之间的距离\r\n * \r\n * @param {object} point1 第一个点的位置\r\n * \r\n * @param {object} point2 第二个点的位置\r\n * \r\n * @return {number} 两点之间的距离\r\n * \r\n */\r\n\r\nconst {\r\n    pow,\r\n    sqrt\r\n} = Math ;\r\n\r\nreturn sqrt(pow(point1.x - point2.x , 2) + pow(point1.y - point2.y , 2) , 2);\n\n    }\n    \n                    return function(point1 , point2){\n    \n                        \n    \n                        return main.call(this , point1 , point2) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.point.line.distance"
  },
  "config::event.longpress": {
    "meta": "code.meta.config",
    "signature": "<void> config::event.longpress(<string> key)",
    "standard": true,
    "importNames": [
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121329514;\n    \n                    \n\n                    const config = {\r\n    \"minDuration\":600,\r\n    \"moveDistance\":30\r\n};\n                function main(key){\n\n                    return get(config , key) ;\n\n                }\n                \n    \n                    return function(key){\n    \n                        \n        if(!var_init_locked_1609121329514){\n\n            get = include('src::object.value.get');\n\n            var_init_locked_1609121329514 = true ;\n        }\n        \n    \n                        return main.call(this , key) ;\n                    } ;\n    \n                })()",
    "folder": "config",
    "name": "event.longpress"
  },
  "src::browser.event.gesture.longpress.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.longpress.move(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.single",
      "src::math.point.line.distance",
      "src::browser.scale",
      "src::browser.event.gesture.longpress.disabled",
      "config::event.longpress"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,getEvent,getDistance,getScale,moveDistance;\n    \n                    let var_init_locked_1609121329452;\n \n                    \n\n                    const var_current_scope_1609121329452 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329452){\n\n            getTouchEvents = include('src::browser.event.touches');\ngetEvent = include('src::browser.event.single');\ngetDistance = include('src::math.point.line.distance');\ngetScale = include('src::browser.scale');\nmoveDistance = config('event.longpress' , 'moveDistance');\n\n            var_init_locked_1609121329452 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329452.has(this)){\n\n            var_current_scope_1609121329452.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.longpress.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 移动事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getScale from browser.scale\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @config moveDistance from event.longpress...moveDistance\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nif(getTouchEvents(e , 'move')){\r\n\r\n    disabled(e) ;\r\n\r\n    return ;\r\n}\r\n\r\nlet me = this,\r\n    {\r\n        pageX,\r\n        pageY\r\n    } = getEvent(e , 'move'),\r\n    {\r\n        startPoint,\r\n        dispatch\r\n    } = me;\r\n\r\nif(Math.round(getDistance({\r\n    x:pageX,\r\n    y:pageY\r\n} , startPoint)) * getScale() >= moveDistance){\r\n\r\n    disabled(e) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329452.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress.move"
  },
  "src::browser.event.gesture.longpress.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.longpress.enabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.listener.global.add",
      "src::browser.event.gesture.longpress.end",
      "src::browser.event.gesture.longpress.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,on;\n    \n                    let var_init_locked_1609121329355;\n \n                    \n\n                    const var_current_scope_1609121329355 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329355){\n\n            getName = include('src::browser.event.name.single');\non = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121329355 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329355.has(this)){\n\n            var_current_scope_1609121329355.set(this , (() => {\n                const onEnd = include('src::browser.event.gesture.longpress.end').bind(this);\nconst onMove = include('src::browser.event.gesture.longpress.move').bind(this);\n\n                function main(e){\n\n        /**\r\n * \r\n * 启用事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n * @import onMove from .move scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n let me = this ;\r\n \r\n on(getName('move' , e) , me.onMove = onMove) ;\r\n\r\n on(getName('end' , e) , me.onEnd = onEnd) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329355.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress.enabled"
  },
  "src::browser.event.gesture.longpress.event": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::browser.event.gesture.longpress.event()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121329532;\n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 获得启动监听事件名称\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\nreturn getName('start') ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121329532){\n\n            getName = include('src::browser.event.name.single');\n\n            var_init_locked_1609121329532 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress.event"
  },
  "src::browser.event.gesture.longpress": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.longpress(<Event> e , <string> event)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.global.add",
      "src::browser.event.name.single",
      "src::browser.event.single",
      "src::browser.event.gesture.longpress.enabled",
      "src::browser.event.gesture.longpress.disabled",
      "src::browser.event.gesture.longpress.event",
      "config::event.longpress"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let on,getName,getEvent,browserEventGestureLongpressEvent,minDuration;\n    \n                    let var_init_locked_1609121329163;\n \n                    \n\n                    const var_current_scope_1609121329163 = new Map();\n    \n                    return function(e , event = 'longpress'){\n    \n                        \n        if(!var_init_locked_1609121329163){\n\n            on = include('src::browser.event.listener.global.add');\ngetName = include('src::browser.event.name.single');\ngetEvent = include('src::browser.event.single');\nbrowserEventGestureLongpressEvent = include('src::browser.event.gesture.longpress.event');\nminDuration = config('event.longpress' , 'minDuration');\n\n            var_init_locked_1609121329163 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329163.has(this)){\n\n            var_current_scope_1609121329163.set(this , (() => {\n                const enabled = include('src::browser.event.gesture.longpress.enabled').bind(this);\nconst disabled = include('src::browser.event.gesture.longpress.disabled').bind(this);\n\n                function main(e , event){\n\n        \r\n/**\r\n * \r\n * 开始事件监听\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import enabled from .longpress.enabled scoped\r\n * \r\n * @import disabled from .longpress.disabled scoped\r\n * \r\n * @import .longpress.event\r\n * \r\n * @config minDuration from event.longpress...minDuration\r\n *\r\n * @param {Event} e 事件对象\r\n * \r\n * @param {string} [event = 'longpress'] 抛出的事件名称\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\nif(me.startPoint){\r\n\r\n   return ;\r\n\r\n}\r\n\r\nlet nativeEvent = getEvent(e , 'start'),\r\n    {\r\n        pageX:x,\r\n        pageY:y\r\n    } = nativeEvent;\r\n\r\n me.startPoint = {\r\n    x,\r\n    y\r\n } ;\r\n\r\nme.timer = setTimeout(() => {\r\n\r\n    me.dispatch(event , {\r\n        nativeEvent\r\n    }) ;\r\n\r\n    disabled(e) ;\r\n\r\n    if(event === 'longpress'){\r\n\r\n        on(getName('end' , e) , e =>  me.dispatch('longpresscancel' , {\r\n            nativeEvent:getEvent(e , 'end')\r\n        }) , {\r\n            once:true\r\n        }) ;\r\n    }\r\n\r\n } , minDuration);\r\n\r\nenabled(e) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329163.get(this) ;\n\n        \n    \n                        return main.call(this , e , event) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.longpress"
  },
  "src::browser.event.gesture.contextmenu": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.contextmenu(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.contextmenu.event"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let browserEventGestureContextmenuEvent;\n    \n                    let var_init_locked_1609121329554;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 开始事件监听\r\n * \r\n * @import .contextmenu.event\r\n *\r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet {\r\n    button\r\n} = e ;\r\n\r\nif(e.button === 2){\r\n\r\n    this.dispatch('contextmenu' , {\r\n        nativeEvent:e\r\n    }) ;\r\n    \r\n}\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329554){\n\n            browserEventGestureContextmenuEvent = include('src::browser.event.gesture.contextmenu.event');\n\n            var_init_locked_1609121329554 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.contextmenu"
  },
  "src::browser.event.gesture.drag.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.disabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::move.drag",
      "src::browser.event.gesture.drag.end",
      "src::browser.event.listener.global.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,un;\n    \n                    let var_init_locked_1609121329573;\n \n                    \n\n                    const var_current_scope_1609121329573 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329573){\n\n            getName = include('src::browser.event.name.single');\nun = include('src::browser.event.listener.global.remove');\n\n            var_init_locked_1609121329573 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329573.has(this)){\n\n            var_current_scope_1609121329573.set(this , (() => {\n                const onMove = include('src::move.drag').bind(this);\nconst onEnd = include('src::browser.event.gesture.drag.end').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 禁用监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import onMove from move.drag scoped\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    onStart,\r\n    onMove,\r\n    onEnd\r\n} = me;\r\n\r\nun(getName('move' , e) , onStart) ;\r\n\r\nun(getName('move' , e) ,  onMove) ;\r\n\r\nun(getName('end' , e) , onEnd) ;\r\n\r\ndelete me.onStart ;\r\n\r\ndelete me.onMove ;\r\n\r\ndelete me.onEnd ;\r\n\r\ndelete me.info ;\r\n\r\ndelete me.startTime ;\r\n\r\ndelete me.startPoint ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329573.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.disabled"
  },
  "src::move.drag": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::move.drag(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 函数实现说明\r\n * \r\n * @param {mixed} data 参数说明\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n // 代码实现\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "move.drag"
  },
  "src::browser.event.gesture.drag.info.update": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.info.update(<string> axis , <boolean> updatePrevious)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(axis , updatePrevious){\n\n        \r\n/**\r\n * \r\n * 刷新拖放信息\r\n * \r\n * @param {string} axis 轴名称\r\n * \r\n * @param {boolean} updatePrevious 是否更新上一次信息\r\n * \r\n */\r\n\r\n let {\r\n    info,\r\n    startPoint,\r\n    previousPoint,\r\n    lastPoint,\r\n    startTime\r\n } = this ;\r\n\r\n \r\nlet time = Date.now(),\r\n    value = lastPoint[axis],\r\n    previousValue = previousPoint[axis],\r\n    startValue = startPoint[axis],\r\n    delta = value - startValue,\r\n    direction = info.direction,\r\n    capAxis = axis.toUpperCase(),\r\n    previousFlick = info.previous[axis],\r\n    previousDelta;\r\n\r\n    previousDelta = info.delta[axis];\r\n    info.delta[axis] = delta;\r\n    info.absDelta[axis] = Math.abs(delta);\r\n\r\n    if (updatePrevious && value !== previousFlick && value !== info[axis] && time - info.previousTime[axis] >= 50) {\r\n\r\n        info.previous[axis] = info[axis];\r\n        \r\n        info.previousTime[axis] = info.time;\r\n    }\r\n\r\n    info[axis] = value;\r\n\r\n    if (value > previousValue) {\r\n\r\n        direction[axis] = 1;\r\n    }\r\n    else if (value < previousValue) {\r\n\r\n        direction[axis] = -1;\r\n    }\r\n\r\n    info['start' + capAxis] = startPoint[axis];\r\n    info['previous' + capAxis] = info.previous[axis];\r\n    info['page' + capAxis] = info[axis];\r\n    info['delta' + capAxis] = info.delta[axis];\r\n    info['absDelta' + capAxis] = info.absDelta[axis];\r\n    info['previousDelta' + capAxis] = previousDelta;\r\n    info.startTime = startTime;\n\n    }\n    \n                    return function(axis , updatePrevious){\n    \n                        \n    \n                        return main.call(this , axis , updatePrevious) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.info.update"
  },
  "src::browser.event.gesture.drag.end.axis": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.end.axis(<string> axis , <object> info)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(axis , info){\n\n        \r\n/**\r\n * \r\n * 计算拖放速度\r\n * \r\n * @param {string} axis 轴信息\r\n * \r\n * @param {object} info 拖放信息\r\n * \r\n */\r\n\r\nlet duration = info.time - info.previousTime[axis];\r\n\r\nif (duration > 0) {\r\n\r\n    info.flick.velocity[axis] = (info[axis] - info.previous[axis]) / duration;\r\n}\n\n    }\n    \n                    return function(axis , info){\n    \n                        \n    \n                        return main.call(this , axis , info) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.end.axis"
  },
  "src::browser.event.gesture.drag.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.end(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.prevent",
      "src::browser.event.single",
      "src::browser.event.gesture.drag.info.update",
      "src::browser.event.gesture.drag.end.axis",
      "src::browser.event.gesture.drag.disabled"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prevent,getEvent;\n    \n                    let var_init_locked_1609121329610;\n \n                    \n\n                    const var_current_scope_1609121329610 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329610){\n\n            prevent = include('src::browser.event.prevent');\ngetEvent = include('src::browser.event.single');\n\n            var_init_locked_1609121329610 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329610.has(this)){\n\n            var_current_scope_1609121329610.set(this , (() => {\n                const updateInfo = include('src::browser.event.gesture.drag.info.update').bind(this);\nconst onAxisEnd = include('src::browser.event.gesture.drag.end.axis').bind(this);\nconst disabled = include('src::browser.event.gesture.drag.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 结束事件监听\r\n * \r\n * @import prevent from browser.event.prevent\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import updateInfo from .info.update scoped\r\n * \r\n * @import onAxisEnd from .end.axis scoped\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nprevent(e) ;\r\n\r\nlet me = this,\r\n{\r\n    info,\r\n    dispatch\r\n} = me,\r\n{\r\n    pageX:x,\r\n    pageY:y\r\n} = getEvent(e , 'end') ;\r\n\r\nme.lastPoint = {\r\n    x,\r\n    y\r\n} ;\r\n\r\nupdateInfo('x');\r\n\r\nupdateInfo('y');\r\n\r\ninfo.time = Date.now();\r\n\r\nonAxisEnd('x', info);\r\n\r\nonAxisEnd('y', info);\r\n\r\ndispatch('dragend', info);\r\n\r\ndisabled(e) ;\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329610.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.end"
  },
  "src::browser.event.gesture.drag.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.enabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.gesture.drag.move.drag",
      "src::browser.event.gesture.drag.end",
      "src::browser.event.listener.global.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,on;\n    \n                    let var_init_locked_1609121329677;\n \n                    \n\n                    const var_current_scope_1609121329677 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329677){\n\n            getName = include('src::browser.event.name.single');\non = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121329677 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329677.has(this)){\n\n            var_current_scope_1609121329677.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.drag.move.drag').bind(this);\nconst onEnd = include('src::browser.event.gesture.drag.end').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 启用监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import onMove from .move.drag scoped\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\non(getName('move' , e) ,  me.onMove = onMove) ;\r\n\r\non(getName('end' , e) , me.onEnd = onEnd) ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329677.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.enabled"
  },
  "src::browser.event.gesture.drag.move.drag": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.move.drag(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.prevent",
      "src::browser.event.single",
      "src::browser.event.gesture.drag.info.update",
      "src::browser.event.touches",
      "src::browser.event.gesture.drag.disabled"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prevent,getEvent,getTouchEvents;\n    \n                    let var_init_locked_1609121329702;\n \n                    \n\n                    const var_current_scope_1609121329702 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329702){\n\n            prevent = include('src::browser.event.prevent');\ngetEvent = include('src::browser.event.single');\ngetTouchEvents = include('src::browser.event.touches');\n\n            var_init_locked_1609121329702 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329702.has(this)){\n\n            var_current_scope_1609121329702.set(this , (() => {\n                const updateInfo = include('src::browser.event.gesture.drag.info.update').bind(this);\nconst disabled = include('src::browser.event.gesture.drag.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 拖动事件监听\r\n * \r\n * @import prevent from browser.event.prevent\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import updateInfo from ..info.update scoped\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import disabled from ..disabled scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nprevent(e) ;\r\n\r\nif(getTouchEvents(e ,'move')){\r\n\r\n    disabled(e) ;\r\n\r\n    return ;\r\n}\r\n\r\nlet me = this,\r\nnativeEvent = getEvent(e , 'move'),\r\n{\r\n    pageX:x,\r\n    pageY:y\r\n} = nativeEvent,\r\n{\r\n    lastPoint,\r\n    dispatch\r\n} = me;\r\n\r\nif(lastPoint){\r\n\r\n    me.previousPoint = lastPoint ;\r\n}\r\n\r\nme.lastPoint = {\r\n    x,\r\n    y\r\n} ;\r\n\r\nupdateInfo('x' , true);\r\n\r\nupdateInfo('y' , true);\r\n\r\nlet {\r\n    info\r\n} = me;\r\n\r\ninfo.time = Date.now();\r\n\r\ndispatch('drag' , {\r\n    info,\r\n    nativeEvent\r\n}) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329702.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.move.drag"
  },
  "src::browser.event.gesture.drag.event": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::browser.event.gesture.drag.event()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121329725;\n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 获得启动监听事件名称\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\nreturn getName('start') ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121329725){\n\n            getName = include('src::browser.event.name.single');\n\n            var_init_locked_1609121329725 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.event"
  },
  "src::browser.event.gesture.drag.info.reset": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.info.reset(<string> axis)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(axis){\n\n        \r\n/**\r\n * \r\n * 刷新拖放信息\r\n * \r\n * @param {string} axis 轴名称\r\n * \r\n */\r\n\r\n let {\r\n    info,\r\n    startPoint,\r\n    lastPoint,\r\n    startTime\r\n } = this ;\r\n\r\nlet value = lastPoint[axis],\r\n    startValue = startPoint[axis],\r\n    delta = value - startValue,\r\n    capAxis = axis.toUpperCase();\r\n\r\ninfo.delta[axis] = delta;\r\ninfo.absDelta[axis] = Math.abs(delta);\r\n\r\ninfo.previousTime[axis] = startTime;\r\ninfo.previous[axis] = startValue;\r\ninfo[axis] = value;\r\ninfo.direction[axis] = 0;\r\n\r\ninfo['start' + capAxis] = startPoint[axis];\r\ninfo['previous' + capAxis] = info.previous[axis];\r\ninfo['page' + capAxis] = info[axis];\r\ninfo['delta' + capAxis] = info.delta[axis];\r\ninfo['absDelta' + capAxis] = info.absDelta[axis];\r\ninfo['previousDelta' + capAxis] = 0;\r\ninfo.startTime = startTime;\n\n    }\n    \n                    return function(axis){\n    \n                        \n    \n                        return main.call(this , axis) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.info.reset"
  },
  "src::browser.event.gesture.drag.move.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag.move.start(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.prevent",
      "src::browser.event.single",
      "src::browser.event.name.single",
      "src::browser.event.gesture.drag.enabled",
      "src::browser.scale",
      "src::browser.event.gesture.drag.info.reset",
      "src::math.point.line.distance",
      "src::browser.event.listener.global.remove",
      "src::browser.event.gesture.drag.disabled",
      "config::event.drag"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,prevent,getEvent,getName,scale,getDistance,un,minDistance;\n    \n                    let var_init_locked_1609121329780;\n \n                    \n\n                    const var_current_scope_1609121329780 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329780){\n\n            getTouchEvents = include('src::browser.event.touches');\nprevent = include('src::browser.event.prevent');\ngetEvent = include('src::browser.event.single');\ngetName = include('src::browser.event.name.single');\nscale = include('src::browser.scale');\ngetDistance = include('src::math.point.line.distance');\nun = include('src::browser.event.listener.global.remove');\nminDistance = config('event.drag' , 'minDistance');\n\n            var_init_locked_1609121329780 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329780.has(this)){\n\n            var_current_scope_1609121329780.set(this , (() => {\n                const enabled = include('src::browser.event.gesture.drag.enabled').bind(this);\nconst resetInfo = include('src::browser.event.gesture.drag.info.reset').bind(this);\nconst disabled = include('src::browser.event.gesture.drag.disabled').bind(this);\n\n                function main(e){\n\n        /**\r\n * \r\n * 检查是否启用拖曳事件\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import prevent from browser.event.prevent\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import enabled from ..enabled scoped\r\n * \r\n * @import scale from browser.scale\r\n * \r\n * @import resetInfo from ..info.reset scoped\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @import disabled from ..disabled scoped\r\n * \r\n * @config minDistance from event.drag...minDistance\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n\r\nprevent(e) ;\r\n\r\nif(getTouchEvents(e , 'move')){\r\n\r\n    disabled(e) ;\r\n\r\n    return ;\r\n}\r\n\r\nlet me = this,\r\n{\r\n    pageX:x,\r\n    pageY:y\r\n} = getEvent(e , 'move'),\r\n{\r\n    startPoint,\r\n    info,\r\n    dispatch\r\n} = me,\r\npoint = {\r\n    x,\r\n    y\r\n};\r\n\r\nif (Math.round(getDistance(startPoint , point)) * scale() >= minDistance) {\r\n\r\n    me.previousPoint = point ;\r\n\r\n    me.lastPoint = point ;\r\n\r\n    resetInfo('x');\r\n    \r\n    resetInfo('y');\r\n\r\n    info.time = Date.now();\r\n\r\n    let {\r\n        dragStartNativeEvent\r\n    } = me ;\r\n\r\n    dispatch('dragstart', {\r\n        nativeEvent:dragStartNativeEvent,\r\n        info\r\n    });\r\n\r\n    delete me.dragStartNativeEvent ;\r\n\r\n    un(getName('move' , e) , me.onStart) ;\r\n\r\n    un(getName('end' , e) , me.onEnd) ;\r\n\r\n    enabled(e) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329780.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag.move.start"
  },
  "config::event.drag": {
    "meta": "code.meta.config",
    "signature": "<void> config::event.drag(<string> key)",
    "standard": true,
    "importNames": [
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121329811;\n    \n                    \n\n                    const config = {\r\n    \"minDistance\":50\r\n};\n                function main(key){\n\n                    return get(config , key) ;\n\n                }\n                \n    \n                    return function(key){\n    \n                        \n        if(!var_init_locked_1609121329811){\n\n            get = include('src::object.value.get');\n\n            var_init_locked_1609121329811 = true ;\n        }\n        \n    \n                        return main.call(this , key) ;\n                    } ;\n    \n                })()",
    "folder": "config",
    "name": "event.drag"
  },
  "src::browser.event.gesture.drag": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.drag(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.single",
      "src::browser.event.gesture.drag.disabled",
      "src::browser.event.name.single",
      "src::browser.event.listener.global.add",
      "src::browser.event.gesture.drag.move.start",
      "src::browser.event.gesture.drag.event"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,getName,on,browserEventGestureDragEvent;\n    \n                    let var_init_locked_1609121329853;\n \n                    \n\n                    const var_current_scope_1609121329853 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121329853){\n\n            getEvent = include('src::browser.event.single');\ngetName = include('src::browser.event.name.single');\non = include('src::browser.event.listener.global.add');\nbrowserEventGestureDragEvent = include('src::browser.event.gesture.drag.event');\n\n            var_init_locked_1609121329853 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121329853.has(this)){\n\n            var_current_scope_1609121329853.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.drag.disabled').bind(this);\nconst onStart = include('src::browser.event.gesture.drag.move.start').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 启动事件监听\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import disabled from .drag.disabled scoped\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import onStart from .drag.move.start scoped\r\n * \r\n * @import .drag.event\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\nif(me.info){\r\n\r\n    return ;\r\n}\r\n\r\nlet {\r\n    pageX:x,\r\n    pageY:y,\r\n    pointerType\r\n} = getEvent(e , 'start');\r\n\r\nme.info = {\r\n    previous: {\r\n        x: 0,\r\n        y: 0\r\n    },\r\n    x: 0,\r\n    y: 0,\r\n    delta: {\r\n        x: 0,\r\n        y: 0\r\n    },\r\n    absDelta: {\r\n        x: 0,\r\n        y: 0\r\n    },\r\n    flick: {\r\n        velocity: {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    },\r\n    direction: {\r\n        x: 0,\r\n        y: 0\r\n    },\r\n    time: 0,\r\n    previousTime: {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n} ;\r\n\r\nme.startTime = Date.now() ;\r\n\r\nme.startPoint = {\r\n    x,\r\n    y\r\n} ;\r\n\r\nme.dragStartNativeEvent = e ;\r\n\r\non(getName('move' , e) , me.onStart = onStart) ;\r\n\r\non(getName('end' , e) , me.onEnd = () => disabled(e) , {\r\n    once:true\r\n}) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121329853.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.drag"
  },
  "src::browser.event.gesture.manager.dom": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.manager.dom()",
    "standard": true,
    "importNames": [
      "src::map",
      "src::browser.event.dispatch",
      "src::is.string",
      "src::is.object.simple",
      "src::is.array",
      "src::browser.event.listener.element.add",
      "src::browser.event.listener.element.remove",
      "config::event"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createMap,doDispatch,isString,isObject,isArray,on,off,eventConfig;\n    \n                    let var_init_locked_1609121329873;\n    \n                    let var_class_1609121329873;\n    \n                    let var_once_value_1609121329873;\n\n                    let var_global_main_1609121329873 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121329873){\n\n            createMap = include('src::map');\ndoDispatch = include('src::browser.event.dispatch');\nisString = include('src::is.string');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\non = include('src::browser.event.listener.element.add');\noff = include('src::browser.event.listener.element.remove');\neventConfig = config('event');\n\n            \r\n/**\r\n * \r\n * 传统事件管理\r\n * \r\n * @import createMap from map\r\n * \r\n * @import doDispatch from browser.event.dispatch\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import on from ....listener.element.add\r\n * \r\n * @import off from ....listener.element.remove\r\n * \r\n * @config eventConfig from event\r\n * \r\n * @once\r\n * \r\n */\r\n\r\n function dispatch(event , params){\r\n\r\n    doDispatch(this , `gesture:${event}`  , params) ;\r\n }\r\n\r\n function getEvents(name){\r\n\r\n    let events = include(`browser.event.gesture.${name}.event`)() ;\r\n\r\n    if(isString(events)){\r\n\r\n        return [\r\n            events\r\n        ] ;\r\n    }\r\n\r\n    return events ;\r\n }\r\n\r\n function getName(name){\r\n\r\n    return eventConfig[name] ;\r\n }\r\n\r\n class main {\r\n\r\n    constructor(){\r\n\r\n        let me = this ;\r\n\r\n        me.events = createMap() ;\r\n\r\n    }\r\n\r\n    install(el , name , options = {}){\r\n\r\n        let {\r\n            events\r\n        } = this ;\r\n\r\n        name = getName(name);\r\n\r\n        if(events.has(el , name)){\r\n\r\n            return ;\r\n        }\r\n\r\n        let scope = {\r\n            dispatch:dispatch.bind(el)\r\n        },\r\n        gestureEvents = getEvents(name),\r\n        isAddMainListener = false,\r\n        listeners = [];\r\n\r\n        for(let event of gestureEvents){\r\n\r\n            if(isString(event) && !isAddMainListener){\r\n\r\n                let listener = include(`browser.event.gesture.${name}`).bind(scope) ;\r\n\r\n                listeners.push(listener) ;\r\n\r\n                on(el , event , listener , options) ;\r\n\r\n                isAddMainListener = true ;\r\n            \r\n            }else if(isObject(event)){\r\n\r\n                let {\r\n                    event:name,\r\n                    listener:fn\r\n                } = event,\r\n                listener = fn.bind(scope);\r\n\r\n                listeners.push(listener) ;\r\n\r\n                on(el , name , listener , options) ;\r\n            }\r\n        }\r\n\r\n        events.set(el , name , listeners) ;\r\n    }\r\n\r\n    uninstall(el , name){\r\n\r\n        name = getName(name);\r\n\r\n        let {\r\n            events\r\n        } = this,\r\n        listeners = events.get(el , name);\r\n\r\n        if(isArray(listeners)){\r\n\r\n            let gestureEvents = getEvents(name),\r\n                {\r\n                    length:len\r\n                } = gestureEvents;\r\n\r\n            for(let i = 0 ; i < len ; i ++){\r\n\r\n                let event = gestureEvents[i],\r\n                    listener = listeners[i];\r\n\r\n                if(isString(event)){\r\n\r\n                    off(el , event , listener) ;\r\n\r\n                }else if(isObject(event)){\r\n\r\n                    let {\r\n                        event:name\r\n                    } = event ;\r\n\r\n                    off(el , name , listener) ;\r\n                }\r\n            }\r\n\r\n            events.delete(el , name) ;\r\n        }\r\n\r\n        \r\n    }\r\n }\n\n            var_class_1609121329873 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121329873 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::browser.event.gesture.manager.dom' ;\n                }\n\n            } ;\n\n            main = var_class_1609121329873 ;\n        \nvar_global_main_1609121329873 = main;\n\n            var_init_locked_1609121329873 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121329873){\n\n            return var_once_value_1609121329873 ;\n\n        }\n        return var_once_value_1609121329873 = new var_global_main_1609121329873() ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.manager.dom"
  },
  "src::browser.event.listener.element.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.listener.element.add(<HTMLElement> el , <string> event , <function> fn , <object> config)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let add;\n    \n                    let var_init_locked_1609121329897;\n    \n                    \n\n                    function main(el , event , fn , config){\n\n        \r\n/**\r\n * \r\n * 监听元素事件\r\n * \r\n * @import add from ..add\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} event 目标监听事件\r\n * \r\n * @param {function} fn 目标监听回调\r\n * \r\n * @param {object} [config] 配置\r\n * \r\n */\r\n\r\n add(el , event , fn , config) ;\n\n    }\n    \n                    return function(el , event , fn , config){\n    \n                        \n        if(!var_init_locked_1609121329897){\n\n            add = include('src::browser.event.listener.add');\n\n            var_init_locked_1609121329897 = true ;\n        }\n        \n    \n                        return main.call(this , el , event , fn , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.element.add"
  },
  "src::browser.event.listener.element.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.listener.element.remove(<HTMLElement> el , <string> event , <function> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove;\n    \n                    let var_init_locked_1609121329915;\n    \n                    \n\n                    function main(el , event , fn , scope){\n\n        \r\n/**\r\n * \r\n * 去除监听元素事件\r\n * \r\n * @import remove from ..remove\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} event 目标监听事件\r\n * \r\n * @param {function} fn 目标监听回调\r\n * \r\n * @param {mixed} scope 作用域\r\n * \r\n * \r\n */\r\n\r\nremove(el , event , fn , scope) ;\n\n    }\n    \n                    return function(el , event , fn , scope){\n    \n                        \n        if(!var_init_locked_1609121329915){\n\n            remove = include('src::browser.event.listener.remove');\n\n            var_init_locked_1609121329915 = true ;\n        }\n        \n    \n                        return main.call(this , el , event , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.listener.element.remove"
  },
  "config::event": {
    "meta": "code.meta.config",
    "signature": "<void> config::event(<string> key)",
    "standard": true,
    "importNames": [
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121329934;\n    \n                    \n\n                    const config = {\r\n    \"tap\":\"tap\",\r\n    \"dragstart\":\"drag\",\r\n    \"drag\":\"drag\",\r\n    \"dragend\":\"drag\",\r\n    \"singletap\":\"tap.double\",\r\n    \"doubletap\":\"tap.double\",\r\n    \"longpress\":\"longpress\",\r\n    \"longpresscancel\":\"longpress\",\r\n    \"pinchstart\":\"pinch\",\r\n    \"pinch\":\"pinch\",\r\n    \"pinchend\":\"pinch\"\r\n};\n                function main(key){\n\n                    return get(config , key) ;\n\n                }\n                \n    \n                    return function(key){\n    \n                        \n        if(!var_init_locked_1609121329934){\n\n            get = include('src::object.value.get');\n\n            var_init_locked_1609121329934 = true ;\n        }\n        \n    \n                        return main.call(this , key) ;\n                    } ;\n    \n                })()",
    "folder": "config",
    "name": "event"
  },
  "src::browser.event.gesture.manager.jsx": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.event.gesture.manager.jsx(<object> config)",
    "standard": true,
    "importNames": [
      "src::string.capitalize"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let capitalize;\n    \n                    let var_init_locked_1609121329965;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 基于 JSX 的事件管理\r\n * \r\n * @import capitalize from string.capitalize\r\n * \r\n * @param {object} config 未经识别的事件集合\r\n * \r\n * @return {object} 已识别事件属性集合\r\n * \r\n */\r\n\r\n const eventSuffixRe = /(?:start|end)$/,\r\n eventPropertyRe = /^on/,\r\n {\r\n    keys\r\n } = Object;\r\n\r\n function getEventImplName(event){\r\n\r\n    return event.replace(eventSuffixRe , '') ;\r\n }\r\n\r\n function isGestureImplName(event){\r\n\r\n    try{\r\n\r\n        include(`browser.event.gesture.${event}.event`) ;\r\n\r\n        return true ;\r\n\r\n    }catch(err){\r\n\r\n    }\r\n\r\n    return false ;\r\n }\r\n\r\n function getGestureImplStartEventName(event){\r\n\r\n    switch(include(`browser.event.gesture.${event}.event`)()){\r\n\r\n        case 'pointerdown':\r\n\r\n            return 'onPointerDown' ;\r\n\r\n        case 'mousedown':\r\n\r\n            return 'onMouseDown' ;\r\n\r\n        case 'touchstart':\r\n\r\n            return 'onTouchStart' ;\r\n   }\r\n\r\n }\r\n\r\n function getGestureImplStartEventListener(event , listeners){\r\n\r\n    return include(`browser.event.gesture.${event}`).bind({\r\n        dispatch(event , params){\r\n\r\n            if(listeners.hasOwnProperty(event)){\r\n\r\n                listeners[event](params) ;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction addListener(listeners , event , fn){\r\n\r\n    if(listeners.hasOwnProperty(event)){\r\n\r\n        listeners[event] = (...args) =>{\r\n\r\n            listeners[event](...args) ;\r\n\r\n            fn(...args) ;\r\n        } ;\r\n    \r\n    }else{\r\n\r\n        listeners[event] = fn ;\r\n    }\r\n}\r\n\r\nfunction getEventProperties(listeners){\r\n\r\n    let events = keys(listeners),\r\n        properties = {};\r\n\r\n    for(let event of events){\r\n\r\n        if(eventPropertyRe.test(event)){\r\n\r\n            properties[event] = listeners[event];\r\n        }\r\n    }\r\n\r\n    return properties ;\r\n}\r\n\r\n function main(config){\r\n\r\n    let events = keys(config),\r\n        listeners = {},\r\n        gestureEvents = [];\r\n\r\n    for(let event of events){\r\n\r\n        let eventImpl = getEventImplName(event) ;\r\n\r\n        if(isGestureImplName(eventImpl) && !gestureEvents.includes(eventImpl)){\r\n\r\n            gestureEvents.push(eventImpl) ;\r\n\r\n            addListener(listeners , getGestureImplStartEventName(eventImpl) , getGestureImplStartEventListener(eventImpl , listeners)) ;\r\n        \r\n        }\r\n\r\n        addListener(listeners , event , config[event]) ;\r\n    }\r\n\r\n    return getEventProperties(listeners) ;\r\n }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121329965){\n\n            capitalize = include('src::string.capitalize');\n\n            var_init_locked_1609121329965 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.manager.jsx"
  },
  "src::string.capitalize": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::string.capitalize(<string> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 实现首字母大写\r\n * \r\n * @param {string} data 字符串\r\n * \r\n * @return {string} 首字母大写的字符串 \r\n * \r\n */\r\n\r\n return `${data.charAt(0).toUpperCase()}${data.substr(1)}` ;\r\n\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "string.capitalize"
  },
  "src::browser.event.gesture.pinch.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch.disabled()",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.global.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let un;\n    \n                    let var_init_locked_1609121330013;\n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 禁用事件\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    onStart,\r\n    onMove,\r\n    onEnd\r\n} = me;\r\n\r\nun('touchmove' , onStart) ;\r\n\r\nun('touchmove' , onMove) ;\r\n\r\nun('touchend' , onEnd) ;\r\n\r\ndelete me.onStart ;\r\n\r\ndelete me.onMove ;\r\n\r\ndelete me.onEnd ;\r\n\r\ndelete me.startDistance ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330013){\n\n            un = include('src::browser.event.listener.global.remove');\n\n            var_init_locked_1609121330013 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.disabled"
  },
  "src::browser.event.gesture.pinch.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch.enabled()",
    "standard": true,
    "importNames": [
      "src::browser.event.listener.global.add",
      "src::browser.event.gesture.pinch.move.start",
      "src::browser.event.gesture.pinch.end"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let on;\n    \n                    let var_init_locked_1609121330039;\n \n                    \n\n                    const var_current_scope_1609121330039 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330039){\n\n            on = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121330039 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330039.has(this)){\n\n            var_current_scope_1609121330039.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.pinch.move.start').bind(this);\nconst onEnd = include('src::browser.event.gesture.pinch.end').bind(this);\n\n                function main(){\n\n        /**\r\n * \r\n * 启用事件\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import onMove from .move.start scoped\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\non('touchmove' , me.onStart = onMove) ;\r\n\r\non('touchend' , me.onEnd = onEnd) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330039.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.enabled"
  },
  "src::math.point.line.center": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.point.line.center(<object> point1 , <object> point2)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(point1 , point2){\n\n        /**\r\n * \r\n * 计算线段的中心点坐标\r\n * \r\n * @param {object} point1 第一个点的位置\r\n * \r\n * @param {object} point2 第二个点的位置\r\n * \r\n * @return {object} 中心点坐标\r\n * \r\n */\r\n return {\r\n    x:(point1.x + point2.x) / 2,\r\n    y:(point1.y + point2.y) / 2\r\n } ;\n\n    }\n    \n                    return function(point1 , point2){\n    \n                        \n    \n                        return main.call(this , point1 , point2) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.point.line.center"
  },
  "src::browser.event.gesture.pinch.move.pinch": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch.move.pinch(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.stop",
      "src::math.point.line.distance",
      "src::math.point.line.center",
      "src::browser.event.listener.global.remove",
      "src::browser.event.gesture.pinch.move.pinch"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,stop,getDistance,getCenterXY,un;\n    \n                    let var_init_locked_1609121330094;\n \n                    \n\n                    const var_current_scope_1609121330094 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330094){\n\n            getTouchEvents = include('src::browser.event.touches');\nstop = include('src::browser.event.stop');\ngetDistance = include('src::math.point.line.distance');\ngetCenterXY = include('src::math.point.line.center');\nun = include('src::browser.event.listener.global.remove');\n\n            var_init_locked_1609121330094 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330094.has(this)){\n\n            var_current_scope_1609121330094.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.pinch.move.pinch').bind(this);\n\n                function main(e){\n\n        /**\r\n * \r\n * 缩放进行事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import stop from browser.event.stop\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getCenterXY from math.point.line.center\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @import onMove from .pinch scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nstop(e) ;\r\n\r\nlet touches = getTouchEvents(e , 'move'),\r\n    [\r\n        firstTouch,\r\n        lastTouch\r\n    ] = touches,\r\n    startXY = {\r\n        x:firstTouch.pageX,\r\n        y:firstTouch.pageY\r\n    },\r\n    endXY = {\r\n        x:lastTouch.pageX,\r\n        y:lastTouch.pageY\r\n    },\r\n    distance = getDistance(startXY , endXY),\r\n    {\r\n        startDistance,\r\n        dispatch\r\n    } = this;\r\n\r\ndispatch('pinch', {\r\n    distance,\r\n    point:getCenterXY(startXY , endXY),\r\n    scale:distance / startDistance\r\n});\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330094.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.move.pinch"
  },
  "src::browser.event.gesture.pinch.move.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch.move.start(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.stop",
      "src::math.point.line.distance",
      "src::math.point.line.center",
      "src::browser.event.listener.global.remove",
      "src::browser.event.listener.global.add",
      "src::browser.event.gesture.pinch.move.pinch"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,stop,getDistance,getCenterXY,un,on;\n    \n                    let var_init_locked_1609121330056;\n \n                    \n\n                    const var_current_scope_1609121330056 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330056){\n\n            getTouchEvents = include('src::browser.event.touches');\nstop = include('src::browser.event.stop');\ngetDistance = include('src::math.point.line.distance');\ngetCenterXY = include('src::math.point.line.center');\nun = include('src::browser.event.listener.global.remove');\non = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121330056 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330056.has(this)){\n\n            var_current_scope_1609121330056.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.pinch.move.pinch').bind(this);\n\n                function main(e){\n\n        /**\r\n * \r\n * 缩放开始事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import stop from browser.event.stop\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getCenterXY from math.point.line.center\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import onMove from .pinch scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nstop(e) ;\r\n\r\nlet touches = getTouchEvents(e , 'move'),\r\n    [\r\n        firstTouch,\r\n        lastTouch\r\n    ] = touches,\r\n    firstXY = {\r\n        x:firstTouch.pageX,\r\n        y:firstTouch.pageY\r\n    },\r\n    lastXY = {\r\n        x:lastTouch.pageX,\r\n        y:lastTouch.pageY\r\n    },\r\n    distance = getDistance(firstXY , lastXY),\r\n    me = this;\r\n\r\nif(distance === 0){\r\n\r\n    return ;\r\n}\r\n\r\nlet {\r\n    el,\r\n    dispatch\r\n} = me ;\r\n\r\nme.startDistance = distance ;\r\n\r\ndispatch('pinchstart', {\r\n    distance,\r\n    point:getCenterXY(firstXY , lastXY)\r\n});\r\n\r\nun('touchmove' , me.onStart) ;\r\n\r\non('touchmove' , me.onMove = onMove) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330056.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.move.start"
  },
  "src::browser.event.gesture.pinch.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch.end(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.stop",
      "src::browser.event.gesture.pinch.disabled"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let stop;\n    \n                    let var_init_locked_1609121330118;\n \n                    \n\n                    const var_current_scope_1609121330118 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330118){\n\n            stop = include('src::browser.event.stop');\n\n            var_init_locked_1609121330118 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330118.has(this)){\n\n            var_current_scope_1609121330118.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.pinch.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 结束事件监听\r\n * \r\n * @import stop from browser.event.stop\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nstop(e) ;\r\n\r\nlet me = this,\r\n{\r\n    dispatch\r\n} = me;\r\n\r\ndisabled() ;\r\n\r\ndispatch('pinchend') ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330118.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.end"
  },
  "src::browser.event.gesture.pinch.event": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::browser.event.gesture.pinch.event()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 获得启动监听事件名称\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\nreturn 'touchstart' ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch.event"
  },
  "src::browser.event.gesture.pinch": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.pinch(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.listener.global.add",
      "src::browser.event.gesture.pinch.enabled",
      "src::browser.event.gesture.pinch.disabled",
      "src::browser.event.gesture.pinch.event"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,on,browserEventGesturePinchEvent;\n    \n                    let var_init_locked_1609121330158;\n \n                    \n\n                    const var_current_scope_1609121330158 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330158){\n\n            getTouchEvents = include('src::browser.event.touches');\non = include('src::browser.event.listener.global.add');\nbrowserEventGesturePinchEvent = include('src::browser.event.gesture.pinch.event');\n\n            var_init_locked_1609121330158 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330158.has(this)){\n\n            var_current_scope_1609121330158.set(this , (() => {\n                const enabled = include('src::browser.event.gesture.pinch.enabled').bind(this);\nconst disabled = include('src::browser.event.gesture.pinch.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 开始事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @import enabled from .pinch.enabled scoped\r\n * \r\n * @import disabled from .pinch.disabled scoped\r\n * \r\n * @import .pinch.event\r\n *\r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\nif(me.onStart){\r\n\r\n    disabled() ;\r\n}\r\n\r\nlet touches = getTouchEvents(e , 'start') ;\r\n\r\nif(touches){\r\n\r\n    enabled() ;\r\n}\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330158.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.pinch"
  },
  "src::browser.event.gesture.react": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.event.gesture.react(<object> config)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.manager.jsx"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let jsx;\n    \n                    let var_init_locked_1609121330178;\n    \n                    \n\n                    function main(config){\n\n        \r\n/**\r\n * \r\n * 基于 React 的手势事件实现\r\n * \r\n * @import jsx from browser.event.gesture.manager.jsx\r\n * \r\n * @param {object} config 未经识别的事件集合\r\n * \r\n * @return {object} 已识别事件属性集合\r\n * \r\n */\r\n\r\n return jsx(config) ;\n\n    }\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1609121330178){\n\n            jsx = include('src::browser.event.gesture.manager.jsx');\n\n            var_init_locked_1609121330178 = true ;\n        }\n        \n    \n                        return main.call(this , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.react"
  },
  "src::browser.event.gesture.swipe.methods.cancel": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.cancel(<HTMLElement> el , <Event> event , <Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.swipe.methods.disabled",
      "src::browser.event.dispatch"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let disabled,dispatch;\n    \n                    let var_init_locked_1609121330195;\n    \n                    \n\n                    function main(el , event , e){\n\n        /**\r\n * \r\n * 取消滑动事件\r\n * \r\n * @import disabled from browser.event.gesture.swipe.methods.disabled\r\n * \r\n * @import dispatch from browser.event.dispatch\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {Event} event 当前可用事件对象\r\n * \r\n * @param {Event} e 原始事件对象\r\n * \r\n */\r\n\r\ndisabled(el) ;\r\n\r\ndispatch(el , 'touch:swipecancel' , {\r\n    browserEvent:e,\r\n    event\r\n}) ;\n\n    }\n    \n                    return function(el , event , e){\n    \n                        \n        if(!var_init_locked_1609121330195){\n\n            disabled = include('src::browser.event.gesture.swipe.methods.disabled');\ndispatch = include('src::browser.event.dispatch');\n\n            var_init_locked_1609121330195 = true ;\n        }\n        \n    \n                        return main.call(this , el , event , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.cancel"
  },
  "src::object.data.name.signature": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::object.data.name.signature()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121330294;\n\n                    function main(){\n\n        /**\r\n * \r\n * 用于生成当前生命周期唯一签名\r\n * \r\n * @once\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\nreturn `zbee-key-${Date.now()}` ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121330294){\n\n            return var_once_value_1609121330294 ;\n\n        }\n        return var_once_value_1609121330294 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.name.signature"
  },
  "src::object.data.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::object.data.name(<string> name)",
    "standard": true,
    "importNames": [
      "src::object.data.name.signature"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let signature;\n    \n                    let var_init_locked_1609121330278;\n    \n                    \n\n                    function main(name){\n\n        /**\r\n * \r\n * 获取可以设置的属性名称\r\n * \r\n * @import signature from object.data.name.signature\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @return {string} 可用的属性名称\r\n * \r\n */\r\n\r\nreturn `${signature()}-${name}` ;\n\n    }\n    \n                    return function(name){\n    \n                        \n        if(!var_init_locked_1609121330278){\n\n            signature = include('src::object.data.name.signature');\n\n            var_init_locked_1609121330278 = true ;\n        }\n        \n    \n                        return main.call(this , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.name"
  },
  "src::object.data.get": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::object.data.get(<mixed> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.data.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121330259;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 获取元素的具体属性值\r\n * \r\n * @import getName from object.data.name\r\n * \r\n * @param {mixed} target 作用对象\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @return {mixed} 对于属性名称的值 \r\n * \r\n */\r\n\r\nreturn target[getName(name)] ;\r\n\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121330259){\n\n            getName = include('src::object.data.name');\n\n            var_init_locked_1609121330259 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.get"
  },
  "src::object.data.set": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::object.data.set(<mixed> target , <string> name , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::object.data.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121330311;\n    \n                    \n\n                    function main(target , name , value){\n\n        \r\n/**\r\n * \r\n * 设置基于元素的具名属性值\r\n * \r\n * @import getName from object.data.name\r\n * \r\n * @param {mixed} target 作用对象\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {mixed} value 属性值\r\n * \r\n * @return {mixed} 设置后的属性值\r\n * \r\n */\r\n\r\ntarget[getName(name)] = value ;\n\n    }\n    \n                    return function(target , name , value){\n    \n                        \n        if(!var_init_locked_1609121330311){\n\n            getName = include('src::object.data.name');\n\n            var_init_locked_1609121330311 = true ;\n        }\n        \n    \n                        return main.call(this , target , name , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.set"
  },
  "src::browser.event.gesture.swipe.methods.onMove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.onMove(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.pointer",
      "src::browser.event.gesture.swipe.methods.cancel",
      "src::object.data.get",
      "src::object.data.set",
      "src::browser.event.dispatch",
      "src::browser.html.element.removeWindowEventListener",
      "src::browser.event.gesture.swipe.methods.onMove",
      "src::browser.event.pointer.move",
      "src::browser.support.touch",
      "config::gesture.swipe"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,cancel,get,set,dispatch,removeEventListener,onMove,getMoveEventName,supportTouch,maxDuration,moveDistance,minDistance,maxOffset;\n    \n                    let var_init_locked_1609121330232;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 移动事件监听\r\n * \r\n * @import getEvent from browser.event.pointer\r\n * \r\n * @import cancel from browser.event.gesture.swipe.methods.cancel\r\n * \r\n * @import get from object.data.get\r\n * \r\n * @import set from object.data.set\r\n * \r\n * @import dispatch from browser.event.dispatch\r\n * \r\n * @import removeEventListener from browser.html.element.removeWindowEventListener\r\n * \r\n * @import onMove from browser.event.gesture.swipe.methods.onMove\r\n * \r\n * @import getMoveEventName from browser.event.pointer.move\r\n * \r\n * @import supportTouch from browser.support.touch\r\n * \r\n * @config maxDuration from gesture.swipe...maxDuration\r\n * \r\n * @config moveDistance from gesture.swipe...moveDistance\r\n * \r\n * @config minDistance from gesture.swipe...minDistance\r\n * \r\n * @config maxOffset from gesture.swipe...maxOffset\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n * \r\n */\r\n\r\ne.preventDefault() ;\r\n\r\nlet el = this,\r\n    event = getEvent(e),\r\n    x = event.pageX,\r\n    y = event.pageY,\r\n    deltaX = x - get(el , 'swipe:startX'),\r\n    deltaY = y - get(el , 'swipe:startY'),\r\n    absDeltaX = Math.abs(deltaX),\r\n    absDeltaY = Math.abs(deltaY),\r\n    duration = Date.now() - get(el , 'swipe:startTime'),\r\n    isHorizontal = get(el , 'swipe:isHorizontal'),\r\n    isVertical = get(el , 'swipe:isVertical'),\r\n    direction,\r\n    distance;\r\n\r\nif ((supportTouch() && (absDeltaX === 0 && absDeltaY === 0)) || (duration > maxDuration)) {\r\n\r\n    return cancel(el , event , e) ;\r\n\r\n}\r\n\r\nif (isHorizontal && absDeltaY > maxOffset) {\r\n\r\n    set(el , 'swipe:isHorizontal' , isHorizontal = false) ;\r\n}\r\n\r\nif (isVertical && absDeltaX > maxOffset) {\r\n\r\n    set(el , 'swipe:isVertical' , isVertical = false) ;\r\n}\r\n\r\nif(!isHorizontal && !isVertical){\r\n\r\n    return cancel(el , event , e) ;\r\n}\r\n\r\nif (!isVertical || !isHorizontal){\r\n\r\n    if(isHorizontal && absDeltaX < minDistance) {\r\n\r\n        direction = (deltaX < 0) ? 'left' : 'right';\r\n\r\n        distance = absDeltaX;\r\n\r\n    }else if(isVertical && absDeltaY < minDistance) {\r\n\r\n        direction = (deltaY < 0) ? 'up' : 'down';\r\n        \r\n        distance = absDeltaY;\r\n    }\r\n}\r\n\r\nif (direction) {\r\n    \r\n    removeEventListener(el , getMoveEventName() , onMove) ;\r\n\r\n    dispatch(el , 'touch:swipestart' , {\r\n        browserEvent:e,\r\n        event,\r\n        direction,\r\n        distance,\r\n        duration\r\n    });\r\n}\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330232){\n\n            getEvent = include('src::browser.event.pointer');\ncancel = include('src::browser.event.gesture.swipe.methods.cancel');\nget = include('src::object.data.get');\nset = include('src::object.data.set');\ndispatch = include('src::browser.event.dispatch');\nremoveEventListener = include('src::browser.html.element.removeWindowEventListener');\nonMove = include('src::browser.event.gesture.swipe.methods.onMove');\ngetMoveEventName = include('src::browser.event.pointer.move');\nsupportTouch = include('src::browser.support.touch');\nmaxDuration = config('gesture.swipe' , 'maxDuration');\nmoveDistance = config('gesture.swipe' , 'moveDistance');\nminDistance = config('gesture.swipe' , 'minDistance');\nmaxOffset = config('gesture.swipe' , 'maxOffset');\n\n            var_init_locked_1609121330232 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.onMove"
  },
  "src::browser.event.gesture.swipe.methods.onEnd": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.onEnd(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.swipe.methods.cancel",
      "src::browser.event.gesture.swipe.methods.disabled",
      "src::browser.event.dispatch",
      "src::browser.event.pointer",
      "src::object.data.get",
      "src::object.data.set",
      "config::gesture.swipe"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let cancel,disabled,dispatch,getEvent,get,set,maxDuration,moveDistance,minDistance,maxOffset;\n    \n                    let var_init_locked_1609121330341;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 结束事件监听\r\n * \r\n * @import cancel from browser.event.gesture.swipe.methods.cancel\r\n * \r\n * @import disabled from browser.event.gesture.swipe.methods.disabled\r\n * \r\n * @import dispatch from browser.event.dispatch\r\n * \r\n * @import getEvent from browser.event.pointer\r\n * \r\n * @import get from object.data.get\r\n * \r\n * @import set from object.data.set\r\n * \r\n * @config maxDuration from gesture.swipe...maxDuration\r\n * \r\n * @config moveDistance from gesture.swipe...moveDistance\r\n * \r\n * @config minDistance from gesture.swipe...minDistance\r\n * \r\n * @config maxOffset from gesture.swipe...maxOffset\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\ne.preventDefault() ;\r\n\r\nlet el = this,\r\n    event = getEvent(e),\r\n    x = event.pageX,\r\n    y = event.pageY,\r\n    deltaX = x - get(el , 'swipe:startX'),\r\n    deltaY = y - get(el , 'swipe:startY'),\r\n    absDeltaX = Math.abs(deltaX),\r\n    absDeltaY = Math.abs(deltaY),\r\n    duration = Date.now() - get(el , 'swipe:startTime'),\r\n    isHorizontal = get(el , 'swipe:isHorizontal'),\r\n    isVertical = get(el , 'swipe:isVertical'),\r\n    direction,\r\n    distance;\r\n\r\n\r\nif(isVertical && absDeltaY < minDistance){\r\n\r\n    set(el , 'swipe:isVertical' , isVertical = false) ;\r\n}\r\n\r\nif(isHorizontal && absDeltaX < minDistance){\r\n\r\n    set(el , 'swipe:isHorizontal' , isHorizontal = false) ;\r\n}\r\n\r\nif(isHorizontal){\r\n\r\n    direction = (deltaX < 0) ? 'left' : 'right';\r\n\r\n    distance = absDeltaX;\r\n\r\n}else if(isVertical){\r\n\r\n    direction = (deltaY < 0) ? 'up' : 'down';\r\n    \r\n    distance = absDeltaY;\r\n}\r\n\r\nif(!isHorizontal && !isVertical){\r\n\r\n    return cancel(el , event , e) ;\r\n}\r\n\r\ndisabled(el) ;\r\n\r\ndispatch(el , 'touch:swipe' , {\r\n    browserEvent:e,\r\n    event,\r\n    direction,\r\n    distance,\r\n    duration\r\n});\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330341){\n\n            cancel = include('src::browser.event.gesture.swipe.methods.cancel');\ndisabled = include('src::browser.event.gesture.swipe.methods.disabled');\ndispatch = include('src::browser.event.dispatch');\ngetEvent = include('src::browser.event.pointer');\nget = include('src::object.data.get');\nset = include('src::object.data.set');\nmaxDuration = config('gesture.swipe' , 'maxDuration');\nmoveDistance = config('gesture.swipe' , 'moveDistance');\nminDistance = config('gesture.swipe' , 'minDistance');\nmaxOffset = config('gesture.swipe' , 'maxOffset');\n\n            var_init_locked_1609121330341 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.onEnd"
  },
  "src::object.data.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.data.remove(<mixed> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.data.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121330364;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 移除元素指定的属性值\r\n * \r\n * @import getName from object.data.name\r\n * \r\n * @param {mixed} target 作用对象\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n */\r\n\r\ndelete target[getName(name)] ;\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121330364){\n\n            getName = include('src::object.data.name');\n\n            var_init_locked_1609121330364 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.remove"
  },
  "src::browser.event.gesture.swipe.methods.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.disabled(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.removeWindowEventListener",
      "src::browser.event.gesture.swipe.methods.onMove",
      "src::browser.event.gesture.swipe.methods.onEnd",
      "src::browser.event.pointer.move",
      "src::browser.event.pointer.up",
      "src::object.data.get",
      "src::object.data.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let removeEventListener,onMove,onEnd,getMoveEventName,getUpEventName,get,remove;\n    \n                    let var_init_locked_1609121330211;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 禁用全局监听\r\n * \r\n * @import removeEventListener from browser.html.element.removeWindowEventListener\r\n * \r\n * @import onMove from browser.event.gesture.swipe.methods.onMove\r\n * \r\n * @import onEnd from browser.event.gesture.swipe.methods.onEnd\r\n * \r\n * @import getMoveEventName from browser.event.pointer.move\r\n * \r\n * @import getUpEventName from browser.event.pointer.up\r\n * \r\n * @import get from object.data.get\r\n * \r\n * @import remove from object.data.remove\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * \r\n */\r\n\r\nremoveEventListener(el , getMoveEventName() , onMove) ;\r\n\r\nremoveEventListener(el , getUpEventName() , onEnd) ;\r\n\r\nremove(el , 'swipe:startTime') ;\r\n\r\nremove(el , 'swipe:isHorizontal') ;\r\n\r\nremove(el , 'swipe:isVertical') ;\r\n\r\nremove(el , 'swipe:startX') ;\r\n\r\nremove(el , 'swipe:startY') ;\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330211){\n\n            removeEventListener = include('src::browser.html.element.removeWindowEventListener');\nonMove = include('src::browser.event.gesture.swipe.methods.onMove');\nonEnd = include('src::browser.event.gesture.swipe.methods.onEnd');\ngetMoveEventName = include('src::browser.event.pointer.move');\ngetUpEventName = include('src::browser.event.pointer.up');\nget = include('src::object.data.get');\nremove = include('src::object.data.remove');\n\n            var_init_locked_1609121330211 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.disabled"
  },
  "src::browser.event.gesture.swipe.methods.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.enabled(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.addWindowEventListener",
      "src::browser.event.gesture.swipe.methods.onMove",
      "src::browser.event.gesture.swipe.methods.onEnd",
      "src::browser.event.pointer.move",
      "src::browser.event.pointer.up"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let addEventListener,onMove,onEnd,getMoveEventName,getUpEventName;\n    \n                    let var_init_locked_1609121330387;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 启动全局监听\r\n * \r\n * @import addEventListener from browser.html.element.addWindowEventListener\r\n * \r\n * @import onMove from browser.event.gesture.swipe.methods.onMove\r\n * \r\n * @import onEnd from browser.event.gesture.swipe.methods.onEnd\r\n * \r\n * @import getMoveEventName from browser.event.pointer.move\r\n * \r\n * @import getUpEventName from browser.event.pointer.up\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * \r\n */\r\n\r\naddEventListener(el , getMoveEventName() , onMove) ;\r\n\r\naddEventListener(el , getUpEventName() , onEnd) ;\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330387){\n\n            addEventListener = include('src::browser.html.element.addWindowEventListener');\nonMove = include('src::browser.event.gesture.swipe.methods.onMove');\nonEnd = include('src::browser.event.gesture.swipe.methods.onEnd');\ngetMoveEventName = include('src::browser.event.pointer.move');\ngetUpEventName = include('src::browser.event.pointer.up');\n\n            var_init_locked_1609121330387 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.enabled"
  },
  "src::browser.event.gesture.swipe.methods.install": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.install(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.event.gesture.swipe.methods.onStart",
      "src::browser.event.pointer.down"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let onStart,getEventName;\n    \n                    let var_init_locked_1609121330409;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 安装事件\r\n * \r\n * @import onStart from browser.event.gesture.swipe.methods.onStart\r\n * \r\n * @import getEventName from browser.event.pointer.down\r\n * \r\n * @param {HTMLElement} el 页面元素\r\n * \r\n * \r\n */\r\n\r\nel.addEventListener(getEventName() , onStart) ;\r\n\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330409){\n\n            onStart = include('src::browser.event.gesture.swipe.methods.onStart');\ngetEventName = include('src::browser.event.pointer.down');\n\n            var_init_locked_1609121330409 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.install"
  },
  "src::browser.event.gesture.swipe.methods.onStart": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.onStart(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.pointer",
      "src::browser.event.gesture.swipe.methods.enabled",
      "src::object.data.set"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,enabled,set;\n    \n                    let var_init_locked_1609121330428;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 启动事件监听\r\n * \r\n * @import getEvent from browser.event.pointer\r\n * \r\n * @import enabled from browser.event.gesture.swipe.methods.enabled\r\n * \r\n * @import set from object.data.set\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\ne.preventDefault() ;\r\n\r\nlet event = getEvent(e , true);\r\n\r\nif(!event){\r\n\r\n    return ;\r\n}\r\n\r\nlet el = this ;\r\n\r\nset(el , 'swipe:startTime' , Date.now()) ;\r\n\r\nset(el , 'swipe:isHorizontal' , true) ;\r\n\r\nset(el , 'swipe:isVertical' , true) ;\r\n\r\nset(el , 'swipe:startX' , event.pageX) ;\r\n\r\nset(el , 'swipe:startY' , event.pageY) ;\r\n\r\nenabled(el) ;\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330428){\n\n            getEvent = include('src::browser.event.pointer');\nenabled = include('src::browser.event.gesture.swipe.methods.enabled');\nset = include('src::object.data.set');\n\n            var_init_locked_1609121330428 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.onStart"
  },
  "src::browser.event.gesture.swipe.methods.uninstall": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.methods.uninstall(<HTMLElement> el)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 卸载事件\r\n * \r\n * \r\n * @param {HTMLElement} el 页面元素\r\n * \r\n * \r\n */\r\n\r\n // 代码实现\r\n\n\n    }\n    \n                    return function(el){\n    \n                        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.methods.uninstall"
  },
  "src::browser.event.gesture.swipe.properties.handleEvents": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.swipe.properties.handleEvents()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_once_value_1609121330463;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 支持事件列表\r\n * \r\n * @once\r\n * \r\n */\r\n\r\nreturn [\r\n    'touch:swipestart',\r\n    'touch:swipe',\r\n    'touch:swipecancel'\r\n] ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        \n        if(var_once_value_1609121330463){\n\n            return var_once_value_1609121330463 ;\n\n        }\n        return var_once_value_1609121330463 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.swipe.properties.handleEvents"
  },
  "src::browser.event.gesture.tap.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.disabled()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.listener.global.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,un;\n    \n                    let var_init_locked_1609121330485;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 取消监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    onMove,\r\n    onEnd,\r\n    timer\r\n } = me;\r\n\r\n if(timer){\r\n\r\n   clearTimeout(timer) ;\r\n }\r\n\r\n un(getName('move') ,  onMove) ;\r\n\r\n un(getName('end') ,  onEnd) ;\r\n\r\n delete me.timer ;\r\n\r\n delete me.onMove ;\r\n\r\n delete me.onEnd ;\r\n\r\n \n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330485){\n\n            getName = include('src::browser.event.name.single');\nun = include('src::browser.event.listener.global.remove');\n\n            var_init_locked_1609121330485 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.disabled"
  },
  "src::browser.event.gesture.tap.double.disabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.double.disabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.listener.global.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,un;\n    \n                    let var_init_locked_1609121330507;\n    \n                    \n\n                    function main(e){\n\n        \r\n/**\r\n * \r\n * 取消监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import un from browser.event.listener.global.remove\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   onMove,\r\n   onEnd,\r\n   timer\r\n} = me;\r\n\r\nif(timer){\r\n\r\n  clearTimeout(timer) ;\r\n\r\n}\r\n\r\nun(getName('move' , e) ,  onMove) ;\r\n\r\nun(getName('end' , e) ,  onEnd) ;\r\n\r\ndelete me.timer ;\r\n\r\ndelete me.onMove ;\r\n\r\ndelete me.onEnd ;\r\n\r\ndelete me.startPoint ;\r\n\r\ndelete me.startTime ;\r\n\r\ndelete me.lastTarget ;\r\n\r\ndelete me.lastTapTime ;\r\n\r\n\n\n    }\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330507){\n\n            getName = include('src::browser.event.name.single');\nun = include('src::browser.event.listener.global.remove');\n\n            var_init_locked_1609121330507 = true ;\n        }\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double.disabled"
  },
  "src::browser.event.gesture.tap.double.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.double.enabled(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.gesture.tap.double.move",
      "src::browser.event.gesture.tap.double.end",
      "src::browser.event.listener.global.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,on;\n    \n                    let var_init_locked_1609121330526;\n \n                    \n\n                    const var_current_scope_1609121330526 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330526){\n\n            getName = include('src::browser.event.name.single');\non = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121330526 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330526.has(this)){\n\n            var_current_scope_1609121330526.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.tap.double.move').bind(this);\nconst onEnd = include('src::browser.event.gesture.tap.double.end').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import onMove from .move scoped\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n * @param {Event} e\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\non(getName('move' , e) ,  me.onMove = onMove) ;\r\n\r\non(getName('end' , e) , me.onEnd = onEnd) ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330526.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double.enabled"
  },
  "config::event.tap": {
    "meta": "code.meta.config",
    "signature": "<void> config::event.tap(<string> key)",
    "standard": true,
    "importNames": [
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121330551;\n    \n                    \n\n                    const config = {\r\n    \"maxDuration\": 600,\r\n    \"moveDistance\":100\r\n};\n                function main(key){\n\n                    return get(config , key) ;\n\n                }\n                \n    \n                    return function(key){\n    \n                        \n        if(!var_init_locked_1609121330551){\n\n            get = include('src::object.value.get');\n\n            var_init_locked_1609121330551 = true ;\n        }\n        \n    \n                        return main.call(this , key) ;\n                    } ;\n    \n                })()",
    "folder": "config",
    "name": "event.tap"
  },
  "src::browser.event.gesture.tap.double.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.double.move(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.single",
      "src::math.point.line.distance",
      "src::browser.scale",
      "src::browser.event.gesture.tap.double.disabled",
      "config::event.tap"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,getEvent,getDistance,getScale,moveDistance;\n    \n                    let var_init_locked_1609121330537;\n \n                    \n\n                    const var_current_scope_1609121330537 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330537){\n\n            getTouchEvents = include('src::browser.event.touches');\ngetEvent = include('src::browser.event.single');\ngetDistance = include('src::math.point.line.distance');\ngetScale = include('src::browser.scale');\nmoveDistance = config('event.tap' , 'moveDistance');\n\n            var_init_locked_1609121330537 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330537.has(this)){\n\n            var_current_scope_1609121330537.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.tap.double.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 移动事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getScale from browser.scale\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @config moveDistance from event.tap...moveDistance\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nif(getTouchEvents(e , 'move')){\r\n\r\n    disabled(e) ;\r\n\r\n    return ;\r\n}\r\n\r\nlet me = this,\r\n{\r\n    pageX,\r\n    pageY\r\n} = getEvent(e , 'move'),\r\n{\r\n    startPoint,\r\n    timer\r\n} = me;\r\n\r\nif(timer){\r\n\r\n    return ;\r\n}\r\n\r\nif(Math.round(getDistance({\r\n    x:pageX,\r\n    y:pageY\r\n} , startPoint)) * getScale() >= moveDistance){\r\n\r\n    disabled(e) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330537.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double.move"
  },
  "config::event.tap.double": {
    "meta": "code.meta.config",
    "signature": "<void> config::event.tap.double(<string> key)",
    "standard": true,
    "importNames": [
      "src::object.value.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121330605;\n    \n                    \n\n                    const config = {\r\n    \"maxDuration\": 600,\r\n    \"tapDistance\": 200\r\n};\n                function main(key){\n\n                    return get(config , key) ;\n\n                }\n                \n    \n                    return function(key){\n    \n                        \n        if(!var_init_locked_1609121330605){\n\n            get = include('src::object.value.get');\n\n            var_init_locked_1609121330605 = true ;\n        }\n        \n    \n                        return main.call(this , key) ;\n                    } ;\n    \n                })()",
    "folder": "config",
    "name": "event.tap.double"
  },
  "src::browser.event.gesture.tap.double.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.double.end(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.touches",
      "src::browser.event.single",
      "src::math.point.line.distance",
      "src::browser.scale",
      "src::browser.event.gesture.tap.double.disabled",
      "src::browser.event.stop",
      "config::event.tap.double"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getTouchEvents,getEvent,getDistance,getScale,stop,maxDuration,tapDistance;\n    \n                    let var_init_locked_1609121330581;\n \n                    \n\n                    const var_current_scope_1609121330581 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330581){\n\n            getTouchEvents = include('src::browser.event.touches');\ngetEvent = include('src::browser.event.single');\ngetDistance = include('src::math.point.line.distance');\ngetScale = include('src::browser.scale');\nstop = include('src::browser.event.stop');\nmaxDuration = config('event.tap.double' , 'maxDuration');\ntapDistance = config('event.tap.double' , 'tapDistance');\n\n            var_init_locked_1609121330581 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330581.has(this)){\n\n            var_current_scope_1609121330581.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.tap.double.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 结束事件监听\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getScale from browser.scale\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @import stop from browser.event.stop\r\n * \r\n * @config maxDuration from event.tap.double...maxDuration\r\n * \r\n * @config tapDistance from event.tap.double...tapDistance\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nif(getTouchEvents(e , 'end')){\r\n\r\n    disabled(e) ;\r\n\r\n    return ;\r\n}\r\n\r\nlet me = this,\r\n{\r\n    pointerType,\r\n    button\r\n } = e ;\r\n\r\n if(pointerType === 'mouse'){\r\n\r\n    if(button !== 0){\r\n\r\n        disabled(e) ;\r\n\r\n        return ;\r\n    }\r\n }\r\n\r\n let {\r\n    startTime,\r\n    lastTapTime,\r\n    lastTarget,\r\n    startPoint,\r\n    dispatch\r\n } = me,\r\n nativeEvent = getEvent(e , 'end'),\r\n time = Date.now();\r\n\r\n if(lastTapTime){\r\n\r\n    if(time - lastTapTime <= maxDuration){\r\n\r\n        let {\r\n            pageX,\r\n            pageY\r\n        } = nativeEvent;\r\n\r\n        if(Math.round(getDistance({\r\n            x:pageX,\r\n            y:pageY\r\n        } , startPoint)) * getScale() <= tapDistance){\r\n\r\n            if(nativeEvent.target === lastTarget){\r\n\r\n                dispatch('doubletap' , {\r\n                    nativeEvent\r\n                }) ;\r\n            }\r\n        \r\n        }\r\n\r\n    }\r\n\r\n    disabled(e) ;\r\n\r\n }else if(time - startTime > maxDuration){\r\n \r\n    dispatch('singletap' , {\r\n        nativeEvent\r\n    }) ;\r\n\r\n    disabled(e) ;\r\n\r\n }else{\r\n\r\n    me.lastTapTime = time ;\r\n\r\n    me.lastTarget = nativeEvent.target ;\r\n\r\n    me.timer = setTimeout(() => {\r\n\r\n        dispatch('singletap' , {\r\n            nativeEvent\r\n        }) ;\r\n    \r\n        disabled(e) ;\r\n\r\n    } , maxDuration) ;\r\n }\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330581.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double.end"
  },
  "src::browser.event.gesture.tap.double.event": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::browser.event.gesture.tap.double.event()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121330617;\n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 获得启动监听事件名称\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\nreturn getName('start') ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330617){\n\n            getName = include('src::browser.event.name.single');\n\n            var_init_locked_1609121330617 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double.event"
  },
  "src::browser.event.gesture.tap.double": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.double(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.single",
      "src::browser.event.gesture.tap.double.enabled",
      "src::browser.event.gesture.tap.double.event"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,browserEventGestureTapDoubleEvent;\n    \n                    let var_init_locked_1609121330649;\n \n                    \n\n                    const var_current_scope_1609121330649 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330649){\n\n            getEvent = include('src::browser.event.single');\nbrowserEventGestureTapDoubleEvent = include('src::browser.event.gesture.tap.double.event');\n\n            var_init_locked_1609121330649 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330649.has(this)){\n\n            var_current_scope_1609121330649.set(this , (() => {\n                const enabled = include('src::browser.event.gesture.tap.double.enabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 双击事件实现\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import enabled from .double.enabled scoped\r\n * \r\n * @import .double.event\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n let  me = this ;\r\n\r\nif(me.startPoint){\r\n\r\n    return ;\r\n \r\n }\r\n \r\nlet {\r\n   timer\r\n} = me;\r\n\r\nif(timer){\r\n\r\n   clearTimeout(timer) ;\r\n\r\n   return ;\r\n}\r\n\r\nlet nativeEvent = getEvent(e , 'start'),\r\n     {\r\n        pageX:x,\r\n        pageY:y\r\n    } = nativeEvent ;\r\n \r\n me.startPoint = {\r\n    x,\r\n    y\r\n } ;\r\n\r\n me.startTime = Date.now() ;\r\n \r\n enabled(e) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330649.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.double"
  },
  "src::browser.event.gesture.tap.enabled": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.enabled()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single",
      "src::browser.event.gesture.tap.move",
      "src::browser.event.gesture.tap.end",
      "src::browser.event.listener.global.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName,on;\n    \n                    let var_init_locked_1609121330668;\n \n                    \n\n                    const var_current_scope_1609121330668 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330668){\n\n            getName = include('src::browser.event.name.single');\non = include('src::browser.event.listener.global.add');\n\n            var_init_locked_1609121330668 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330668.has(this)){\n\n            var_current_scope_1609121330668.set(this , (() => {\n                const onMove = include('src::browser.event.gesture.tap.move').bind(this);\nconst onEnd = include('src::browser.event.gesture.tap.end').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 监听全局事件\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @import onMove from .move scoped\r\n * \r\n * @import onEnd from .end scoped\r\n * \r\n * @import on from browser.event.listener.global.add\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n on(getName('move') ,  me.onMove = onMove) ;\r\n\r\n on(getName('end') , me.onEnd = onEnd) ;\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330668.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.enabled"
  },
  "src::browser.event.gesture.tap.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.move(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.single",
      "src::math.point.line.distance",
      "src::browser.scale",
      "src::browser.event.gesture.tap.disabled",
      "config::event.tap"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,getDistance,getScale,moveDistance;\n    \n                    let var_init_locked_1609121330686;\n \n                    \n\n                    const var_current_scope_1609121330686 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330686){\n\n            getEvent = include('src::browser.event.single');\ngetDistance = include('src::math.point.line.distance');\ngetScale = include('src::browser.scale');\nmoveDistance = config('event.tap' , 'moveDistance');\n\n            var_init_locked_1609121330686 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330686.has(this)){\n\n            var_current_scope_1609121330686.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.tap.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 移动事件监听\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getScale from browser.scale\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @config moveDistance from event.tap...moveDistance\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nlet me = this,\r\n    {\r\n        pageX,\r\n        pageY\r\n    } = getEvent(e , 'move'),\r\n    {\r\n        startPoint,\r\n        dispatch\r\n    } = this;\r\n\r\nif(Math.round(getDistance({\r\n    x:pageX,\r\n    y:pageY\r\n} , startPoint)) * getScale() >= moveDistance){\r\n\r\n    dispatch('tapcancel') ;\r\n\r\n    disabled() ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330686.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.move"
  },
  "src::browser.event.gesture.tap.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap.end(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.single",
      "src::browser.event.gesture.tap.disabled",
      "src::browser.event.stop"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,stop;\n    \n                    let var_init_locked_1609121330703;\n \n                    \n\n                    const var_current_scope_1609121330703 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330703){\n\n            getEvent = include('src::browser.event.single');\nstop = include('src::browser.event.stop');\n\n            var_init_locked_1609121330703 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330703.has(this)){\n\n            var_current_scope_1609121330703.set(this , (() => {\n                const disabled = include('src::browser.event.gesture.tap.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 结束事件监听\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import disabled from .disabled scoped\r\n * \r\n * @import stop from browser.event.stop\r\n * \r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    nativeEvent\r\n } = me ;\r\n\r\n me.dispatch('tap' , {\r\n    nativeEvent\r\n }) ;\r\n\r\n disabled() ;\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330703.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.end"
  },
  "src::browser.event.gesture.tap.event": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::browser.event.gesture.tap.event()",
    "standard": true,
    "importNames": [
      "src::browser.event.name.single"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121330725;\n    \n                    \n\n                    function main(){\n\n        /**\r\n * \r\n * 获得启动监听事件名称\r\n * \r\n * @import getName from browser.event.name.single\r\n * \r\n * @return {string}\r\n * \r\n */\r\n\r\n return getName('start') ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330725){\n\n            getName = include('src::browser.event.name.single');\n\n            var_init_locked_1609121330725 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap.event"
  },
  "src::browser.event.gesture.tap": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.tap(<Event> e)",
    "standard": true,
    "importNames": [
      "src::browser.event.single",
      "src::browser.event.touches",
      "src::browser.event.gesture.tap.enabled",
      "src::browser.event.gesture.tap.disabled",
      "src::browser.event.gesture.tap.event",
      "src::browser.event.stop",
      "config::event.tap"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getEvent,getTouchEvents,browserEventGestureTapEvent,stop,maxDuration;\n    \n                    let var_init_locked_1609121330735;\n \n                    \n\n                    const var_current_scope_1609121330735 = new Map();\n    \n                    return function(e){\n    \n                        \n        if(!var_init_locked_1609121330735){\n\n            getEvent = include('src::browser.event.single');\ngetTouchEvents = include('src::browser.event.touches');\nbrowserEventGestureTapEvent = include('src::browser.event.gesture.tap.event');\nstop = include('src::browser.event.stop');\nmaxDuration = config('event.tap' , 'maxDuration');\n\n            var_init_locked_1609121330735 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121330735.has(this)){\n\n            var_current_scope_1609121330735.set(this , (() => {\n                const enabled = include('src::browser.event.gesture.tap.enabled').bind(this);\nconst disabled = include('src::browser.event.gesture.tap.disabled').bind(this);\n\n                function main(e){\n\n        \r\n/**\r\n * \r\n * 开始事件监听\r\n * \r\n * @import getEvent from browser.event.single\r\n * \r\n * @import getTouchEvents from browser.event.touches\r\n * \r\n * @import enabled from .tap.enabled scoped\r\n * \r\n * @import disabled from .tap.disabled scoped\r\n * \r\n * @config maxDuration from event.tap...maxDuration\r\n * \r\n * @import .tap.event\r\n * \r\n * @import stop from ..stop\r\n *\r\n * @param {Event} e 事件对象\r\n * \r\n */\r\n\r\nif(getTouchEvents(e , 'start')){\r\n\r\n   disabled() ;\r\n\r\n   return ;\r\n\r\n}\r\n\r\nlet me = this,\r\n   nativeEvent = getEvent(e , 'start'),\r\n   {\r\n      pageX:x,\r\n      pageY:y,\r\n      pointerType,\r\n      button\r\n   } = nativeEvent;\r\n\r\nif(pointerType === 'mouse'){\r\n\r\n   if(button !== 0){\r\n\r\n      return ;\r\n   }\r\n}\r\n\r\nme.startPoint = {\r\n   x,\r\n   y\r\n} ;\r\n\r\nme.nativeEvent = nativeEvent ;\r\n\r\nenabled() ;\r\n\r\nme.timer = setTimeout(() => disabled() , maxDuration) ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121330735.get(this) ;\n\n        \n    \n                        return main.call(this , e) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.tap"
  },
  "src::browser.event.gesture.vue": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.gesture.vue(<mixed> Vue)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::browser.event.gesture.manager.dom",
      "src::is.object.simple",
      "src::is.function",
      "src::browser.event.listener.element.add",
      "src::browser.event.listener.element.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,EventDom,isObject,isFunction,on,un;\n    \n                    let var_init_locked_1609121330747;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 初始化 VUE 触摸指令\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import EventDom from browser.event.gesture.manager.dom value\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.function\r\n * \r\n * @import on from browser.event.listener.element.add\r\n * \r\n * @import un from browser.event.listener.element.remove\r\n * \r\n * @param {mixed} [Vue] VUE 实例\r\n * \r\n * \r\n */\r\n\r\n const gesture = Object.freeze({\r\n\r\n    bind(el, {\r\n        arg:name,\r\n        value:fn\r\n    }){\r\n\r\n      addEventListener(el , name , fn) ;\r\n\r\n    },\r\n  \r\n    update(el, {\r\n        arg:name,\r\n        value:fn,\r\n        oldValue:oldFn\r\n    }) {\r\n\r\n        if(fn !== oldFn){\r\n\r\n            removeEventListener(el , name , oldFn) ;\r\n  \r\n            addEventListener(el , name , fn) ;\r\n        }\r\n    },\r\n  \r\n    unbind(el, {\r\n        arg:name,\r\n        value:fn\r\n    }){\r\n\r\n        removeEventListener(el , name , fn) ;\r\n      \r\n    }\r\n}) ;\r\n\r\nfunction main(Vue){\r\n\r\n    if(Vue){\r\n\r\n        Vue.directive('gesture' , gesture) ;\r\n        \r\n    }else{\r\n\r\n        return {\r\n            gesture\r\n        } ;\r\n    }\r\n}\r\n\r\nfunction addEventListener(el , name , fn){\r\n\r\n    let event = `gesture:${name}` ;\r\n\r\n    if(isObject(fn)){\r\n\r\n        let {\r\n            fn:listenerFn,\r\n            scope,\r\n            ...options\r\n        } = fn ;\r\n\r\n        EventDom.install(el, name , options);\r\n        \r\n        on(el , event , listenerFn , {\r\n            scope\r\n        });\r\n\r\n    }else{\r\n\r\n        EventDom.install(el, name);\r\n\r\n        on(el , event , fn) ;\r\n    }\r\n}\r\n\r\nfunction removeEventListener(el , name , fn){\r\n\r\n    let event = `gesture:${name}` ;\r\n\r\n    if(isObject(fn)){\r\n\r\n        let {\r\n            fn:listenerFn,\r\n            scope\r\n        } = fn ;\r\n        \r\n        un(el , event , listenerFn , scope);\r\n\r\n    }else if(isFunction(fn)){\r\n\r\n        un(el , event , fn) ;\r\n    }\r\n\r\n    EventDom.uninstall(el, name);\r\n}\n    \n                    return function(Vue){\n    \n                        \n        if(!var_init_locked_1609121330747){\n\n            generate = include('src::id.generate');\nEventDom = include('src::browser.event.gesture.manager.dom')();\nisObject = include('src::is.object.simple');\nisFunction = include('src::is.function');\non = include('src::browser.event.listener.element.add');\nun = include('src::browser.event.listener.element.remove');\n\n            var_init_locked_1609121330747 = true ;\n        }\n        \n    \n                        return main.call(this , Vue) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.gesture.vue"
  },
  "src::browser.event.init.cancel": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.init.cancel(<HTMLElement> target)",
    "standard": true,
    "importNames": [
      "src::browser.event.init.listeners",
      "src::browser.event.listener.remove"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let listeners,remove;\n    \n                    let var_init_locked_1609121330771;\n    \n                    \n\n                    function main(target){\n\n        \r\n/**\r\n * \r\n * 取消实始化事件应用环境\r\n * \r\n * @import listeners from .listeners value\r\n * \r\n * @import remove from browser.event.listener.remove\r\n * \r\n * @param {HTMLElement} target 事件应用环境元素\r\n * \r\n */\r\n\r\nremove(target , listeners) ;\n\n    }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121330771){\n\n            listeners = include('src::browser.event.init.listeners')();\nremove = include('src::browser.event.listener.remove');\n\n            var_init_locked_1609121330771 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.init.cancel"
  },
  "src::browser.event.init.listeners": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.event.init.listeners()",
    "standard": true,
    "importNames": [
      "src::browser.event.prevent",
      "src::browser.event.stop"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prevent,stop;\n    \n                    let var_init_locked_1609121330787;\n    \n                    let var_once_value_1609121330787;\n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 函数实现说明\r\n * \r\n * @import prevent from ..prevent\r\n * \r\n * @import stop from ..stop\r\n * \r\n * @return {object} 初始化事件应用环境所使用到的事件 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\n const doPrevent = e => {\r\n\r\n    let {\r\n        target\r\n    } = e ;\r\n\r\n    switch(target.nodeName){\r\n\r\n        case 'INPUT':\r\n        case 'TEXTAREA':\r\n        case 'SELECT':\r\n\r\n            return ;\r\n\r\n        default:\r\n\r\n            if(target.contentEditable === 'true'){\r\n\r\n                let {\r\n                    type\r\n                } = e ;\r\n\r\n                switch(type){\r\n\r\n                    case 'touchstart':\r\n                    case 'touchmove':\r\n\r\n                        break ;\r\n\r\n                    default:\r\n\r\n                        return ;\r\n                }\r\n            }\r\n    }\r\n\r\n    prevent(e) ;\r\n}\r\n\r\nreturn {\r\n    touchstart:doPrevent,\r\n    touchmove:doPrevent,\r\n    mousedown:doPrevent,\r\n    keydown:doPrevent,\r\n    mousewheel:doPrevent,\r\n    contextmenu(e){\r\n\r\n        stop(e) ;\r\n\r\n        prevent(e) ;\r\n    }\r\n} ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330787){\n\n            prevent = include('src::browser.event.prevent');\nstop = include('src::browser.event.stop');\n\n            var_init_locked_1609121330787 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121330787){\n\n            return var_once_value_1609121330787 ;\n\n        }\n        return var_once_value_1609121330787 = main.call(this ) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.init.listeners"
  },
  "src::browser.event.init": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.init(<HTMLElement> target)",
    "standard": true,
    "importNames": [
      "src::browser.event.init.listeners",
      "src::browser.event.listener.add",
      "src::os.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let listeners,add,os;\n    \n                    let var_init_locked_1609121330824;\n    \n                    \n\n                    function main(target){\n\n        \r\n/**\r\n * \r\n * 实始化事件应用环境\r\n * \r\n * @import listeners from .init.listeners value\r\n * \r\n * @import add from browser.event.listener.add\r\n * \r\n * @import os from os.name value\r\n * \r\n * @param {HTMLElement} target 事件应用环境元素\r\n * \r\n */\r\n\r\n switch(os){\r\n\r\n    case 'iOS':\r\n    case 'Android':\r\n\r\n        add(window , listeners) ;\r\n\r\n    break ;\r\n\r\n    default:\r\n\r\n        add(target , listeners) ;\r\n }\n\n    }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121330824){\n\n            listeners = include('src::browser.event.init.listeners')();\nadd = include('src::browser.event.listener.add');\nos = include('src::os.name')();\n\n            var_init_locked_1609121330824 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.init"
  },
  "src::browser.event.key": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.event.key(<Event> event)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121330841;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 得到对应代码的值键值 \r\n * \r\n * @import is.defined\r\n * \r\n * @param {Event} event 键事件对象\r\n * \r\n * @return {mixed} 键值 \r\n * \r\n */\r\n\r\n const KEY_CODES = {\r\n    39:'RIGHT',\r\n    37:'LEFT',\r\n    38:'UP',\r\n    40:'DOWN',\r\n    13:'ENTER',\r\n    46:'DELETE',\r\n    9:'TAB',\r\n    107:'+',\r\n    187:'=',\r\n    27:'ESC'\r\n };\r\n\r\n function main({\r\n    shiftKey,\r\n    keyCode\r\n }){\r\n\r\n   if(isDefined(shiftKey) && isDefined(keyCode)){\r\n\r\n      return {\r\n         shift:shiftKey,\r\n         key:KEY_CODES[keyCode],\r\n         code:keyCode\r\n      } ;\r\n   }\r\n }\n    \n                    return function(event){\n    \n                        \n        if(!var_init_locked_1609121330841){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121330841 = true ;\n        }\n        \n    \n                        return main.call(this , event) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.key"
  },
  "src::browser.event.visibility.init": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.event.visibility.init()",
    "standard": true,
    "importNames": [
      "src::browser.event.dispatch"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let dispatch;\n    \n                    let var_init_locked_1609121330860;\n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 初始化页面隐藏/关闭事件\r\n * \r\n * @import dispatch from ..dispatch\r\n * \r\n */\r\n\r\n document.addEventListener('visibilitychange' , () => dispatch(document , document.visibilityState)) ;\n\n    }\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121330860){\n\n            dispatch = include('src::browser.event.dispatch');\n\n            var_init_locked_1609121330860 = true ;\n        }\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.event.visibility.init"
  },
  "src::browser.html.element.box.page": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.html.element.box.page(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.getXY",
      "src::browser.html.element.getSize"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getXY,getSize;\n    \n                    let var_init_locked_1609121330880;\n    \n                    \n\n                    function main(el){\n\n        /**\r\n * \r\n * 获取元素的领域\r\n * \r\n * @import getXY from browser.html.element.getXY\r\n * \r\n * @import getSize from browser.html.element.getSize\r\n * \r\n * @param {HTMLElement} el\r\n * \r\n * @return {object} 高度与宽度的配置\r\n * \r\n */\r\n\r\nlet {\r\n    x,\r\n    y\r\n} = getXY(el),\r\n{\r\n    width,\r\n    height\r\n} = getSize(el);\r\n\r\n\r\nreturn {\r\n    width,\r\n    height,\r\n    left:x,\r\n    top:y,\r\n    right:x + width,\r\n    bottom:y + height\r\n} ;\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330880){\n\n            getXY = include('src::browser.html.element.getXY');\ngetSize = include('src::browser.html.element.getSize');\n\n            var_init_locked_1609121330880 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.box.page"
  },
  "src::browser.html.element.getXY": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.html.element.getXY(<HTMLElement> el)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 获得元素的坐标\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\nconst \r\n{\r\n    round\r\n} = Math ;\r\n\r\nlet \r\nx = 0,\r\ny = 0,\r\n{\r\n    body\r\n} = document;\r\n\r\nif(el !== document && el !== body){\r\n   \r\n    try{\r\n\r\n        let bodyRect = body.getBoundingClientRect(),\r\n            rect = el.getBoundingClientRect();\r\n\r\n        x = rect.left - bodyRect.left;\r\n        y = rect.top - bodyRect.top;\r\n    \r\n    }catch(ex){\r\n\r\n    }\r\n}\r\n\r\nreturn {\r\n    x:round(x), \r\n    y:round(y)\r\n};\r\n\n\n    }\n    \n                    return function(el){\n    \n                        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.getXY"
  },
  "src::browser.html.element.getStyle": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.html.element.getStyle(<HTMLElement> el , <string|array> prop , <boolean> inline)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::browser.html.element.getStyle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,getStyle;\n    \n                    let var_init_locked_1609121330973;\n    \n                    \n\n                    function main(el , prop , inline){\n\n        \r\n/**\r\n * \r\n * 获得元素元素样式属性值\r\n * \r\n * @import is.array\r\n * \r\n * @import getStyle from browser.html.element.getStyle\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string|array} prop 属性名称\r\n * \r\n * @param {boolean} [inline = false] 是否获取内联样式值\r\n * \r\n * @return {mixed} 样式属性值\r\n * \r\n */\r\n\r\nif(isArray(prop)){\r\n\r\n    let values = {},\r\n        props = prop;\r\n    \r\n    for(let prop of props){\r\n\r\n        values[prop] = getStyle(el , prop , inline) ;\r\n    }\r\n\r\n    return values ;\r\n\r\n}\r\n\r\nif(inline){\r\n\r\n    return el.style.getPropertyValue(prop);\r\n\r\n}else{\r\n\r\n    style = window.getComputedStyle(el , null);\r\n\r\n    if(style){\r\n\r\n        return style[prop] ;\r\n\r\n    }else{\r\n\r\n        return getStyle(el , prop , true) ;\r\n    }\r\n}\n\n    }\n    \n                    return function(el , prop , inline = false){\n    \n                        \n        if(!var_init_locked_1609121330973){\n\n            isArray = include('src::is.array');\ngetStyle = include('src::browser.html.element.getStyle');\n\n            var_init_locked_1609121330973 = true ;\n        }\n        \n    \n                        return main.call(this , el , prop , inline) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.getStyle"
  },
  "src::browser.html.element.isStyle": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::browser.html.element.isStyle(<HTMLElement> el , <string> prop , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.getStyle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getStyle;\n    \n                    let var_init_locked_1609121330954;\n    \n                    \n\n                    function main(el , prop , value){\n\n        /**\r\n * \r\n * 判断元素的样式属性是否为指定值\r\n * \r\n * @import getStyle from browser.html.element.getStyle\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} prop 属性名称\r\n * \r\n * @param {mixed} value 样式属性值\r\n * \r\n * @return {boolean} 如果样式值匹配则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn getStyle(el , prop) === value ;\r\n\n\n    }\n    \n                    return function(el , prop , value){\n    \n                        \n        if(!var_init_locked_1609121330954){\n\n            getStyle = include('src::browser.html.element.getStyle');\n\n            var_init_locked_1609121330954 = true ;\n        }\n        \n    \n                        return main.call(this , el , prop , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.isStyle"
  },
  "src::browser.html.element.getWidth": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::browser.html.element.getWidth(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.isStyle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isStyle;\n    \n                    let var_init_locked_1609121330936;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 获得元素的宽度\r\n * \r\n * @import isStyle from browser.html.element.isStyle\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @return {number} 元素的宽度 \r\n * \r\n */\r\n\r\nif(isStyle(el , 'display' , 'none')){\r\n\r\n    return 0 ;\r\n}\r\n\r\ntry{\r\n\r\n    let {\r\n        left,\r\n        right\r\n    } = el.getBoundingClientRect() ;\r\n\r\n    return right - left ;\r\n\r\n}catch(err){\r\n\r\n\r\n}\r\n\r\nreturn el.offsetWidth ;\r\n\r\n\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330936){\n\n            isStyle = include('src::browser.html.element.isStyle');\n\n            var_init_locked_1609121330936 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.getWidth"
  },
  "src::browser.html.element.getHeight": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::browser.html.element.getHeight(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.isStyle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isStyle;\n    \n                    let var_init_locked_1609121330991;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 获取元素的高度\r\n * \r\n * @import isStyle from browser.html.element.isStyle\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @return {number} 元素的高度 \r\n * \r\n */\r\n\r\n\r\nif(isStyle(el , 'display' , 'none')){\r\n\r\n    return 0 ;\r\n}\r\n\r\nif(el === document.body){\r\n\r\n    return document.body.clientHeight ;\r\n}\r\n\r\ntry{\r\n\r\n    let {\r\n        top,\r\n        bottom\r\n    } = el.getBoundingClientRect() ;\r\n\r\n    return top - bottom ;\r\n\r\n}catch(err){\r\n\r\n\r\n}\r\n\r\nreturn el.offsetHeight ;\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330991){\n\n            isStyle = include('src::browser.html.element.isStyle');\n\n            var_init_locked_1609121330991 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.getHeight"
  },
  "src::browser.html.element.getSize": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.html.element.getSize(<HTMLElement> el)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.getWidth",
      "src::browser.html.element.getHeight"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getWidth,getHeight;\n    \n                    let var_init_locked_1609121330918;\n    \n                    \n\n                    function main(el){\n\n        \r\n/**\r\n * \r\n * 获得元素的尺寸\r\n * \r\n * @import getWidth from browser.html.element.getWidth\r\n * \r\n * @import getHeight from browser.html.element.getHeight\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @return {object} 尺寸\r\n * \r\n */\r\n\r\nreturn{\r\n    width:getWidth(el),\r\n    height:getHeight(el)\r\n} ;\r\n\n\n    }\n    \n                    return function(el){\n    \n                        \n        if(!var_init_locked_1609121330918){\n\n            getWidth = include('src::browser.html.element.getWidth');\ngetHeight = include('src::browser.html.element.getHeight');\n\n            var_init_locked_1609121330918 = true ;\n        }\n        \n    \n                        return main.call(this , el) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.getSize"
  },
  "src::browser.html.element.position": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.html.element.position(<HTMLElement> el , <string> pos , <number> zIndex , <number> x , <number> y)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.isStyle",
      "src::browser.html.element.setStyle",
      "src::is.defined",
      "src::browser.html.element.setXY"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isStyle,setStyle,isDefined,setXY;\n    \n                    let var_init_locked_1609121331013;\n    \n                    \n\n                    function main(el , pos , zIndex , x , y){\n\n        \r\n/**\r\n * \r\n * 设置元素定位方式\r\n * \r\n * @import isStyle from browser.html.element.isStyle\r\n * \r\n * @import setStyle from browser.html.element.setStyle\r\n * \r\n * @import is.defined\r\n * \r\n * @import setXY from browser.html.element.setXY\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {string} [pos] 定位方式\r\n * \r\n * @param {number} [zIndex] 层次设置\r\n * \r\n * @param {number} [x] 横坐标\r\n * \r\n * @param {number} [y] 纵坐标\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\nif(el !== document && el !== document.body){\r\n\r\n    if(!pos && isStyle(el , 'position' , 'static')){\r\n    \r\n        setStyle(el , 'position' , 'relative') ;\r\n    \r\n    }else if(pos){\r\n\r\n        setStyle(el , 'position' , pos) ;\r\n    }\r\n\r\n    if(isDefined(zIndex)){\r\n\r\n        setStyle(el , 'zindex' , zIndex) ;\r\n    }\r\n\r\n    if(x || y){\r\n\r\n        setXY(el , x || false , y || false) ;\r\n    }\r\n}\r\n\n\n    }\n    \n                    return function(el , pos , zIndex , x , y){\n    \n                        \n        if(!var_init_locked_1609121331013){\n\n            isStyle = include('src::browser.html.element.isStyle');\nsetStyle = include('src::browser.html.element.setStyle');\nisDefined = include('src::is.defined');\nsetXY = include('src::browser.html.element.setXY');\n\n            var_init_locked_1609121331013 = true ;\n        }\n        \n    \n                        return main.call(this , el , pos , zIndex , x , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.position"
  },
  "src::browser.html.element.setStyle": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.html.element.setStyle(<HTMLElement> el , <string|object> prop , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::browser.html.element.setStyle"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,setStyle;\n    \n                    let var_init_locked_1609121331039;\n    \n                    \n\n                    function main(el , prop , value){\n\n        \r\n/**\r\n * \r\n * 设置元素样式\r\n * \r\n * @import is.string\r\n * \r\n * @import setStyle from browser.html.element.setStyle\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {string|object} prop 属性名称\r\n * \r\n * @param {mixed} [value] 属性值\r\n * \r\n */\r\n\r\nif(isString(prop)){\r\n\r\n    el.style.setProperty(prop , value) ;\r\n\r\n}else{\r\n\r\n    let names = Object.keys(prop) ;\r\n\r\n    for(let name of names){\r\n\r\n        setStyle(el , name , prop[name]) ;\r\n    }\r\n}\n\n    }\n    \n                    return function(el , prop , value){\n    \n                        \n        if(!var_init_locked_1609121331039){\n\n            isString = include('src::is.string');\nsetStyle = include('src::browser.html.element.setStyle');\n\n            var_init_locked_1609121331039 = true ;\n        }\n        \n    \n                        return main.call(this , el , prop , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.setStyle"
  },
  "src::browser.html.element.translateXY": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.html.element.translateXY(<HTMLElement> el , <number> x , <number> y)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.getStyle",
      "src::browser.html.element.getXY",
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getStyle,getXY,isNumber;\n    \n                    let var_init_locked_1609121331111;\n    \n                    \n\n                    function main(el , x , y){\n\n        \r\n/**\r\n * \r\n * 转换元素坐标值\r\n * \r\n * @import getStyle from browser.html.element.getStyle\r\n * \r\n * @import getXY from browser.html.element.getXY\r\n * \r\n * @import is.number\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {number} x 横坐标\r\n * \r\n * @param {number} y 纵坐标\r\n * \r\n * @return {object} 转换后的坐标值 \r\n * \r\n */\r\n\r\nlet {\r\n    position,\r\n    left,\r\n    top\r\n} = getStyle(el , [\r\n        'position',\r\n        'top',\r\n        'left'\r\n    ]),\r\nisRelative = position === 'relative',\r\n{\r\n    x:orignX,\r\n    y:orginY\r\n} = getXY(el);\r\n\r\nleft = parseFloat(left) ;\r\n\r\ntop = parseFloat(top) ;\r\n \r\nif(isNaN(left)){\r\n    \r\n    left = isRelative ? 0 : el.offsetLeft;\r\n}\r\n\r\nif(isNaN(top)){\r\n\r\n    top = isRelative ? 0 : el.offsetTop;\r\n}\r\n\r\nreturn {\r\n    x: x - orignX + left,\r\n    y: y - orginY + top\r\n};\n\n    }\n    \n                    return function(el , x , y){\n    \n                        \n        if(!var_init_locked_1609121331111){\n\n            getStyle = include('src::browser.html.element.getStyle');\ngetXY = include('src::browser.html.element.getXY');\nisNumber = include('src::is.number');\n\n            var_init_locked_1609121331111 = true ;\n        }\n        \n    \n                        return main.call(this , el , x , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.translateXY"
  },
  "src::browser.html.element.translatePoints": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::browser.html.element.translatePoints(<HTMLElement> el , <number> x , <number> y)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.translateXY"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let translateXY;\n    \n                    let var_init_locked_1609121331075;\n    \n                    \n\n                    function main(el , x , y){\n\n        \r\n/**\r\n * \r\n * 转换元素坐标值\r\n * \r\n * @import translateXY from browser.html.element.translateXY\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {number} x 横坐标\r\n * \r\n * @param {number} y 纵坐标\r\n * \r\n * @return {object} 转换后的坐标值 \r\n * \r\n */\r\n\r\nlet {\r\n    x:left,\r\n    y:top\r\n} = translateXY(el , x , y) ;\r\n\r\nreturn {\r\n    left,\r\n    top\r\n} ;\n\n    }\n    \n                    return function(el , x , y){\n    \n                        \n        if(!var_init_locked_1609121331075){\n\n            translateXY = include('src::browser.html.element.translateXY');\n\n            var_init_locked_1609121331075 = true ;\n        }\n        \n    \n                        return main.call(this , el , x , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.translatePoints"
  },
  "src::browser.html.element.setXY": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.html.element.setXY(<HTMLElement> el , <number> x , <number> y)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.translatePoints",
      "src::browser.html.element.position"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let translatePoints,position;\n    \n                    let var_init_locked_1609121331059;\n    \n                    \n\n                    function main(el , x , y){\n\n        \r\n/**\r\n * \r\n * 设置元素坐标\r\n * \r\n * @import translatePoints from browser.html.element.translatePoints\r\n * \r\n * @import position from browser.html.element.position\r\n * \r\n * @param {HTMLElement} el 作用元素\r\n * \r\n * @param {number} x 横坐标\r\n * \r\n * @param {number} y 纵坐标\r\n * \r\n */\r\n\r\nlet {\r\n    top,\r\n    left\r\n} = translatePoints(el , x , y),\r\n{\r\n    style\r\n} = el,\r\npos;\r\n\r\nposition(el) ;\r\n\r\nstyle.top = `${top}px` ;\r\n\r\nstyle.left = `${left}px` ;\n\n    }\n    \n                    return function(el , x , y){\n    \n                        \n        if(!var_init_locked_1609121331059){\n\n            translatePoints = include('src::browser.html.element.translatePoints');\nposition = include('src::browser.html.element.position');\n\n            var_init_locked_1609121331059 = true ;\n        }\n        \n    \n                        return main.call(this , el , x , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.setXY"
  },
  "src::browser.html.element.style.get": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::browser.html.element.style.get(<HTMLElement> el , <string> prop)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el , prop){\n\n        /**\r\n * \r\n * 获得元素元素样式属性值\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} prop 属性名称\r\n * \r\n * @return {mixed} 样式属性值\r\n * \r\n */\r\n\r\nlet cs = window.getComputedStyle(el , '') ;\r\n\r\nif(cs){\r\n\r\n   return cs[prop] ;\r\n}\n\n    }\n    \n                    return function(el , prop){\n    \n                        \n    \n                        return main.call(this , el , prop) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.style.get"
  },
  "src::browser.html.element.style.is": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::browser.html.element.style.is(<HTMLElement> el , <string> prop , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::browser.html.element.style.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121331158;\n    \n                    \n\n                    function main(el , prop , value){\n\n        /**\r\n * \r\n * 判断元素的样式属性是否为指定值\r\n * \r\n * @import get from browser.html.element.style.get\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} prop 属性名称\r\n * \r\n * @param {mixed} value 样式属性值\r\n * \r\n * @return {boolean} 如果样式值匹配则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn get(prop) === value ;\n\n    }\n    \n                    return function(el , prop , value){\n    \n                        \n        if(!var_init_locked_1609121331158){\n\n            get = include('src::browser.html.element.style.get');\n\n            var_init_locked_1609121331158 = true ;\n        }\n        \n    \n                        return main.call(this , el , prop , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.style.is"
  },
  "src::browser.html.element.style.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.html.element.style.set(<HTMLElement> el , <string> prop , <mixed> value)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(el , prop , value){\n\n        /**\r\n * \r\n * 设置元素元素样式属性值\r\n * \r\n * @param {HTMLElement} el 元素\r\n * \r\n * @param {string} prop 属性名称\r\n * \r\n * @param {mixed} value 样式属性值\r\n * \r\n * \r\n */\r\n\r\nel.style.setProperty(prop , value) ;\n\n    }\n    \n                    return function(el , prop , value){\n    \n                        \n    \n                        return main.call(this , el , prop , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.element.style.set"
  },
  "src::browser.html.focus.text": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::browser.html.focus.text(<HTMLElement> inputEl , <boolean> isCursorEnd)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(inputEl , isCursorEnd){\n\n        \r\n/**\r\n * \r\n * 文本类控件获取焦点\r\n * \r\n * @param {HTMLElement} inputEl 文本类控件\r\n * \r\n * @param {boolean} [isCursorEnd = true] 是否将光标置为输入框最后\r\n * \r\n */\r\n\r\nlet len = inputEl.value.length ;\r\n\r\ninputEl.setSelectionRange(len , len) ;\r\n\r\ninputEl.focus() ;\r\n\n\n    }\n    \n                    return function(inputEl , isCursorEnd = true){\n    \n                        \n    \n                        return main.call(this , inputEl , isCursorEnd) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.focus.text"
  },
  "src::browser.html.iframe": {
    "meta": "code.meta.script.function",
    "signature": "<Window> src::browser.html.iframe(<HTMLElement> iframeEl)",
    "standard": true,
    "importNames": [
      "src::is.html.iframe"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isHtmlIframe;\n    \n                    let var_init_locked_1609121331231;\n    \n                    \n\n                    function main(iframeEl){\n\n        /**\r\n * \r\n * 获得 iframe 的 contentWindow 引用\r\n * \r\n * @import is.html.iframe\r\n * \r\n * @param {HTMLElement} iframeEl iframe元素引用\r\n * \r\n * @return {Window}\r\n * \r\n */\r\n\r\nif(!isHtmlIframe(iframeEl)){\r\n\r\n    return ;\r\n}\r\n\r\nreturn new Promise(callback =>{\r\n\r\n    switch(iframeEl.readyState){\r\n\r\n        case 'complete':\r\n        case 'loaded':\r\n\r\n            callback(iframeEl) ;\r\n\r\n            break ;\r\n\r\n        default:\r\n        \r\n            iframeEl.addEventListener('load' , () =>{\r\n\r\n                callback(iframeEl) ;\r\n\r\n            }) ;\r\n    }\r\n\r\n}) ;\n\n    }\n    \n                    return function(iframeEl){\n    \n                        \n        if(!var_init_locked_1609121331231){\n\n            isHtmlIframe = include('src::is.html.iframe');\n\n            var_init_locked_1609121331231 = true ;\n        }\n        \n    \n                        return main.call(this , iframeEl) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "browser.html.iframe"
  },
  "src::object.assign.if": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.assign.if(<object> dest , <object> ...sources)",
    "standard": true,
    "importNames": [
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject;\n    \n                    let var_init_locked_1609121331281;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 懒惰深度合并\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {object} dest 目标数据\r\n * \r\n * @param {object} [...sources] 来源数据\r\n * \r\n * @return {object} 合并后数据\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nfunction assign(dest , source){\r\n\r\n    if(isObject(dest) && isObject(source)){\r\n\r\n        let names = Object.keys(source) ;\r\n\r\n        for(let name of names){\r\n\r\n            if(!dest.hasOwnProperty(name)){\r\n\r\n                dest[name] = source[name] ;\r\n            \r\n            }else{\r\n\r\n                assign(dest[name] , source[name]) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    return source ;\r\n}\r\n\r\nfunction main(dest , ...sources){\r\n\r\n    for(let source of sources){\r\n\r\n        assign(dest , source) ;\r\n    }\r\n\r\n    return dest ;\r\n\r\n}\n    \n                    return function(dest , ...sources){\n    \n                        \n        if(!var_init_locked_1609121331281){\n\n            isObject = include('src::is.object.simple');\n\n            var_init_locked_1609121331281 = true ;\n        }\n        \n    \n                        return main.call(this , dest , ...sources) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.assign.if"
  },
  "src::object.cache": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.cache()",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.array",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isArray,isDefined;\n    \n                    let var_init_locked_1609121331303;\n    \n                    let var_class_1609121331303;\n    \n                    \n\n                    let var_global_main_1609121331303 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121331303){\n\n            isString = include('src::is.string');\nisArray = include('src::is.array');\nisDefined = include('src::is.defined');\n\n            \r\n/**\r\n * \r\n * 缓存\r\n * \r\n * @import is.string\r\n * \r\n * @import is.array\r\n * \r\n * @import is.defined\r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(target){\r\n\r\n        let me = this ;\r\n\r\n        me.target = target ;\r\n\r\n        me.cache = {} ;\r\n    }\r\n\r\n    clear(names){\r\n\r\n        let {\r\n            cache\r\n        } = this ;\r\n\r\n        if(!isDefined(names)){\r\n\r\n            names = Object.keys(cache) ;\r\n\r\n        }else if(isString(names)){\r\n\r\n            names = [\r\n                names\r\n            ] ;\r\n        }\r\n\r\n        if(isArray(names)){\r\n\r\n            for(let name of names){\r\n\r\n                delete cache[name] ;\r\n            }\r\n        }\r\n    }\r\n\r\n    get(name){\r\n\r\n        let {\r\n            cache,\r\n            target\r\n        } = this ;\r\n\r\n        if(!cache.hasOwnProperty(name)){\r\n\r\n            return cache[name] = target[name];\r\n        }\r\n\r\n        return cache[name] ;\r\n    }\r\n }\n\n            var_class_1609121331303 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121331303 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::object.cache' ;\n                }\n\n            } ;\n\n            main = var_class_1609121331303 ;\n        \nvar_global_main_1609121331303 = main;\n\n            var_init_locked_1609121331303 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121331303() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.cache"
  },
  "src::object.contains": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::object.contains(<object> target , <object> item)",
    "standard": true,
    "importNames": [
      "src::object.keys"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getKeys;\n    \n                    let var_init_locked_1609121331327;\n    \n                    \n\n                    function main(target , item){\n\n        /**\r\n * \r\n * 判断是否完全包含指定项\r\n * \r\n * @import getKeys from object.keys\r\n * \r\n * @param {object} target 目标对象\r\n * \r\n * @param {object} item 被包含对象\r\n * \r\n * @return {boolean} 被包含对象的所有数据都包含在目标对象中则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nlet keys = getKeys(item),\r\n    targetKeys = getKeys(target);\r\n\r\nfor(let key of keys){\r\n\r\n    if(!targetKeys.includes(key) || get(target , key) !== get(item , key)){\r\n\r\n        return false ;\r\n    }\r\n}\r\n\r\nreturn true ;\n\n    }\n    \n                    return function(target , item){\n    \n                        \n        if(!var_init_locked_1609121331327){\n\n            getKeys = include('src::object.keys');\n\n            var_init_locked_1609121331327 = true ;\n        }\n        \n    \n                        return main.call(this , target , item) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.contains"
  },
  "src::object.key.join": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::object.key.join(<array> ...keys)",
    "standard": true,
    "importNames": [
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1609121331383;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 将多个键值连接起来\r\n * \r\n * @import is.string\r\n * \r\n * @param {array} [...keys] 一组键值\r\n * \r\n * @return {string} 连接后的键值 \r\n * \r\n */\r\n\r\nconst suffixRe = /(?:^\\.+)|(?:\\.+$)/g ;\r\n\r\nfunction main(...keys){\r\n\r\n    let result = [] ;\r\n\r\n    for(let key of keys){\r\n\r\n        if(isString(key)){\r\n\r\n            key = key.replace(suffixRe , '') ;\r\n\r\n            if(key){\r\n\r\n                result.push(key) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result.join('.').trim() ;\r\n}\r\n\r\n\n    \n                    return function(...keys){\n    \n                        \n        if(!var_init_locked_1609121331383){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1609121331383 = true ;\n        }\n        \n    \n                        return main.call(this , ...keys) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.key.join"
  },
  "src::object.keys": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::object.keys(<object> data)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::object.key.join"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,join;\n    \n                    let var_init_locked_1609121331347;\n    \n                    \n\n                    /**\r\n * \r\n * 获取对象的键值组合\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import join from object.key.join\r\n * \r\n * @param {object} data 对象\r\n * \r\n * @return {array} 键值数组\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nfunction main(data){\r\n\r\n   return get_keys(data) ;\r\n}\r\n\r\nfunction get_keys(data , rootKey){\r\n\r\n    let result = [] ;\r\n\r\n    if(isObject(data)){\r\n\r\n        let keys = Object.keys(data) ;\r\n\r\n        for(let key of keys){\r\n\r\n            result.push(...get_keys(data[key] , join(rootKey , key))) ;\r\n        }\r\n    \r\n    }else if(rootKey){\r\n\r\n        result.push(rootKey) ;\r\n    }\r\n\r\n    return result ;\r\n}\r\n\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121331347){\n\n            isObject = include('src::is.object.simple');\njoin = include('src::object.key.join');\n\n            var_init_locked_1609121331347 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.keys"
  },
  "src::object.data.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::object.data.has(<mixed> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.data.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getName;\n    \n                    let var_init_locked_1609121331411;\n    \n                    \n\n                    function main(target , name){\n\n        \r\n/**\r\n * \r\n * 判断当前元素是否拥有指定的属性值\r\n * \r\n * @import getName from object.data.name\r\n * \r\n * @param {mixed} target 作用对象\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @return {boolean} 如果属性值存在则返回 true ，否则返回 false\r\n * \r\n */\r\n\r\nreturn target.hasOwnProperty(getName(name)) ;\r\n\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121331411){\n\n            getName = include('src::object.data.name');\n\n            var_init_locked_1609121331411 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.data.has"
  },
  "src::object.flat": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.flat(<object> data)",
    "standard": true,
    "importNames": [
      "src::object.key.join",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let join,isObject;\n    \n                    let var_init_locked_1609121331441;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 将对象扁平化处理\r\n * \r\n * @import join from object.key.join\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {object} data 对象\r\n * \r\n * @return {object} 扁平化后的对象 \r\n * \r\n */\r\n\r\nfunction main(data){\r\n\r\n    return flat(data) ;\r\n }\r\n \r\n function flat(data , rootKey){\r\n \r\n     let result = {} ;\r\n \r\n     if(isObject(data)){\r\n \r\n         let keys = Object.keys(data) ;\r\n \r\n         for(let key of keys){\r\n \r\n             Object.assign(result , flat(data[key] , join(rootKey , key))) ;\r\n         }\r\n     \r\n     }else if(rootKey){\r\n \r\n         result[rootKey] = data ;\r\n     }\r\n \r\n     return result ;\r\n}\r\n\r\n \n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121331441){\n\n            join = include('src::object.key.join');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121331441 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.flat"
  },
  "src::object.freeze": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::object.freeze(<object> data , <boolean> deep)",
    "standard": true,
    "importNames": [
      "src::is.object.simple",
      "src::is.array"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,isArray;\n    \n                    let var_init_locked_1609121331454;\n    \n                    \n\n                    /**\r\n * \r\n * 将对象进行冻结\r\n * \r\n * @param {object} data 作用对象\r\n * \r\n * @param {boolean} [deep = false] 是否深层遍历\r\n * \r\n * @return {object} 冻结后的对象\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n */\r\n\r\nfunction main(data , deep){\r\n\r\n    if((isObject(data) || isArray(data)) && !Object.isFrozen(data)){\r\n\r\n        if(deep){\r\n\r\n            let names = Object.keys(data) ;\r\n\r\n            for(let name of names){\r\n\r\n                main(data[name] , keep) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    return data ;\r\n}\r\n\r\n\n    \n                    return function(data , deep = false){\n    \n                        \n        if(!var_init_locked_1609121331454){\n\n            isObject = include('src::is.object.simple');\nisArray = include('src::is.array');\n\n            var_init_locked_1609121331454 = true ;\n        }\n        \n    \n                        return main.call(this , data , deep) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.freeze"
  },
  "src::object.map": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.map()",
    "standard": true,
    "importNames": [
      "src::object.set",
      "src::array.remove.index"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createSet,remove;\n    \n                    let var_init_locked_1609121331478;\n    \n                    let var_class_1609121331478;\n    \n                    \n\n                    let var_global_main_1609121331478 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121331478){\n\n            createSet = include('src::object.set');\nremove = include('src::array.remove.index');\n\n            \r\n/**\r\n * \r\n * 对象数组\r\n * \r\n * @import createSet from .set\r\n * \r\n * @import remove from array.remove.index\r\n * \r\n */\r\n\r\n class main{\r\n\r\n    constructor(){\r\n\r\n        let me = this ;\r\n\r\n        me.keys = createSet() ;\r\n\r\n        me.values = [] ;\r\n    }\r\n\r\n    get size(){\r\n\r\n        return this.keys.size ;\r\n    }\r\n\r\n    set(key , value){\r\n\r\n        let me = this,\r\n        {\r\n            keys,\r\n            values\r\n        } = me,\r\n        index = keys.indexOf(key);\r\n\r\n        if(index !== -1){\r\n\r\n            values[index] = value ;\r\n        \r\n        }else{\r\n\r\n            keys.add(key) ;\r\n\r\n            values.push(value) ;\r\n        }\r\n    }\r\n\r\n    get(key){\r\n\r\n        let {\r\n            keys,\r\n            values\r\n        } = this,\r\n        index = keys.indexOf(key);\r\n\r\n        if(index !== -1){\r\n\r\n            return values[index] ;\r\n        }\r\n    }\r\n\r\n    delete(key){\r\n\r\n        let {\r\n            keys,\r\n            values\r\n        } = this,\r\n        index = keys.indexOf(key);\r\n\r\n        if(index !== -1){\r\n\r\n            keys.deleteByIndex(index) ;\r\n\r\n            remove(values , index) ;\r\n        }\r\n    }\r\n\r\n    has(key){\r\n\r\n        return this.keys.has(key) ;\r\n    }\r\n\r\n    values(){\r\n\r\n        return Array.from(this.values) ;\r\n    }\r\n\r\n    forEach(fn , scope){\r\n\r\n        let {\r\n            keys,\r\n            values\r\n        } = this,\r\n        len = values.length ;\r\n\r\n        for(let i = 0 ; i < len ; i ++){\r\n\r\n            fn.call(scope , values[i] , keys.get(i)) ;\r\n        }\r\n    }\r\n }\n\n            var_class_1609121331478 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121331478 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::object.map' ;\n                }\n\n            } ;\n\n            main = var_class_1609121331478 ;\n        \nvar_global_main_1609121331478 = main;\n\n            var_init_locked_1609121331478 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121331478() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.map"
  },
  "src::object.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.set()",
    "standard": true,
    "importNames": [
      "src::object.flat",
      "src::array.remove.index",
      "src::object.keys"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let flat,remove,getKeys;\n    \n                    let var_init_locked_1609121331506;\n    \n                    let var_class_1609121331506;\n    \n                    \n\n                    let var_global_main_1609121331506 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121331506){\n\n            flat = include('src::object.flat');\nremove = include('src::array.remove.index');\ngetKeys = include('src::object.keys');\n\n            \r\n/**\r\n * \r\n * 实现一个对象 Set\r\n * \r\n * @import flat from .flat\r\n * \r\n * @import remove from array.remove.index\r\n * \r\n * @import getKeys from object.keys\r\n * \r\n */\r\n\r\n const {\r\n    keys:getKeys\r\n } = Object ;\r\n\r\nfunction find(value){\r\n\r\n    let findValues = flat(value),\r\n        findKeys = getKeys(findValues),\r\n        findLen = findKeys.length;\r\n\r\n    let {\r\n        data\r\n    } = this,\r\n    index = 0;\r\n\r\n    for(let {\r\n        values:currentValues,\r\n        keys:currentKeys,\r\n        len:currentLen\r\n    } of data){\r\n\r\n        if(findLen === currentLen){\r\n\r\n            let isMatch = true ;\r\n\r\n            for(let i = 0 ; i < findLen ; i ++){\r\n\r\n                let key = findKeys[i] ;\r\n\r\n                if(!currentKeys.includes(key)){\r\n\r\n                    isMatch = false ;\r\n\r\n                    break ;\r\n                }\r\n\r\n                if(findValues[key] !== currentValues[key]){\r\n\r\n                    isMatch = false ;\r\n\r\n                    break ;\r\n                }\r\n            }\r\n\r\n            if(isMatch){\r\n\r\n                return {\r\n                    index,\r\n                    value:data[index]\r\n                } ;\r\n            }\r\n\r\n            index ++ ;\r\n        }\r\n    }\r\n\r\n    return {\r\n        index:-1\r\n    } ;\r\n }\r\n\r\n class main{\r\n\r\n    constructor(){\r\n\r\n        this.data = [] ;\r\n    }\r\n\r\n    add(value){\r\n\r\n        let me = this,\r\n        {\r\n            data\r\n        } = me,\r\n        index = me.indexOf(value);\r\n\r\n        if(index === -1){\r\n\r\n            let insertValues = flat(value),\r\n                insertKeys = getKeys(insertValues);\r\n        \r\n            data.push({\r\n                keys:insertKeys,\r\n                len:insertKeys.length,\r\n                values:insertValues,\r\n                value\r\n            }) ;\r\n        }\r\n    }\r\n\r\n    indexOf(value){\r\n\r\n        let {\r\n            index\r\n        } = find.call(this , value) ;\r\n\r\n        return index ;\r\n    }\r\n\r\n    has(value){\r\n\r\n        return this.indexOf(value) !== -1 ;\r\n    }\r\n\r\n    get(index){\r\n\r\n        let {\r\n            data\r\n        } = this,\r\n        item = data[index];\r\n\r\n        if(item){\r\n\r\n            return item.value ;\r\n        }\r\n    }\r\n\r\n    get size(){\r\n\r\n        return this.data.length ;\r\n    }\r\n\r\n    delete(value){\r\n\r\n        let me = this,\r\n        {\r\n            data\r\n        } = me ;\r\n\r\n        me.deleteByIndex(me.indexOf(value)) ;\r\n    }\r\n\r\n    deleteByIndex(index){\r\n\r\n        let me = this,\r\n        {\r\n            data\r\n        } = me ;\r\n\r\n        remove(data , index) ;\r\n    }\r\n }\n\n            var_class_1609121331506 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121331506 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::object.set' ;\n                }\n\n            } ;\n\n            main = var_class_1609121331506 ;\n        \nvar_global_main_1609121331506 = main;\n\n            var_init_locked_1609121331506 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121331506() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.set"
  },
  "src::object.property.undefine": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.property.undefine(<object> target , <string> name)",
    "standard": true,
    "importNames": [
      "src::object.property.inner.name"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let innerName;\n    \n                    let var_init_locked_1609121331522;\n    \n                    \n\n                    function main(target , name){\n\n        /**\r\n * \r\n * 取消定义一个属性\r\n * \r\n * @import innerName from .inner.name\r\n * \r\n * @param {object} target 目标对象\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n */\r\n\r\n delete target[name] ;\r\n\r\n delete target[innerName(name)] ;\r\n\r\n\n\n    }\n    \n                    return function(target , name){\n    \n                        \n        if(!var_init_locked_1609121331522){\n\n            innerName = include('src::object.property.inner.name');\n\n            var_init_locked_1609121331522 = true ;\n        }\n        \n    \n                        return main.call(this , target , name) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.property.undefine"
  },
  "src::object.proxy.fly": {
    "meta": "code.meta.script.function",
    "signature": "<object.Proxy> src::object.proxy.fly(<mixed> target)",
    "standard": true,
    "importNames": [
      "src::object.proxy"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createProxy;\n    \n                    let var_init_locked_1609121331537;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 构建一个共享对象代理\r\n * \r\n * @import createProxy from object.proxy\r\n * \r\n * @param {mixed} target 需要代理的对象\r\n * \r\n * @return {object.Proxy} 代理\r\n * \r\n */\r\n\r\n let proxy ;\r\n\r\n function main(target){\r\n\r\n    if(!proxy){\r\n\r\n        proxy = createProxy() ;\r\n    }\r\n\r\n    proxy.target = target ;\r\n\r\n    return proxy ;\r\n }\n    \n                    return function(target){\n    \n                        \n        if(!var_init_locked_1609121331537){\n\n            createProxy = include('src::object.proxy');\n\n            var_init_locked_1609121331537 = true ;\n        }\n        \n    \n                        return main.call(this , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.proxy.fly"
  },
  "src::object.value.set.once": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::object.value.set.once(<object> target , <string> name , <Function> fn , <mixed> scope)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(target , name , fn , scope){\n\n        /**\r\n * \r\n * 如果设置的对象属性值存在，则不调用赋值函数\r\n * \r\n * @param {object} target 对象主体\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {Function} fn 赋值函数引用\r\n * \r\n * @param {mixed} scope 基于赋值函数的作用域引用\r\n * \r\n * @return {mixed} 对象属性值\r\n * \r\n */\r\n\r\nif(!target.hasOwnProperty(name)){\r\n\r\n    target[name] = fn.call(scope) ;\r\n\r\n}\r\n\r\nreturn target[name] ;\n\n    }\n    \n                    return function(target , name , fn , scope){\n    \n                        \n    \n                        return main.call(this , target , name , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.value.set.once"
  },
  "src::object.value.set": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::object.value.set(<object> target , <string> key , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::is.object",
      "src::string.split"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,split;\n    \n                    let var_init_locked_1609121331576;\n    \n                    \n\n                    /**\r\n * \r\n * 设置对象的属性值\r\n * \r\n * @import is.object\r\n * \r\n * @import split from string.split\r\n * \r\n * @param {object} target 目标对象\r\n * \r\n * @param {string} key 属性名称\r\n * \r\n * @param {mixed} value 属性值\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nconst splitRe = /\\./;\r\n\r\nfunction main(target , key , value){\r\n\r\n    if(splitRe.test(key)){\r\n\r\n        let keys = split(key , splitRe) ;\r\n    \r\n        key = keys.pop();\r\n    \r\n        for(let key of keys){\r\n    \r\n            let data = target[key] ;\r\n    \r\n            if(!isObject(data)){\r\n    \r\n                data = target[key] = {} ;\r\n            }\r\n    \r\n            target = data ;\r\n        }\r\n    \r\n        target[key] = value ;\r\n    \r\n    }else{\r\n    \r\n        target[key] = value ;\r\n    }\r\n}   \n    \n                    return function(target , key , value){\n    \n                        \n        if(!var_init_locked_1609121331576){\n\n            isObject = include('src::is.object');\nsplit = include('src::string.split');\n\n            var_init_locked_1609121331576 = true ;\n        }\n        \n    \n                        return main.call(this , target , key , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "object.value.set"
  },
  "src::class.name": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::class.name(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.object"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject;\n    \n                    let var_init_locked_1609121331614;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 获得类名称\r\n * \r\n * @import is.object\r\n * \r\n * @param {mixed} data 类对象\r\n * \r\n * @return {string} 类名称 \r\n * \r\n */\r\n\r\n if(isObject(data)){\r\n\r\n    return data.__ZBEE_CLASS_NAME__ ;\r\n }\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121331614){\n\n            isObject = include('src::is.object');\n\n            var_init_locked_1609121331614 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "class.name"
  },
  "src::date.format": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::date.format(<Date> date , <string> format)",
    "standard": true,
    "importNames": [],
    "dependentModules": {
      "date-and-time": "^0.11.0"
    },
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 日期时间格式化\r\n * \r\n * @param {Date} date 日期时间对象\r\n * \r\n * @param {string} [format = 'yyyy-mm-dd'] 日期时间格式化字符串\r\n * \r\n * @return {string} 根据格式化字符串输出的日期数据\r\n * \r\n * @require date-and-time\r\n *\r\n * @scoped\r\n *  \r\n */\r\n\r\nconst {\r\n    format:doFormat\r\n} = require('date-and-time') ;\r\n\r\nfunction main(date , format){\r\n\r\n    return doFormat(date , format) ;\r\n}\r\n\r\n\n    \n                    return function(date , format = 'yyyy-mm-dd'){\n    \n                        \n    \n                        return main.call(this , date , format) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.format"
  },
  "src::date.get": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.get({<number> year , <number> month , <number> day , <number> hours , <number> minutes , <number> seconds})",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121331655;\n    \n                    \n\n                    function main({year , month , day , hours , minutes , seconds}){\n\n        \r\n/**\r\n * \r\n * 获得日期对象\r\n * \r\n * @import is.defined\r\n * \r\n * @param {object} [config = {}] 日期配置\r\n * \r\n * @param {number} [config.year] 年份\r\n * \r\n * @param {number} [config.month] 月份\r\n * \r\n * @param {number} [config.day] 日\r\n * \r\n * @param {number} [config.hours] 小时\r\n * \r\n * @param {number} [config.minutes] 分钟\r\n * \r\n * @param {number} [config.seconds] 秒\r\n * \r\n * @return {Date} 日期对象 \r\n * \r\n */\r\n\r\n let data = new Date() ;\r\n\r\n data.setMonth(0) ;\r\n\r\n data.setDate(1) ;\r\n\r\n data.setMilliseconds(0) ;\r\n\r\n if(isDefined(year)){\r\n\r\n   data.setFullYear(year) ;\r\n }\r\n\r\n if(isDefined(month)){\r\n\r\n   data.setMonth(month - 1) ;\r\n }\r\n\r\n if(isDefined(day)){\r\n\r\n   data.setDate(day) ;\r\n \r\n }\r\n\r\n if(isDefined(hours)){\r\n\r\n   data.setHours(hours) ;\r\n }\r\n\r\n if(isDefined(minutes)){\r\n\r\n   data.setMinutes(minutes) ;\r\n }\r\n\r\n if(isDefined(seconds)){\r\n\r\n   data.setSeconds(seconds) ;\r\n }\r\n\r\n return data ;\r\n\r\n\n\n    }\n    \n                    return function({year , month , day , hours , minutes , seconds} = {}){\n    \n                        \n        if(!var_init_locked_1609121331655){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121331655 = true ;\n        }\n        \n    \n                        return main.call(this , {year , month , day , hours , minutes , seconds}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.get"
  },
  "src::date.list": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::date.list(<Date> startDate , <Date> endDate , <number> count , <boolean> isNumber)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(startDate , endDate , count , isNumber){\n\n        \r\n/**\r\n * \r\n * 生成日期列表\r\n * \r\n * @param {Date} startDate 起始日期\r\n * \r\n * @param {Date} endDate 终止日期\r\n * \r\n * @param {number} count 生成个数\r\n * \r\n * @param {boolean} [isNumber = true] 是否以数字方式取代日期对象\r\n * \r\n * @return {array} 日期列表\r\n * \r\n */\r\n\r\nlet startTime = startDate.getTime(),\r\nendTime = endDate.getTime(),\r\ncountTime = endTime - startTime ;\r\n\r\nif(countTime % count !== 0){\r\n\r\n   return [] ;\r\n}\r\n\r\nlet time = countTime / count ;\r\n\r\nif(time === 0){\r\n\r\n   return [] ;\r\n}\r\n\r\nlet result = [];\r\n\r\nfor(let i = startTime ; i <= endTime ; i += time){\r\n\r\n   result.push(i) ;\r\n}\r\n\r\nif(!isNumber){\r\n\r\nfor(let i = 0 ; i < count ; i ++){\r\n\r\n   result[i] = new Date(result[i]) ;\r\n}\r\n}\r\n\r\nreturn result ;\n\n    }\n    \n                    return function(startDate , endDate , count , isNumber = true){\n    \n                        \n    \n                        return main.call(this , startDate , endDate , count , isNumber) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.list"
  },
  "src::date.next.week": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.next.week(<Date|object> date)",
    "standard": true,
    "importNames": [
      "src::date.next"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let next;\n    \n                    let var_init_locked_1609121331692;\n    \n                    \n\n                    function main(date){\n\n        \r\n/**\r\n * \r\n * 基于当前日期的下一周的日期\r\n * \r\n * @import next from date.next\r\n * \r\n * @param {Date | object} date 基准日期\r\n * \r\n * @return {Date} 移过的日期 \r\n * \r\n */\r\n\r\n return next(date , 7) ;\r\n\r\n \n\n    }\n    \n                    return function(date){\n    \n                        \n        if(!var_init_locked_1609121331692){\n\n            next = include('src::date.next');\n\n            var_init_locked_1609121331692 = true ;\n        }\n        \n    \n                        return main.call(this , date) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.next.week"
  },
  "src::date.next": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.next(<Date|object> date , <number> step)",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::date.get.properties",
      "src::is.date"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,getProperty,isDate;\n    \n                    let var_init_locked_1609121331708;\n    \n                    \n\n                    function main(date , step){\n\n        /**\r\n * \r\n * 基于当前日历向后移一次\r\n * \r\n * @import get from date.get\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import is.date\r\n * \r\n * @param {Date | object} date 基准日期\r\n * \r\n * @param {number} [step = 1] 步长\r\n * \r\n * @return {Date} 移过的日期 \r\n * \r\n */\r\n\r\n if(isDate(date)){\r\n\r\n   date = getProperty(date , [\r\n     'year',\r\n     'month',\r\n     'day'\r\n   ]) ;\r\n }\r\n\r\n let {\r\n   day,\r\n   ...other\r\n } = date ;\r\n\r\n day += step ;\r\n\r\n return get({\r\n   day,\r\n   ...other\r\n }) ;\n\n    }\n    \n                    return function(date , step = 1){\n    \n                        \n        if(!var_init_locked_1609121331708){\n\n            get = include('src::date.get');\ngetProperty = include('src::date.get.properties');\nisDate = include('src::is.date');\n\n            var_init_locked_1609121331708 = true ;\n        }\n        \n    \n                        return main.call(this , date , step) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.next"
  },
  "src::date.prev.week": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.prev.week(<Date|object> date)",
    "standard": true,
    "importNames": [
      "src::date.prev"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prev;\n    \n                    let var_init_locked_1609121331727;\n    \n                    \n\n                    function main(date){\n\n        \r\n/**\r\n * \r\n * 基于当前日期的上一周的日期\r\n * \r\n * @import prev from date.prev\r\n * \r\n * @param {Date | object} date 基准日期\r\n * \r\n * @return {Date} 移过的日期 \r\n * \r\n */\r\n\r\nreturn prev(date , 7) ;\r\n\n\n    }\n    \n                    return function(date){\n    \n                        \n        if(!var_init_locked_1609121331727){\n\n            prev = include('src::date.prev');\n\n            var_init_locked_1609121331727 = true ;\n        }\n        \n    \n                        return main.call(this , date) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.prev.week"
  },
  "src::date.prev": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::date.prev(<Date> date , <number> step)",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::date.get.properties",
      "src::is.date"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,getProperty,isDate;\n    \n                    let var_init_locked_1609121331743;\n    \n                    \n\n                    function main(date , step){\n\n        /**\r\n * \r\n * 基于当前日历向前移一次\r\n * \r\n * @import get from date.get\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import is.date\r\n * \r\n * @param {Date} date 基准日期\r\n * \r\n * @param {number} [step = 1] 步长\r\n * \r\n * @return {Date} 移过的日期 \r\n * \r\n */\r\n\r\nif(isDate(date)){\r\n\r\n   date = getProperty(date , [\r\n      'year',\r\n      'month',\r\n      'day'\r\n   ]) ;\r\n }\r\n\r\n let {\r\n   day,\r\n   ...other\r\n } = date ;\r\n\r\n day -= step ;\r\n\r\n return get({\r\n   day,\r\n   ...other\r\n }) ;\n\n    }\n    \n                    return function(date , step = 1){\n    \n                        \n        if(!var_init_locked_1609121331743){\n\n            get = include('src::date.get');\ngetProperty = include('src::date.get.properties');\nisDate = include('src::is.date');\n\n            var_init_locked_1609121331743 = true ;\n        }\n        \n    \n                        return main.call(this , date , step) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "date.prev"
  },
  "src::json.clone": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::json.clone(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 拷贝\r\n * \r\n * @param {mixed} data 需要深拷贝的数据\r\n * \r\n * @return {mixed} 拷贝后的数据\r\n * \r\n */\r\n\r\n const {\r\n    stringify,\r\n    parse\r\n } = JSON ;\r\n\r\n return parse(stringify(data)) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "json.clone"
  },
  "src::json.convert": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::json.convert(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 将指定数据转换成简单的数据\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {mixed} 简单数据 \r\n * \r\n */\r\n\r\n try{\r\n\r\n    return JSON.parse(JSON.stringify(data)) ;\r\n\r\n }catch(err){\r\n\r\n\r\n }\r\n\r\n return {} ;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "json.convert"
  },
  "src::json.parse": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::json.parse(<string> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 将 JSON 字符串转换成 JSON 数据\r\n * \r\n * @param {string} data JSON 字符串\r\n * \r\n * @return {mixed} JSON 数据 \r\n * \r\n */\r\n\r\ntry{\r\n\r\n    return JSON.parse(data) ;\r\n\r\n }catch(err){\r\n\r\n\r\n }\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "json.parse"
  },
  "src::json.stringify": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::json.stringify(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * JSON 序列化\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n * @return {string} JSON 序列化后的字符串 \r\n * \r\n */\r\n\r\n  try{\r\n  \r\n    return JSON.stringify(data);\r\n  \r\n  }catch(e){\r\n  \r\n  }\r\n\r\n  return false;\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "json.stringify"
  },
  "src::math.point.rect.anchor": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.point.rect.anchor({<number> x , <number> y} , {<number> width , <number> height} , <string|array> anchor)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::math.point.rect.anchor"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,getAnchor;\n    \n                    let var_init_locked_1609121331850;\n    \n                    \n\n                    function main({x , y} , {width , height} , anchor){\n\n        \r\n/**\r\n * \r\n * 根据坐标获得相应方位的坐标\r\n * \r\n * @import is.array\r\n * \r\n * @import getAnchor from math.point.rect.anchor\r\n * \r\n * @param {object} xy 坐标\r\n * \r\n * @param {number} xy.x 横坐标\r\n * \r\n * @param {number} xy.y 纵坐标\r\n * \r\n * @param {object} size 尺寸\r\n * \r\n * @param {number} size.width 宽度\r\n * \r\n * @param {number} size.height 高度\r\n * \r\n * @param {string|array} [anchor='tl'] 方位\r\n * \r\n * @return {object} 方位坐标\r\n * \r\n */\r\n\r\nif(isArray(anchor)){\r\n\r\n    let result = [],\r\n        xy = {\r\n            x,\r\n            y\r\n        },\r\n        size = {\r\n            width,\r\n            height\r\n        };\r\n\r\n    for(let item of anchor){\r\n\r\n        result.push(getAnchor(xy , size , item)) ;\r\n    }\r\n\r\n    return result ;\r\n\r\n}else{\r\n\r\n    switch(anchor){\r\n\r\n        case 'tl':\r\n    \r\n            return {\r\n                x,\r\n                y\r\n            } ;\r\n    \r\n        case 't':\r\n    \r\n            return {\r\n                x:x + width / 2,\r\n                y \r\n            } ;\r\n    \r\n        case 'tr':\r\n    \r\n            return {\r\n                x: x + width,\r\n                y\r\n            } ;\r\n    \r\n        case 'r':\r\n    \r\n            return {\r\n                x: x + width,\r\n                y: y + height / 2\r\n            } ;\r\n    \r\n        case 'br':\r\n    \r\n            return {\r\n                x: x + width,\r\n                y : y + height\r\n            } ;\r\n    \r\n        case 'b':\r\n    \r\n            return {\r\n                x: x + width / 2,\r\n                y: y + height\r\n            } ;\r\n    \r\n        case 'bl':\r\n    \r\n            return {\r\n                x,\r\n                y: y + height\r\n            } ;\r\n    \r\n        case 'l':\r\n    \r\n            return {\r\n                x,\r\n                y: y + height / 2\r\n            } ;\r\n    \r\n        case 'c':\r\n    \r\n            return {\r\n                x : x + width / 2,\r\n                y: y + height / 2\r\n            } ;\r\n    }\r\n}\r\n\r\n\n\n    }\n    \n                    return function({x , y} , {width , height} , anchor = 'tl'){\n    \n                        \n        if(!var_init_locked_1609121331850){\n\n            isArray = include('src::is.array');\ngetAnchor = include('src::math.point.rect.anchor');\n\n            var_init_locked_1609121331850 = true ;\n        }\n        \n    \n                        return main.call(this , {x , y} , {width , height} , anchor) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.point.rect.anchor"
  },
  "src::math.point.rect.anchorBy": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.point.rect.anchorBy({<number> x , <number> y} , {<number> width , <number> height} , <string> anchor)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main({x , y} , {width , height} , anchor){\n\n        \r\n/**\r\n * \r\n * 根据方位的坐标推算出真正的坐标\r\n * \r\n * @param {object} xy 坐标\r\n * \r\n * @param {number} xy.x 横坐标\r\n * \r\n * @param {number} xy.y 纵坐标\r\n * \r\n * @param {object} size 尺寸\r\n * \r\n * @param {number} size.width 宽度\r\n * \r\n * @param {number} size.height 高度\r\n * \r\n * @param {string} [anchor='tl'] 方位\r\n * \r\n * @return {object} 坐标\r\n * \r\n */\r\n\r\nswitch(anchor){\r\n\r\n    case 'tl':\r\n\r\n        return {\r\n            x,\r\n            y\r\n        } ;\r\n\r\n    case 't':\r\n\r\n        return {\r\n            x:x - width / 2,\r\n            y \r\n        } ;\r\n\r\n    case 'tr':\r\n\r\n        return {\r\n            x: x - width,\r\n            y\r\n        } ;\r\n\r\n    case 'r':\r\n\r\n        return {\r\n            x: x - width,\r\n            y: y - height / 2\r\n        } ;\r\n\r\n    case 'br':\r\n\r\n        return {\r\n            x: x - width,\r\n            y : y - height\r\n        } ;\r\n\r\n    case 'b':\r\n\r\n        return {\r\n            x: x - width / 2,\r\n            y: y - height\r\n        } ;\r\n\r\n    case 'bl':\r\n\r\n        return {\r\n            x,\r\n            y: y - height\r\n        } ;\r\n\r\n    case 'l':\r\n\r\n        return {\r\n            x,\r\n            y: y - height / 2\r\n        } ;\r\n\r\n    case 'c':\r\n\r\n        return {\r\n            x : x - width / 2,\r\n            y: y - height / 2\r\n        } ;\r\n}\n\n    }\n    \n                    return function({x , y} , {width , height} , anchor = 'tl'){\n    \n                        \n    \n                        return main.call(this , {x , y} , {width , height} , anchor) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.point.rect.anchorBy"
  },
  "src::math.points.circle.border": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::math.points.circle.border({<number> x , <number> y} , <number> radius , <number> startValue , <number> step)",
    "standard": true,
    "importNames": [
      "src::math.degree2radian"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let convert;\n    \n                    let var_init_locked_1609121331894;\n    \n                    \n\n                    function main({x , y} , radius , startValue , step){\n\n        \r\n/**\r\n * \r\n * 计算圆心坐标边上的一系列坐标集合\r\n * \r\n * @import convert from math.degree2radian\r\n * \r\n * @param {object} xy 圆形坐标\r\n * \r\n * @param {number} xy.x 圆形横坐标\r\n * \r\n * @param {number} xy.y 圆形纵坐标\r\n * \r\n * @param {number} radius 圆的半径\r\n * \r\n * @param {number} [startValue = 0] 起始度数值\r\n * \r\n * @param {number} [step = 1] 圆边上一系列坐标间隔度数的步长\r\n * \r\n * @return {array} 圆边上一系列坐标集合 \r\n * \r\n */\r\n\r\nconst {\r\n    sin,\r\n    cos\r\n} = Math ;\r\n\r\nlet points = [] ;\r\n\r\nfor(let degree = startValue ; degree <= 360 ; degree += step){\r\n\r\n    let radian = convert(degree) ;\r\n\r\n    points.push({\r\n        degree,\r\n        x:x + cos(radian) * radius,\r\n        y:y + sin(radian) * radius\r\n    }) ;\r\n}\r\n\r\nreturn points ;\n\n    }\n    \n                    return function({x , y} , radius , startValue = 0 , step = 1){\n    \n                        \n        if(!var_init_locked_1609121331894){\n\n            convert = include('src::math.degree2radian');\n\n            var_init_locked_1609121331894 = true ;\n        }\n        \n    \n                        return main.call(this , {x , y} , radius , startValue , step) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.points.circle.border"
  },
  "src::math.points.ellipse.border": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::math.points.ellipse.border(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 函数实现说明\r\n * \r\n * @param {mixed} data 参数说明\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n // 代码实现\r\n\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.points.ellipse.border"
  },
  "src::math.radian2degree": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.radian2degree(<number> radian)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(radian){\n\n        \r\n/**\r\n * \r\n * 将弧度转换成角度\r\n * \r\n * @param {number} radian 弧度\r\n * \r\n * @return {number} 角度\r\n * \r\n */\r\n\r\nreturn 180 / Math.PI * radian ;\r\n\r\n\n\n    }\n    \n                    return function(radian){\n    \n                        \n    \n                        return main.call(this , radian) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.radian2degree"
  },
  "src::math.random.boolean": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::math.random.boolean()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 生成随机的布尔型值\r\n * \r\n * @return {boolean} 返回随机布尔值 \r\n * \r\n */\r\n\r\nreturn Math.random() >= 0.5 ;\r\n\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.random.boolean"
  },
  "src::math.region.contains.x": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::math.region.contains.x(<object> region , <mixed> position)",
    "standard": true,
    "importNames": [
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1610693101164;\n    \n                    \n\n                    function main(region , position){\n\n        \r\n/**\r\n * \r\n * 判断横坐标是否在范围之内\r\n * \r\n * @import get from ..get\r\n * \r\n * @param {object} region 参照范围\r\n * \r\n * @param {mixed} position 位置\r\n * \r\n * @return {boolean}  如果指定位置在指定区域之内则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nlet {\r\n    left,\r\n    right\r\n } = region,\r\n {\r\n    left:positionOLeft,\r\n    right:positionRight\r\n } = get(position);\r\n\r\n return positionOLeft >= left && positionRight <= right ;\n\n    }\n    \n                    return function(region , position){\n    \n                        \n        if(!var_init_locked_1610693101164){\n\n            get = include('src::math.region.get');\n\n            var_init_locked_1610693101164 = true ;\n        }\n        \n    \n                        return main.call(this , region , position) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.contains.x"
  },
  "src::math.region.from": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.from(<object> data)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121331991;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 将数据转换成区域类型的对象\r\n * \r\n * @import is.defined\r\n * \r\n * @param {object} data 数据\r\n * \r\n * @return {object} 区域类型的数据 \r\n * \r\n */\r\n\r\n let {\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    top,\r\n    left,\r\n    bottom,\r\n    right\r\n } = data,\r\n {\r\n     length\r\n } = Object.keys(data);\r\n\r\n if(isDefined(x) && isDefined(y) && isDefined(width) && isDefined(height)){\r\n\r\n    return {\r\n        top:y,\r\n        left:x,\r\n        right:x + width,\r\n        bottom:y + height\r\n    } ;\r\n\r\n }else if(isDefined(x) && isDefined(y) && length === 2){\r\n\r\n    return {\r\n        top:y,\r\n        right:x,\r\n        left:x,\r\n        bottom:y\r\n    } ;\r\n\r\n }\r\n\r\n return {\r\n    top,\r\n    right,\r\n    bottom,\r\n    left\r\n} ;\r\n\r\n\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121331991){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121331991 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.from"
  },
  "src::math.region.get": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.get(<object> data)",
    "standard": true,
    "importNames": [
      "src::is.object",
      "src::math.region.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isObject,from;\n    \n                    let var_init_locked_1610693101190;\n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 获取范围对象\r\n * \r\n * @import is.object\r\n * \r\n * @import from from .from\r\n * \r\n * @param {object} data 拥有范围信息的对象\r\n * \r\n * @return {object} 如果给定对象拥有范围对象的基本属性则直接返回该对象，否则则进行范围对象转换 \r\n * \r\n */\r\n\r\n if(isObject(data) &&　'top' in data && 'bottom' in data && 'left' in data && 'right' in data && Object.keys(data).length === 4){\r\n\r\n    return data ;\r\n }\r\n\r\n return from(data) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1610693101190){\n\n            isObject = include('src::is.object');\nfrom = include('src::math.region.from');\n\n            var_init_locked_1610693101190 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.get"
  },
  "src::math.region.contains.y": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::math.region.contains.y(<object> region , <mixed> position)",
    "standard": true,
    "importNames": [
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1610693101211;\n    \n                    \n\n                    function main(region , position){\n\n        \r\n/**\r\n * \r\n * 判断纵坐标是否在范围之内\r\n * \r\n * @import get from ..get\r\n * \r\n * @param {object} region 参照范围\r\n * \r\n * @param {mixed} position 位置\r\n * \r\n * @return {boolean}  如果指定位置在指定区域之内则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n \r\nlet {\r\n    top,\r\n    bottom\r\n } = region,\r\n {\r\n    top:positionTop,\r\n    bottom:positionBottom\r\n } = get(position);\r\n\r\n return positionTop >= top && positionBottom <= bottom ;\n\n    }\n    \n                    return function(region , position){\n    \n                        \n        if(!var_init_locked_1610693101211){\n\n            get = include('src::math.region.get');\n\n            var_init_locked_1610693101211 = true ;\n        }\n        \n    \n                        return main.call(this , region , position) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.contains.y"
  },
  "src::math.region.contains": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::math.region.contains(<object> region , <mixed> position)",
    "standard": true,
    "importNames": [
      "src::math.region.contains.y",
      "src::math.region.contains.x",
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let containsY,containsX,get;\n    \n                    let var_init_locked_1610693101234;\n    \n                    \n\n                    function main(region , position){\n\n        \r\n/**\r\n * \r\n * 判断位置是否在指定区域之内\r\n * \r\n * @import containsY from .contains.y\r\n * \r\n * @import containsX from .contains.x\r\n * \r\n * @import get from .get\r\n * \r\n * @param {object} region 参照范围\r\n * \r\n * @param {mixed} position 位置\r\n * \r\n * @return {boolean}  如果指定位置在指定区域之内则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n region = get(region) ;\r\n\r\n position = get(position) ;\r\n\r\n return containsX(region , position) && containsY(region , position);\n\n    }\n    \n                    return function(region , position){\n    \n                        \n        if(!var_init_locked_1610693101234){\n\n            containsY = include('src::math.region.contains.y');\ncontainsX = include('src::math.region.contains.x');\nget = include('src::math.region.get');\n\n            var_init_locked_1610693101234 = true ;\n        }\n        \n    \n                        return main.call(this , region , position) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.contains"
  },
  "src::math.region.height": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.region.height(<object> region)",
    "standard": true,
    "importNames": [
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1610693101262;\n    \n                    \n\n                    function main(region){\n\n        \r\n/**\r\n * \r\n * 获得方位高度\r\n * \r\n * @import get from .get\r\n * \r\n * @param {object} region 范围\r\n * \r\n * @return {number} 宽度值 \r\n * \r\n */\r\n\r\n let {\r\n    bottom,\r\n    top\r\n } = get(region) ;\r\n\r\nreturn bottom - top ;\n\n    }\n    \n                    return function(region){\n    \n                        \n        if(!var_init_locked_1610693101262){\n\n            get = include('src::math.region.get');\n\n            var_init_locked_1610693101262 = true ;\n        }\n        \n    \n                        return main.call(this , region) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.height"
  },
  "src::math.region.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::math.region.move(<object> target , {<number> x , <number> y})",
    "standard": true,
    "importNames": [
      "src::math.region.width",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let width,height;\n    \n                    let var_init_locked_1609121332069;\n    \n                    \n\n                    function main(target , {x , y}){\n\n        \r\n/**\r\n * \r\n * 移动\r\n * \r\n * @import width from .width\r\n * \r\n * @import height from .height\r\n * \r\n * @param {object} target 目标范围\r\n * \r\n * @param {object} xy 坐标\r\n * \r\n * @param {number} [xy.x] 横坐标\r\n * \r\n * @param {number} [xy.y] 纵坐标\r\n * \r\n */\r\n\r\nlet {\r\n    left,\r\n    right,\r\n    top,\r\n    bottom\r\n } = target;\r\n\r\nif(x){\r\n\r\n    left += x ;\r\n\r\n    right = left + width(target) ;\r\n}\r\n\r\nif(y){\r\n\r\n    top += y ;\r\n\r\n    bottom = top + height(target) ;\r\n}\r\n\r\nreturn {\r\n    left,\r\n    right,\r\n    top,\r\n    bottom\r\n} ;\n\n    }\n    \n                    return function(target , {x , y}){\n    \n                        \n        if(!var_init_locked_1609121332069){\n\n            width = include('src::math.region.width');\nheight = include('src::math.region.height');\n\n            var_init_locked_1609121332069 = true ;\n        }\n        \n    \n                        return main.call(this , target , {x , y}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.move"
  },
  "src::math.region.width": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.region.width(<object> region)",
    "standard": true,
    "importNames": [
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1610693101284;\n    \n                    \n\n                    function main(region){\n\n        \r\n/**\r\n * \r\n * 获得方位高度\r\n * \r\n * @import get from .get\r\n * \r\n * @param {object} region 范围\r\n * \r\n * @return {number} 高度值 \r\n * \r\n */\r\n\r\n let {\r\n    right,\r\n    left\r\n } = get(region) ;\r\n\r\n return right - left ;\n\n    }\n    \n                    return function(region){\n    \n                        \n        if(!var_init_locked_1610693101284){\n\n            get = include('src::math.region.get');\n\n            var_init_locked_1610693101284 = true ;\n        }\n        \n    \n                        return main.call(this , region) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.width"
  },
  "src::math.region.outOfBoundOffset.x": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.region.outOfBoundOffset.x(<object> region , <number> x)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(region , x){\n\n        \r\n/**\r\n * \r\n * 获取横坐标超出范围的偏移植\r\n * \r\n * @param {object} region 范围\r\n * \r\n * @param {number} x 横坐标 \r\n * \r\n * @return {number} 偏移植\r\n * \r\n */\r\n\r\nlet {\r\n   left,\r\n   right\r\n} = region;\r\n\r\nif (x <= left) {\r\n\r\n   return left - x;\r\n\r\n}else if (x >= right) {\r\n\r\n   return right - x;\r\n\r\n}\r\n\r\nreturn 0;\n\n    }\n    \n                    return function(region , x){\n    \n                        \n    \n                        return main.call(this , region , x) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.outOfBoundOffset.x"
  },
  "src::math.region.outOfBoundOffset.y": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.region.outOfBoundOffset.y(<object> region , <number> y)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(region , y){\n\n        \r\n/**\r\n * \r\n * 获取纵坐标超出范围的偏移植\r\n * \r\n * @param {object} region 范围\r\n * \r\n * @param {number} y 纵坐标 \r\n * \r\n * @return {number} 偏移植\r\n * \r\n */\r\n\r\nlet {\r\n    top,\r\n    bottom\r\n} = region ;\r\n\r\nif (y <= top) {\r\n\r\n    return top - y;\r\n\r\n}else if (y >= bottom) {\r\n\r\n    return bottom - y;\r\n\r\n}\r\n\r\nreturn 0;\n\n    }\n    \n                    return function(region , y){\n    \n                        \n    \n                        return main.call(this , region , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.outOfBoundOffset.y"
  },
  "src::math.region.outOfBoundOffset": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.outOfBoundOffset(<object> baseRegion , {<number> left , <number> right , <number> top , <number> bottom})",
    "standard": true,
    "importNames": [
      "src::math.region.outOfBoundOffset.x",
      "src::math.region.outOfBoundOffset.y"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getOutOfBoundOffsetX,getOutOfBoundOffsetY;\n    \n                    let var_init_locked_1609121332145;\n    \n                    \n\n                    function main(baseRegion , {left , right , top , bottom}){\n\n        \r\n/**\r\n * \r\n * 获取范围超出另外一个范围的偏移植\r\n * \r\n * @import getOutOfBoundOffsetX from  .outOfBoundOffset.x\r\n * \r\n * @import getOutOfBoundOffsetY from .outOfBoundOffset.y\r\n * \r\n * @param {object} baseRegion 参照范围\r\n * \r\n * @param {object} region 范围\r\n * \r\n * @param {number} region.left 范围左\r\n * \r\n * @param {number} region.right  范围右\r\n * \r\n * @param {number} region.top 范围上\r\n * \r\n * @param {number} region.bottom 范围下\r\n * \r\n * @return {object} 偏移植\r\n * \r\n */\r\n\r\n const {\r\n    abs\r\n } = Math ;\r\n\r\nleft = getOutOfBoundOffsetX(baseRegion , left) ;\r\n\r\nright = getOutOfBoundOffsetX(baseRegion , right) ;\r\n\r\nif(abs(left) < abs(right)){\r\n\r\n   left = right ;\r\n}\r\n\r\ntop = getOutOfBoundOffsetY(baseRegion , top) ;\r\n\r\nbottom = getOutOfBoundOffsetY(baseRegion , bottom) ;\r\n\r\nif(abs(top) < abs(bottom)){\r\n\r\n   top = bottom ;\r\n}\r\n\r\nreturn {\r\n   x:left,\r\n   y:top\r\n} ;\n\n    }\n    \n                    return function(baseRegion , {left , right , top , bottom}){\n    \n                        \n        if(!var_init_locked_1609121332145){\n\n            getOutOfBoundOffsetX = include('src::math.region.outOfBoundOffset.x');\ngetOutOfBoundOffsetY = include('src::math.region.outOfBoundOffset.y');\n\n            var_init_locked_1609121332145 = true ;\n        }\n        \n    \n                        return main.call(this , baseRegion , {left , right , top , bottom}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.outOfBoundOffset"
  },
  "src::math.region.scale.init.out": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::math.region.scale.init.out(<object> container , <object> target)",
    "standard": true,
    "importNames": [
      "src::math.region.width",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let width,height;\n    \n                    let var_init_locked_1609121332163;\n    \n                    \n\n                    function main(container , target){\n\n        \r\n/**\r\n * \r\n * @import width from ....width\r\n * \r\n * @import height from ....height\r\n * \r\n * @param {object} container 容器范围\r\n * \r\n * @param {object} target 目标范围\r\n * \r\n */\r\n\r\nconst targetWidth = width(target), \r\n    targetHeight = height(target),\r\n    deltaWidth = width(container) - targetWidth,\r\n    deltaHeight = height(container) - targetHeight;\r\n\r\nif(deltaWidth >= 0 && deltaHeight >= 0){\r\n\r\n    return 1 ;\r\n}\r\n\r\nif(deltaWidth < deltaHeight){\r\n\r\n    return 1 + deltaWidth / targetWidth ;\r\n}\r\n\r\nreturn 1 + deltaHeight / targetHeight ;\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n \n\n    }\n    \n                    return function(container , target){\n    \n                        \n        if(!var_init_locked_1609121332163){\n\n            width = include('src::math.region.width');\nheight = include('src::math.region.height');\n\n            var_init_locked_1609121332163 = true ;\n        }\n        \n    \n                        return main.call(this , container , target) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.scale.init.out"
  },
  "src::math.region.translate": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::math.region.translate(<object> region , {<number> x , <number> y})",
    "standard": true,
    "importNames": [
      "src::math.region.width",
      "src::math.region.height",
      "src::math.region.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let width,height,get;\n    \n                    let var_init_locked_1610693101310;\n    \n                    \n\n                    function main(region , {x , y}){\n\n        \r\n/**\r\n * \r\n * 平移\r\n * \r\n * @import width from .width\r\n * \r\n * @import height from .height\r\n * \r\n * @import get from .get\r\n * \r\n * @param {object} region 目标范围\r\n * \r\n * @param {object} xy 坐标\r\n * \r\n * @param {number} [xy.x] 横坐标\r\n * \r\n * @param {number} [xy.y] 纵坐标\r\n * \r\n */\r\n\r\n region = get(region) ;\r\n\r\nlet {\r\n    left,\r\n    right,\r\n    top,\r\n    bottom\r\n } = region;\r\n\r\nif(x){\r\n\r\n    left = x ;\r\n\r\n    right = left + width(region) ;\r\n}\r\n\r\nif(y){\r\n\r\n    top = y ;\r\n\r\n    bottom = top + height(region) ;\r\n}\r\n\r\nreturn {\r\n    left,\r\n    right,\r\n    top,\r\n    bottom\r\n} ;\n\n    }\n    \n                    return function(region , {x , y}){\n    \n                        \n        if(!var_init_locked_1610693101310){\n\n            width = include('src::math.region.width');\nheight = include('src::math.region.height');\nget = include('src::math.region.get');\n\n            var_init_locked_1610693101310 = true ;\n        }\n        \n    \n                        return main.call(this , region , {x , y}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.translate"
  },
  "src::math.region.xy.center": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::math.region.xy.center(<object> region , <object> xy)",
    "standard": true,
    "importNames": [
      "src::math.region.get",
      "src::math.region.from",
      "src::math.region.width",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,from,getWidth,getHeight;\n    \n                    let var_init_locked_1610693101335;\n    \n                    \n\n                    function main(region , xy){\n\n        \r\n/**\r\n * \r\n * 计算中心点坐标\r\n * \r\n * @import get from ..get\r\n * \r\n * @import from from ..from\r\n * \r\n * @import getWidth from ..width\r\n * \r\n * @import getHeight from ..height\r\n * \r\n * @param {object} region 方位信息\r\n * \r\n * @param {object} [xy] 需要设置的中心坐标\r\n * \r\n * @return {mixed} 坐标或者范围本身 \r\n * \r\n */\r\n\r\n region = get(region) ;\r\n\r\nlet {\r\n    left,\r\n    top\r\n} = region,\r\nwidth = getWidth(region),\r\nheight = getHeight(region);\r\n\r\n if(!xy){\r\n\r\n    return {\r\n        x:left + width / 2,\r\n        y:top + height / 2\r\n    } ;\r\n\r\n }\r\n\r\nlet {\r\n    x,\r\n    y\r\n} = xy ;\r\n\r\nreturn from({\r\n    x:x - width / 2,\r\n    y:y - height / 2,\r\n    width,\r\n    height\r\n}) ;\r\n\r\n\n\n    }\n    \n                    return function(region , xy){\n    \n                        \n        if(!var_init_locked_1610693101335){\n\n            get = include('src::math.region.get');\nfrom = include('src::math.region.from');\ngetWidth = include('src::math.region.width');\ngetHeight = include('src::math.region.height');\n\n            var_init_locked_1610693101335 = true ;\n        }\n        \n    \n                        return main.call(this , region , xy) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.xy.center"
  },
  "src::math.region.xy.left": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.xy.left(<object> region)",
    "standard": true,
    "importNames": [
      "src::math.region.get",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,height;\n    \n                    let var_init_locked_1610693101359;\n    \n                    \n\n                    function main(region){\n\n        \r\n/**\r\n * \r\n * 计算左边坐标\r\n * \r\n * @import get from ..get\r\n * \r\n * @import height from ..height\r\n * \r\n * @param {object} region 配置\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\n region = get(region) ;\r\n\r\nlet {\r\n    top,\r\n    left\r\n} = region ;\r\n\r\nreturn {\r\n    x:left,\r\n    y:top + height(region) / 2\r\n} ;\r\n\n\n    }\n    \n                    return function(region){\n    \n                        \n        if(!var_init_locked_1610693101359){\n\n            get = include('src::math.region.get');\nheight = include('src::math.region.height');\n\n            var_init_locked_1610693101359 = true ;\n        }\n        \n    \n                        return main.call(this , region) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.xy.left"
  },
  "src::math.region.xy.right": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.xy.right(<object> region)",
    "standard": true,
    "importNames": [
      "src::math.region.get",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,height;\n    \n                    let var_init_locked_1610693101391;\n    \n                    \n\n                    function main(region){\n\n        \r\n/**\r\n * \r\n * 计算右边坐标\r\n * \r\n * @import get from ..get\r\n * \r\n * @import height from ..height\r\n * \r\n * @param {object} region 配置\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\nregion = get(region) ;\r\n\r\nlet {\r\n    top,\r\n    right\r\n} = region ;\r\n\r\nreturn {\r\n    x:right,\r\n    y:top + height(region) / 2\r\n} ;\r\n\n\n    }\n    \n                    return function(region){\n    \n                        \n        if(!var_init_locked_1610693101391){\n\n            get = include('src::math.region.get');\nheight = include('src::math.region.height');\n\n            var_init_locked_1610693101391 = true ;\n        }\n        \n    \n                        return main.call(this , region) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.xy.right"
  },
  "src::math.region.zoom": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::math.region.zoom(<object> region , <number> scale)",
    "standard": true,
    "importNames": [
      "src::math.region.get",
      "src::math.region.width",
      "src::math.region.height"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,width,height;\n    \n                    let var_init_locked_1610693101417;\n    \n                    \n\n                    function main(region , scale){\n\n        \r\n/**\r\n * \r\n * 缩放当前目标范围\r\n * \r\n * @import get from .get\r\n * \r\n * @import width from .width\r\n * \r\n * @import height from .height\r\n * \r\n * @param {object} region 目标范围\r\n * \r\n * @param {number} scale 缩放值\r\n * \r\n * @return {object} 缩放后的目标范围\r\n * \r\n */\r\n\r\n region = get(region) ;\r\n\r\n let {\r\n    left,\r\n    top\r\n } = region,\r\n right = left + width(region) * scale,\r\n bottom = top + height(region) * scale ;\r\n\r\n return {\r\n    left,\r\n    right,\r\n    top,\r\n    bottom\r\n } ;\r\n\r\n\r\n\r\n \r\n\r\n \n\n    }\n    \n                    return function(region , scale){\n    \n                        \n        if(!var_init_locked_1610693101417){\n\n            get = include('src::math.region.get');\nwidth = include('src::math.region.width');\nheight = include('src::math.region.height');\n\n            var_init_locked_1610693101417 = true ;\n        }\n        \n    \n                        return main.call(this , region , scale) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region.zoom"
  },
  "src::math.region": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::math.region(<number> top , <number> right , <number> bottom , <number> left)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_class_1609121332253;\n    \n                    \n\n                    let var_global_main_1609121332253 ;\n    \n                    return function(top , right , bottom , left){\n    \n                        \n        if(!var_init_locked_1609121332253){\n\n            \n\n            \r\n/**\r\n * \r\n * 区域\r\n * \r\n * @param {number} top 上\r\n * \r\n * @param {number} right 右\r\n * \r\n * @param {number} bottom 下\r\n * \r\n * @param {number} left 左\r\n * \r\n */\r\n\r\n const {\r\n    abs\r\n } = Math ;\r\n\r\n class main{\r\n\r\n    constructor(top , right , bottom , left){\r\n\r\n      let me = this ;\r\n\r\n      me.top = top ;\r\n\r\n      me.right = right ;\r\n\r\n      me.bottom = bottom ;\r\n\r\n      me.left = left ;\r\n\r\n    }\r\n\r\n   get x(){\r\n\r\n      return this.left ;\r\n   }\r\n\r\n   get y(){\r\n\r\n      return this.top ;\r\n   }\r\n\r\n   contains(region){\r\n\r\n      let {\r\n         x,\r\n         y,\r\n         right,\r\n         bottom\r\n      } = this,\r\n      {\r\n         x:regionX,\r\n         y:regionY,\r\n         right:regionRight,\r\n         bottom:regionBottom\r\n      } = region;\r\n\r\n      return (regionX >= x &&\r\n             (regionRight || regionX) <= right &&\r\n             regionY >= y &&\r\n             (regionBottom || regionY) <= bottom);\r\n   }\r\n\r\n   getOutOfBoundOffset({\r\n      x,\r\n      y,\r\n      right,\r\n      bottom\r\n   }){\r\n\r\n      let me = this;\r\n\r\n      x = me.getOutOfBoundOffsetX(x) ;\r\n\r\n      right = me.getOutOfBoundOffsetX(right) ;\r\n\r\n      if(abs(x) < abs(right)){\r\n\r\n         x = right ;\r\n      }\r\n\r\n      y = me.getOutOfBoundOffsetY(y) ;\r\n\r\n      bottom = me.getOutOfBoundOffsetY(bottom) ;\r\n\r\n      if(abs(y) < abs(bottom)){\r\n\r\n         y = bottom ;\r\n      }\r\n\r\n      return {\r\n         x,\r\n         y\r\n      } ;\r\n  }\r\n\r\n   getOutOfBoundOffsetX(x){\r\n\r\n      let me = this,\r\n      {\r\n         left,\r\n         right\r\n      } = me;\r\n\r\n      if (x <= left) {\r\n\r\n         return left - x;\r\n      \r\n      }else if (x >= right) {\r\n      \r\n         return right - x;\r\n      \r\n      }\r\n\r\n      return 0;\r\n  }\r\n\r\n  getOutOfBoundOffsetY(y){\r\n\r\n      let me = this,\r\n      {\r\n      top,\r\n      bottom\r\n      } = me ;\r\n\r\n      if (y <= top) {\r\n\r\n         return top - y;\r\n      \r\n      }else if (y >= bottom) {\r\n      \r\n         return bottom - y;\r\n      \r\n      }\r\n\r\n      return 0;\r\n   }\r\n}\r\n\r\n \n\n            var_class_1609121332253 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121332253 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::math.region' ;\n                }\n\n            } ;\n\n            main = var_class_1609121332253 ;\n        \nvar_global_main_1609121332253 = main;\n\n            var_init_locked_1609121332253 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121332253(top , right , bottom , left) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.region"
  },
  "src::math.speed": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.speed(<number> value , <string> unit)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(value , unit){\n\n        \r\n/**\r\n * \r\n * 计算出速度值\r\n * \r\n * @param {number} value 移动值\r\n * \r\n * @param {string} [unit = 'ms'] 时间单位\r\n * \r\n * @return {number} 返回说明 \r\n * \r\n */\r\n\r\nswitch(unit){\r\n\r\n    case 'ms':\r\n\r\n        return value ;\r\n\r\n    case 's':\r\n\r\n        return value / 1000 ;\r\n\r\n    case 'm':\r\n\r\n        return value / 1000 / 60 ;\r\n\r\n\r\n    case 'h':\r\n\r\n        return value / 1000 / 60 / 60 ;\r\n}\r\n\r\nreturn 0 ;\r\n\n\n    }\n    \n                    return function(value , unit = 'ms'){\n    \n                        \n    \n                        return main.call(this , value , unit) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.speed"
  },
  "src::math.sum": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::math.sum(<array> ...values)",
    "standard": true,
    "importNames": [
      "src::is.array",
      "src::math.sum"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isArray,sum;\n    \n                    let var_init_locked_1609121332282;\n    \n                    \n\n                    function main(...values){\n\n        \r\n/**\r\n * \r\n * 求和\r\n * \r\n * @import is.array\r\n * \r\n * @import sum from .sum\r\n * \r\n * @param {array} [...values] 一组待求和的值\r\n * \r\n * @return {number} 值\r\n * \r\n */\r\n\r\n let result = 0 ;\r\n\r\n for(let value of values){\r\n\r\n   if(isArray(value)){\r\n\r\n      result += sum(...value) ;\r\n\r\n   }else{\r\n\r\n      result += value ;\r\n   }    \r\n }\r\n\r\n return result ;\n\n    }\n    \n                    return function(...values){\n    \n                        \n        if(!var_init_locked_1609121332282){\n\n            isArray = include('src::is.array');\nsum = include('src::math.sum');\n\n            var_init_locked_1609121332282 = true ;\n        }\n        \n    \n                        return main.call(this , ...values) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "math.sum"
  },
  "src::file.read.json": {
    "meta": "code.meta.script.function",
    "signature": "async <mixed> src::file.read.json(<string> path , <function> watchFn)",
    "standard": true,
    "importNames": [
      "src::file.read.text",
      "src::json.parse"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let read,parse;\n    \n                    let var_init_locked_1609121332303;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 读取 JSON 文件\r\n * \r\n * @import read from file.read.text\r\n * \r\n * @import parse from json.parse\r\n * \r\n * @param {string} path JSON文件存储路径\r\n * \r\n *  @param {function} [watchFn] 是否以监听方式获取文件内容\r\n * \r\n * @return {mixed} JSON数据 \r\n * \r\n */\r\n\r\n async function main(path , watchFn){\r\n\r\n    if(watchFn){\r\n\r\n        read(path , data => watchFn(getJSON(data))) ;\r\n     \r\n    }else{\r\n    \r\n        return getJSON(await read(path)) ;\r\n    \r\n    }\r\n }\r\n\r\n function getJSON(data){\r\n\r\n    if(data){\r\n\r\n        return parse(data) ;\r\n    }\r\n }\r\n\r\n \r\n\r\n\r\n\n    \n                    return async function(path , watchFn){\n    \n                        \n        if(!var_init_locked_1609121332303){\n\n            read = include('src::file.read.text');\nparse = include('src::json.parse');\n\n            var_init_locked_1609121332303 = true ;\n        }\n        \n    \n                        return await main.call(this , path , watchFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.read.json"
  },
  "src::file.read": {
    "meta": "code.meta.script.function",
    "signature": "async <ArrayBuffer> src::file.read(<string> path)",
    "standard": true,
    "importNames": [
      "src::is.file"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFile;\n    \n                    let var_init_locked_1609121332329;\n    \n                    \n\n                    async function main(path){\n\n        /**\r\n * \r\n * 读取文件\r\n * \r\n * @import is.file\r\n * \r\n * @param {string} path 文本文件路径\r\n * \r\n * @return {ArrayBuffer} 原生文件内容\r\n * \r\n */\r\n\r\nconst {\r\n    readFile\r\n} = require('fs') ;\r\n\r\nif(await isFile(path)){\r\n\r\n    return new Promise((resolve , reject) => readFile(path , (error , data) => error ? reject(error) : resolve(data))) ;\r\n}\n\n    }\n    \n                    return async function(path){\n    \n                        \n        if(!var_init_locked_1609121332329){\n\n            isFile = include('src::is.file');\n\n            var_init_locked_1609121332329 = true ;\n        }\n        \n    \n                        return await main.call(this , path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.read"
  },
  "src::file.read.text": {
    "meta": "code.meta.script.function",
    "signature": "async <string> src::file.read.text(<string> path , <function> watchFn)",
    "standard": true,
    "importNames": [
      "src::file.read"
    ],
    "dependentModules": {
      "chokidar": "^3.1.1"
    },
    "data": "(() =>{\n\n                    let read;\n    \n                    let var_init_locked_1609121332316;\n    \n                    \n\n                    /**\r\n * \r\n * 读取文本文件\r\n * \r\n * @require chokidar\r\n * \r\n * @import read from file.read\r\n * \r\n * @param {string} path 文本文件路径\r\n * \r\n * @param {function} [watchFn] 是否以监听方式获取文件内容\r\n * \r\n * @return {string} 文本文件内容\r\n * \r\n */\r\n\r\n const chokidar = require('chokidar'),\r\n       cacheFiles = {} ;\r\n\r\n async function main(path , watchFn){\r\n\r\n    if(!watchFn){\r\n\r\n        return await getText(path) ;\r\n    \r\n    }else{\r\n\r\n        if(cacheFiles.hasOwnProperty(path)){\r\n\r\n            watchFn(cacheFiles[path]) ;\r\n        \r\n        }else{\r\n\r\n            chokidar.watch(path).on('change' , async path => watchFn(cacheFiles[path] = await getText(path))) ;\r\n\r\n            watchFn(cacheFiles[path] = await getText(path)) ;\r\n        }   \r\n    }\r\n }\r\n\r\n async function getText(path) {\r\n     \r\n    let data = await read(path) ;\r\n\r\n    if(data){\r\n\r\n        return data.toString('utf8') ;\r\n    }\r\n }\r\n\n    \n                    return async function(path , watchFn){\n    \n                        \n        if(!var_init_locked_1609121332316){\n\n            read = include('src::file.read');\n\n            var_init_locked_1609121332316 = true ;\n        }\n        \n    \n                        return await main.call(this , path , watchFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.read.text"
  },
  "src::file.stream.read": {
    "meta": "code.meta.script.function",
    "signature": "<fs.WriteStream> src::file.stream.read(<string> path , <object> options)",
    "standard": true,
    "importNames": [
      "src::directory.create"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let create;\n    \n                    let var_init_locked_1609121332351;\n    \n                    \n\n                    function main(path , options){\n\n        \r\n/**\r\n * \r\n * 创建读取流\r\n * \r\n * @import create from directory.create\r\n * \r\n * @param {string} path 路径\r\n * \r\n * @param {object} [options] 流配置\r\n * \r\n * @return {fs.WriteStream} 读取流 \r\n * \r\n */\r\n\r\nconst {\r\n    createReadStream\r\n } = require('fs');\r\n\r\n return createReadStream(path , options) ;\r\n\r\n\r\n\n\n    }\n    \n                    return function(path , options){\n    \n                        \n        if(!var_init_locked_1609121332351){\n\n            create = include('src::directory.create');\n\n            var_init_locked_1609121332351 = true ;\n        }\n        \n    \n                        return main.call(this , path , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.stream.read"
  },
  "src::file.stream.write": {
    "meta": "code.meta.script.function",
    "signature": "<fs.WriteStream> src::file.stream.write(<string> path , <object> options)",
    "standard": true,
    "importNames": [
      "src::directory.create"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let create;\n    \n                    let var_init_locked_1609121332372;\n    \n                    \n\n                    function main(path , options){\n\n        \r\n/**\r\n * \r\n * 创建写入流\r\n * \r\n * @import create from directory.create\r\n * \r\n * @param {string} path 路径\r\n * \r\n * @param {object} [options] 流配置\r\n * \r\n * @return {fs.WriteStream} 写入流 \r\n * \r\n */\r\n\r\n const {\r\n    dirname\r\n } = require('path'),\r\n {\r\n    createWriteStream\r\n } = require('fs');\r\n\r\n create(dirname(path)) ;\r\n\r\n return createWriteStream(path , options) ;\r\n\r\n\r\n\n\n    }\n    \n                    return function(path , options){\n    \n                        \n        if(!var_init_locked_1609121332372){\n\n            create = include('src::directory.create');\n\n            var_init_locked_1609121332372 = true ;\n        }\n        \n    \n                        return main.call(this , path , options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.stream.write"
  },
  "src::file.write.html": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::file.write.html(<string> path , <mixed> doc)",
    "standard": true,
    "importNames": [
      "src::file.write",
      "src::html.format"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let write,format;\n    \n                    let var_init_locked_1609121332389;\n    \n                    \n\n                    function main(path , doc){\n\n        /**\r\n * \r\n * 保存HTML文件\r\n * \r\n * @import write from file.write\r\n * \r\n * @import format from html.format\r\n * \r\n * @param {string} path 保存文件路径\r\n * \r\n * @param {mixed} doc 保存文件内容\r\n * \r\n */\r\n\r\nwrite(path , format(doc)) ;\n\n    }\n    \n                    return function(path , doc){\n    \n                        \n        if(!var_init_locked_1609121332389){\n\n            write = include('src::file.write');\nformat = include('src::html.format');\n\n            var_init_locked_1609121332389 = true ;\n        }\n        \n    \n                        return main.call(this , path , doc) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.write.html"
  },
  "src::file.write": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::file.write(<string> path , <mixed> data)",
    "standard": true,
    "importNames": [
      "src::directory.create"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let create;\n    \n                    let var_init_locked_1609121332400;\n    \n                    \n\n                    async function main(path , data){\n\n        \r\n/**\r\n * \r\n * 保存文件\r\n * \r\n * @import create from directory.create\r\n * \r\n * @param {string} path 保存文件路径\r\n * \r\n * @param {mixed} data 保存文件内容\r\n * \r\n * \r\n */\r\n\r\nconst {\r\n    writeFile\r\n} = require('fs'),\r\n{\r\n    dirname\r\n} = require('path');\r\n\r\nawait create(dirname(path)) ;\r\n\r\nreturn new Promise((resolve , reject) => writeFile(path , data , error => error ? reject(error) : resolve())) ;\n\n    }\n    \n                    return async function(path , data){\n    \n                        \n        if(!var_init_locked_1609121332400){\n\n            create = include('src::directory.create');\n\n            var_init_locked_1609121332400 = true ;\n        }\n        \n    \n                        return await main.call(this , path , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.write"
  },
  "src::html.format": {
    "meta": "code.meta.script.function",
    "signature": "<string> src::html.format(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1609121332417;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 格式化 HTML 文件内容\r\n * \r\n * @import is.string\r\n * \r\n * @param {mixed} data HTML 文件内容\r\n * \r\n * @return {string} 格式化后的 HTML 文件内容\r\n * \r\n */\r\n\r\nconst {\r\n    minify\r\n} = require('html-minifier'),\r\n{\r\n    html\r\n} = require('js-beautify');\r\n\r\nif(!isString(data)){\r\n\r\n   data = `<!DOCTYPE html>\\n${data.documentElement.outerHTML}` ;\r\n}\r\n\r\nreturn html(minify(data , {\r\n    collapseWhitespace:true\r\n})) ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121332417){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1609121332417 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "html.format"
  },
  "src::file.write.json": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::file.write.json(<string> path , <mixed> data)",
    "standard": true,
    "importNames": [
      "src::file.write"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let write;\n    \n                    let var_init_locked_1609121332429;\n    \n                    \n\n                    function main(path , data){\n\n        \r\n/**\r\n * \r\n * 保存JSON文件\r\n * \r\n * @import write from file.write\r\n * \r\n * @param {string} path 保存文件路径\r\n * \r\n * @param {mixed} data 保存文件内容\r\n * \r\n */\r\n\r\nreturn write(path , JSON.stringify(data , null , 2)) ;\n\n    }\n    \n                    return function(path , data){\n    \n                        \n        if(!var_init_locked_1609121332429){\n\n            write = include('src::file.write');\n\n            var_init_locked_1609121332429 = true ;\n        }\n        \n    \n                        return main.call(this , path , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "file.write.json"
  },
  "src::mindmap": {
    "meta": "code.meta.class",
    "signature": "<void> src::mindmap(<mixed> config)",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::class.empty",
      "src::mindmap.constructor",
      "src::mindmap.region.selected",
      "src::mindmap.load",
      "src::mindmap.load.data",
      "src::mindmap.save.data",
      "src::mindmap.node.size",
      "src::mindmap.destroy",
      "src::mindmap.resize",
      "src::mindmap.expand",
      "src::mindmap.collapse",
      "src::mindmap.select",
      "src::mindmap.deselect",
      "src::mindmap.delete",
      "src::mindmap.append",
      "src::mindmap.move",
      "src::mindmap.reset",
      "src::mindmap.focus",
      "src::mindmap.move.down",
      "src::mindmap.move.up",
      "src::mindmap.node.sibling.next",
      "src::mindmap.node.sibling.previous",
      "src::mindmap.node.info",
      "src::mindmap.nodes.order",
      "src::mindmap.node.query",
      "src::mindmap.node.parent",
      "src::mindmap.nodes.child",
      "src::mindmap.node.text",
      "src::mindmap.insert.before",
      "src::mindmap.insert.after",
      "src::mindmap.select.move.left",
      "src::mindmap.select.move.right",
      "src::mindmap.select.move.up",
      "src::mindmap.select.move.down",
      "src::mindmap.node.restructure.start",
      "src::mindmap.node.restructure",
      "src::mindmap.node.restructure.end",
      "src::mindmap.node.indicator.input",
      "src::mindmap.operation.near",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let mixin_1610693101485__1,extend,constructor,get_selectedNodeRegion,method_load,method_loadData,method_saveData,method_setNodeSize,method_destroy,method_resize,method_expand,method_collapse,method_select,method_deselect,method_delete,method_append,method_move,method_reset,method_focus,method_moveDown,method_moveUp,method_getNextSiblingNode,method_getPreviousSiblingNode,method_info,method_updateOrderByNodes,method_query,method_getParentNode,method_getChildNodes,method_text,method_insertBefore,method_insertAfter,method_left,method_right,method_up,method_down,method_startRestructureNode,method_restructureNode,method_endRestructureNode,method_fireIndicatorInput,method_nearOperation,isObject;\n    \n                    let var_init_locked_1610693101486;\n    \n                    let var_class_1610693101486;\n    \n                    \n\n                    let var_global_main_1610693101486 ;\n    \n                    return function(config){\n    \n                        \n        if(!var_init_locked_1610693101486){\n\n            mixin_1610693101485__1 = include('src::mixin.observable');\nextend = include('src::class.empty')();\nconstructor = include('src::mindmap.constructor');\nget_selectedNodeRegion = include('src::mindmap.region.selected');\nmethod_load = include('src::mindmap.load');\nmethod_loadData = include('src::mindmap.load.data');\nmethod_saveData = include('src::mindmap.save.data');\nmethod_setNodeSize = include('src::mindmap.node.size');\nmethod_destroy = include('src::mindmap.destroy');\nmethod_resize = include('src::mindmap.resize');\nmethod_expand = include('src::mindmap.expand');\nmethod_collapse = include('src::mindmap.collapse');\nmethod_select = include('src::mindmap.select');\nmethod_deselect = include('src::mindmap.deselect');\nmethod_delete = include('src::mindmap.delete');\nmethod_append = include('src::mindmap.append');\nmethod_move = include('src::mindmap.move');\nmethod_reset = include('src::mindmap.reset');\nmethod_focus = include('src::mindmap.focus');\nmethod_moveDown = include('src::mindmap.move.down');\nmethod_moveUp = include('src::mindmap.move.up');\nmethod_getNextSiblingNode = include('src::mindmap.node.sibling.next');\nmethod_getPreviousSiblingNode = include('src::mindmap.node.sibling.previous');\nmethod_info = include('src::mindmap.node.info');\nmethod_updateOrderByNodes = include('src::mindmap.nodes.order');\nmethod_query = include('src::mindmap.node.query');\nmethod_getParentNode = include('src::mindmap.node.parent');\nmethod_getChildNodes = include('src::mindmap.nodes.child');\nmethod_text = include('src::mindmap.node.text');\nmethod_insertBefore = include('src::mindmap.insert.before');\nmethod_insertAfter = include('src::mindmap.insert.after');\nmethod_left = include('src::mindmap.select.move.left');\nmethod_right = include('src::mindmap.select.move.right');\nmethod_up = include('src::mindmap.select.move.up');\nmethod_down = include('src::mindmap.select.move.down');\nmethod_startRestructureNode = include('src::mindmap.node.restructure.start');\nmethod_restructureNode = include('src::mindmap.node.restructure');\nmethod_endRestructureNode = include('src::mindmap.node.restructure.end');\nmethod_fireIndicatorInput = include('src::mindmap.node.indicator.input');\nmethod_nearOperation = include('src::mindmap.operation.near');\nisObject = include('src::is.object.simple');\n\n            class main extends mixins({extend , mixins:[include('mixin.observable')]}){\n\n            \n\n            \n\n            constructor(...args){\n\n            super(...args) ;\n\n            constructor.apply(this , args) ;\n\n        }\n\n            load(...args){\n\n            return method_load.apply(this , args) ;\n\n        }\nloadData(...args){\n\n            return method_loadData.apply(this , args) ;\n\n        }\nsaveData(...args){\n\n            return method_saveData.apply(this , args) ;\n\n        }\nsetNodeSize(...args){\n\n            return method_setNodeSize.apply(this , args) ;\n\n        }\ndestroy(...args){\n\n            return method_destroy.apply(this , args) ;\n\n        }\nresize(...args){\n\n            return method_resize.apply(this , args) ;\n\n        }\nexpand(...args){\n\n            return method_expand.apply(this , args) ;\n\n        }\ncollapse(...args){\n\n            return method_collapse.apply(this , args) ;\n\n        }\nselect(...args){\n\n            return method_select.apply(this , args) ;\n\n        }\ndeselect(...args){\n\n            return method_deselect.apply(this , args) ;\n\n        }\ndelete(...args){\n\n            return method_delete.apply(this , args) ;\n\n        }\nappend(...args){\n\n            return method_append.apply(this , args) ;\n\n        }\nmove(...args){\n\n            return method_move.apply(this , args) ;\n\n        }\nreset(...args){\n\n            return method_reset.apply(this , args) ;\n\n        }\nfocus(...args){\n\n            return method_focus.apply(this , args) ;\n\n        }\nmoveDown(...args){\n\n            return method_moveDown.apply(this , args) ;\n\n        }\nmoveUp(...args){\n\n            return method_moveUp.apply(this , args) ;\n\n        }\ngetNextSiblingNode(...args){\n\n            return method_getNextSiblingNode.apply(this , args) ;\n\n        }\ngetPreviousSiblingNode(...args){\n\n            return method_getPreviousSiblingNode.apply(this , args) ;\n\n        }\ninfo(...args){\n\n            return method_info.apply(this , args) ;\n\n        }\nupdateOrderByNodes(...args){\n\n            return method_updateOrderByNodes.apply(this , args) ;\n\n        }\nquery(...args){\n\n            return method_query.apply(this , args) ;\n\n        }\ngetParentNode(...args){\n\n            return method_getParentNode.apply(this , args) ;\n\n        }\ngetChildNodes(...args){\n\n            return method_getChildNodes.apply(this , args) ;\n\n        }\ntext(...args){\n\n            return method_text.apply(this , args) ;\n\n        }\ninsertBefore(...args){\n\n            return method_insertBefore.apply(this , args) ;\n\n        }\ninsertAfter(...args){\n\n            return method_insertAfter.apply(this , args) ;\n\n        }\nleft(...args){\n\n            return method_left.apply(this , args) ;\n\n        }\nright(...args){\n\n            return method_right.apply(this , args) ;\n\n        }\nup(...args){\n\n            return method_up.apply(this , args) ;\n\n        }\ndown(...args){\n\n            return method_down.apply(this , args) ;\n\n        }\nstartRestructureNode(...args){\n\n            return method_startRestructureNode.apply(this , args) ;\n\n        }\nrestructureNode(...args){\n\n            return method_restructureNode.apply(this , args) ;\n\n        }\nendRestructureNode(...args){\n\n            return method_endRestructureNode.apply(this , args) ;\n\n        }\nfireIndicatorInput(...args){\n\n            return method_fireIndicatorInput.apply(this , args) ;\n\n        }\nnearOperation(...args){\n\n            return method_nearOperation.apply(this , args) ;\n\n        }\n\n            get selectedNodeRegion(){\n\n                return get_selectedNodeRegion.call(this) ;\n    \n            }\n\n        }\n\n            var_class_1610693101486 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1610693101486 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::mindmap' ;\n                }\n\n            } ;\n\n            main = var_class_1610693101486 ;\n        \nvar_global_main_1610693101486 = main;\n\n            var_init_locked_1610693101486 = true ;\n        }\n        \n    \n                        return new var_global_main_1610693101486(config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap"
  },
  "src::mindmap.node.root": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.root()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 获得实际的根节点\r\n * \r\n * @return {data.Record} 根节点 \r\n * \r\n */\r\n\r\n let {\r\n    ellipsisRootNode,\r\n    focusNode,\r\n    rootNode\r\n } = this ;\r\n\r\n return focusNode || ellipsisRootNode || rootNode ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.root"
  },
  "src::mindmap.data.node.from": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.data.node.from(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.object",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isObject;\n    \n                    let var_init_locked_1609121332529;\n \n                    \n\n                    const var_current_scope_1609121332529 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332529){\n\n            isString = include('src::is.string');\nisObject = include('src::is.object');\n\n            var_init_locked_1609121332529 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121332529.has(this)){\n\n            var_current_scope_1609121332529.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 根据所提供的标识来获得脑图节点\r\n * \r\n * @import is.string\r\n * \r\n * @import isObject from is.object\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node 脑图节点标识\r\n * \r\n * @return {data.Record} 脑图节点 \r\n * \r\n */\r\n\r\n let {\r\n    nodes\r\n } = this ;\r\n\r\nif(isString(node)){\r\n\r\n    return nodes.get(node) ;\r\n\r\n}else if(isObject(node)){\r\n\r\n   let {\r\n       id\r\n   } = node ;\r\n\r\n   return from(id) ;\r\n}\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332529.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.from"
  },
  "src::mindmap.node.from": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.from(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121333911;\n \n                    \n\n                    const var_current_scope_1609121333911 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121333911){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121333911 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333911.has(this)){\n\n            var_current_scope_1609121333911.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 根据所提供的标识来获得脑图节点\r\n * \r\n * @import is.defined\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @param {mixed} node 脑图节点标识\r\n * \r\n * @return {data.Record} 脑图节点 \r\n * \r\n */\r\n\r\n if(isDefined(node)){\r\n\r\n    return from(node) ;\r\n }\r\n\r\n return this.selectedNode ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333911.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.from"
  },
  "src::mindmap.node.is.root": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.is.root(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.root",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101615 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101615.has(this)){\n\n            var_current_scope_1610693101615.set(this , (() => {\n                const getRootNode = include('src::mindmap.node.root').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 判定指定节点是否为根节点\r\n * \r\n * @import getRootNode from ..root scoped\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @param {mixed} node 节点\r\n * \r\n * @return {boolean} 如果为脑图根节点则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return from(node) === getRootNode() ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101615.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.is.root"
  },
  "src::mindmap.node.is.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.is.leaf(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 判断指定节点是否为叶子节点\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {boolean} 如果节点为叶子节点则返回 true , 否则 false\r\n * \r\n */\r\n\r\n let {\r\n   hidden\r\n } = node ;\r\n\r\n if(!hidden){\r\n\r\n   let {\r\n      children\r\n   } = node ;\r\n  \r\n   return !children.length ;\r\n }\r\n\r\n return false ;\r\n\r\n\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.is.leaf"
  },
  "src::mindmap.data.node.is.root": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.data.node.is.root(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332514 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332514.has(this)){\n\n            var_current_scope_1609121332514.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 判断指定脑图节点是否为根节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {boolean} 如果为根节点则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn from(node) === this.rootNode ;\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332514.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.is.root"
  },
  "src::mindmap.data.node.is.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.data.node.is.leaf(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332596 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332596.has(this)){\n\n            var_current_scope_1609121332596.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 判断指定脑图节点是否为叶子节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {boolean} 如果为叶子节点则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return from(node).children.length === 0;\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332596.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.is.leaf"
  },
  "src::mindmap.data.node.data": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.data.node.data(<mixed> node , <array> addFields)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.is.root",
      "src::mindmap.data.node.is.leaf",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332580 = new Map();\n    \n                    return function(node , addFields){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332580.has(this)){\n\n            var_current_scope_1609121332580.set(this , (() => {\n                const isRootNode = include('src::mindmap.data.node.is.root').bind(this);\nconst isLeafNode = include('src::mindmap.data.node.is.leaf').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                \r\n/**\r\n * \r\n * 获取节点实际的数据信息\r\n * \r\n * @import isRootNode from .is.root scoped\r\n * \r\n * @import isLeafNode from .is.leaf scoped\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node 节点\r\n * \r\n * @param {array} [addFields] 附加字段信息\r\n * \r\n * @return {object} 数据信息 \r\n * \r\n */\r\n\r\n const DATA_FIELDS = {\r\n    root(node){\r\n\r\n        return isRootNode(node) ;\r\n     },\r\n\r\n     leaf(node){\r\n\r\n        return isLeafNode(node) ;\r\n     }\r\n } ;\r\n\r\nfunction main(node , fields = DATA_FIELDS){\r\n\r\n   node = from(node);\r\n\r\n   if(node){\r\n\r\n      return this.reader.data(node , {\r\n         ignoreFields:[\r\n            'children'\r\n         ],\r\n         fields\r\n      }) ;\r\n   }\r\n}\r\n\r\n\r\n \n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332580.get(this) ;\n\n        \n    \n                        return main.call(this , node , addFields) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.data"
  },
  "src::mindmap.node.x": {
    "meta": "code.meta.script.function",
    "signature": "<Number> src::mindmap.node.x(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获取可显示横纵标\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {Number} 增加偏移值的横坐标  \r\n * \r\n */\r\n\r\nlet {\r\n    padding\r\n} = this;\r\n\r\nreturn node.x + padding.left ;\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.x"
  },
  "src::mindmap.node.sized": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.sized(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 指定节点是否同步获取了宽度\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {boolean} 如果已获取尺寸则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n let {\r\n    unsizedNodes\r\n } = this,\r\n {\r\n    id\r\n } = node;\r\n\r\n return !unsizedNodes.has(id) ;\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.sized"
  },
  "src::mindmap.node.xy.right": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.xy.right(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609134759693 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609134759693.has(this)){\n\n            var_current_scope_1609134759693.set(this , (() => {\n                const isSized = include('src::mindmap.node.sized').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得节点的右边坐标\r\n * \r\n * @import isSized from ..sized scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\nlet {\r\n    x,\r\n    y,\r\n    hidden\r\n } = node ;\r\n\r\n if(isSized(node)){\r\n\r\n    let {\r\n        width,\r\n        height\r\n    } = node; \r\n\r\n    return {\r\n        x:x + width,\r\n        y:y + height / 2\r\n    } ;\r\n }\r\n\r\n return {\r\n     x,\r\n     y\r\n } ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609134759693.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.xy.right"
  },
  "src::mindmap.node.xy.top": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.xy.top(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332723 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332723.has(this)){\n\n            var_current_scope_1609121332723.set(this , (() => {\n                const isSized = include('src::mindmap.node.sized').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得节点的顶部坐标\r\n * \r\n * @import isSized from ..sized scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\nlet {\r\n    x,\r\n    y,\r\n    hidden\r\n } = node ;\r\n\r\n if(isSized(node)){\r\n\r\n    let {\r\n        width\r\n    } = node; \r\n\r\n    return {\r\n        x:x + width / 2,\r\n        y\r\n    } ;\r\n }\r\n\r\n return {\r\n     x,\r\n     y\r\n } ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332723.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.xy.top"
  },
  "src::mindmap.node.xy.bottom": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.xy.bottom(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609134759717 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609134759717.has(this)){\n\n            var_current_scope_1609134759717.set(this , (() => {\n                const isSized = include('src::mindmap.node.sized').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得节点的底部坐标\r\n * \r\n * @import isSized from ..sized scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\n let {\r\n    x,\r\n    y,\r\n    hidden\r\n } = node ;\r\n\r\n if(isSized(node)){\r\n\r\n    let {\r\n        width,\r\n        height\r\n    } = node; \r\n\r\n    return {\r\n        x:x + width / 2,\r\n        y:y + height\r\n    } ;\r\n }\r\n\r\n return {\r\n    x,\r\n    y\r\n } ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609134759717.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.xy.bottom"
  },
  "src::mindmap.nodes.child.first": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.child.first(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.child.first"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getNodes;\n    \n                    let var_init_locked_1609121332796;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获得指定节点的所有首子节点\r\n * \r\n * @import getNodes from .first\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\n let {\r\n    firstChildNodes\r\n } = node ;\r\n\r\n if(firstChildNodes){\r\n\r\n    return firstChildNodes ;\r\n }\r\n\r\nlet {\r\n    hidden\r\n} = node;\r\n\r\nfirstChildNodes = node.firstChildNodes = [] ;\r\n\r\nif(!hidden){\r\n\r\n    let {\r\n        expanded,\r\n        children\r\n    } = node ;\r\n\r\n\r\n    if(expanded && children.length){\r\n\r\n        let firstChildNode = children[0],\r\n        {\r\n            hidden\r\n        } = firstChildNode;\r\n\r\n        if(!hidden){\r\n\r\n            firstChildNodes.push(firstChildNode , ...getNodes(firstChildNode)) ;\r\n        }\r\n    }\r\n}\r\n\r\nreturn firstChildNodes ;\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332796){\n\n            getNodes = include('src::mindmap.nodes.child.first');\n\n            var_init_locked_1609121332796 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.child.first"
  },
  "src::mindmap.nodes.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.leaf(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.leaf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getNodes;\n    \n                    let var_init_locked_1609121332835;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获得指定节点的所有叶子节点\r\n * \r\n * @import getNodes from .leaf\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {array} 叶子节点集合 \r\n * \r\n */\r\n\r\n let {\r\n    leafNodes\r\n } = node ;\r\n\r\n if(leafNodes){\r\n\r\n    return leafNodes ;\r\n }\r\n\r\nlet {\r\n    hidden\r\n} = node;\r\n\r\nleafNodes = node.leafNodes = [] ;\r\n\r\nif(!hidden){\r\n\r\n    let {\r\n        expanded,\r\n        children\r\n    } = node ;\r\n\r\n\r\n    if(expanded && children.length){\r\n\r\n        for(let childNode of children){\r\n\r\n            leafNodes.push(...getNodes(childNode)) ;\r\n        }\r\n\r\n        if(!leafNodes.length){\r\n\r\n            leafNodes.push(node) ;\r\n        }\r\n    \r\n    }else{\r\n\r\n        leafNodes.push(node) ;\r\n    }\r\n}\r\n\r\nreturn leafNodes ;\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332835){\n\n            getNodes = include('src::mindmap.nodes.leaf');\n\n            var_init_locked_1609121332835 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.leaf"
  },
  "src::mindmap.node.leaf.first": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.leaf.first(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.leaf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getLeafNodes;\n    \n                    let var_init_locked_1609121332816;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获取第一个叶子节点\r\n * \r\n * @import getLeafNodes from ....nodes.leaf\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {data.Record} 叶子节点\r\n * \r\n */\r\n\r\nlet nodes = getLeafNodes(node) ;\r\n\r\nif(nodes.length){\r\n\r\n    return nodes[0] ;\r\n}\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332816){\n\n            getLeafNodes = include('src::mindmap.nodes.leaf');\n\n            var_init_locked_1609121332816 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.leaf.first"
  },
  "src::mindmap.node.region.scope.top": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::mindmap.node.region.scope.top(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.child.first",
      "src::mindmap.node.xy.top",
      "src::mindmap.node.leaf.first"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getNodes,getNode;\n    \n                    let var_init_locked_1609121332778;\n \n                    \n\n                    const var_current_scope_1609121332778 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332778){\n\n            getNodes = include('src::mindmap.nodes.child.first');\ngetNode = include('src::mindmap.node.leaf.first');\n\n            var_init_locked_1609121332778 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121332778.has(this)){\n\n            var_current_scope_1609121332778.set(this , (() => {\n                const getTopXY = include('src::mindmap.node.xy.top').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得区域的顶部距离\r\n * \r\n * @import getNodes from ......nodes.child.first\r\n * \r\n * @import getTopXY from ....xy.top scoped\r\n * \r\n * @import getNode from ....leaf.first\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {number} 距离\r\n * \r\n */\r\n\r\nlet {\r\n    y\r\n} = getTopXY(getNode(node)),\r\nnodes = getNodes(node);\r\n\r\nfor(let node of nodes){\r\n\r\n    let {\r\n        y:nodeY\r\n    } = getTopXY(node) ;\r\n\r\n    if(y > nodeY){\r\n\r\n        y = nodeY ;\r\n    }\r\n}\r\n\r\nreturn y ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332778.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.region.scope.top"
  },
  "src::mindmap.nodes.child.last": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.child.last(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.child.last"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getNodes;\n    \n                    let var_init_locked_1609121332870;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获得指定节点的所有尾子节点\r\n * \r\n * @import getNodes from .last\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\n let {\r\n    lastChildNodes\r\n } = node ;\r\n\r\n if(lastChildNodes){\r\n\r\n    return lastChildNodes ;\r\n }\r\n\r\nlet {\r\n    hidden\r\n} = node;\r\n\r\nlastChildNodes = node.lastChildNodes = [] ;\r\n\r\nif(!hidden){\r\n\r\n    let {\r\n        expanded,\r\n        children\r\n    } = node,\r\n    {\r\n        length\r\n    } = children;\r\n\r\n\r\n    if(expanded && length){\r\n\r\n        let lastChildNode = children[length - 1],\r\n        {\r\n            hidden\r\n        } = lastChildNode;\r\n\r\n        if(!hidden){\r\n\r\n            lastChildNodes.push(lastChildNode , ...getNodes(lastChildNode)) ;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nreturn lastChildNodes ;\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332870){\n\n            getNodes = include('src::mindmap.nodes.child.last');\n\n            var_init_locked_1609121332870 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.child.last"
  },
  "src::mindmap.node.leaf.last": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.leaf.last(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.leaf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getLeafNodes;\n    \n                    let var_init_locked_1609121332892;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获取最后一个叶子节点\r\n * \r\n * @import getLeafNodes from ....nodes.leaf\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {data.Record} 叶子节点\r\n * \r\n */\r\n\r\nlet nodes = getLeafNodes(node),\r\n{\r\n    length\r\n} = nodes;\r\n\r\nif(length){\r\n\r\n    return nodes[length - 1] ;\r\n}\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332892){\n\n            getLeafNodes = include('src::mindmap.nodes.leaf');\n\n            var_init_locked_1609121332892 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.leaf.last"
  },
  "src::mindmap.node.region.scope.bottom": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::mindmap.node.region.scope.bottom(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.child.last",
      "src::mindmap.node.leaf.last",
      "src::mindmap.node.xy.bottom"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getNodes,getNode;\n    \n                    let var_init_locked_1609121332851;\n \n                    \n\n                    const var_current_scope_1609121332851 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332851){\n\n            getNodes = include('src::mindmap.nodes.child.last');\ngetNode = include('src::mindmap.node.leaf.last');\n\n            var_init_locked_1609121332851 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121332851.has(this)){\n\n            var_current_scope_1609121332851.set(this , (() => {\n                const getBottom = include('src::mindmap.node.xy.bottom').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得区域的顶部距离\r\n * \r\n * @import getNodes from ......nodes.child.last\r\n * \r\n *  @import getNode from ....leaf.last\r\n * \r\n * @import getBottom from ....xy.bottom scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {number} 距离\r\n * \r\n */\r\n\r\nlet {\r\n    y\r\n} =  getBottom(getNode(node)),\r\nnodes = getNodes(node);\r\n\r\nfor(let childNode of nodes){\r\n\r\n    let {\r\n        y:nodeY\r\n    } = getBottom(childNode) ;\r\n\r\n    if(y < nodeY){\r\n\r\n        y = nodeY ;\r\n    }\r\n}\r\n\r\nreturn y ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332851.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.region.scope.bottom"
  },
  "src::mindmap.node.region.scope.right": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::mindmap.node.region.scope.right(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.leaf",
      "src::mindmap.node.xy.right"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let nodes;\n    \n                    let var_init_locked_1609121332911;\n \n                    \n\n                    const var_current_scope_1609121332911 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121332911){\n\n            nodes = include('src::mindmap.nodes.leaf');\n\n            var_init_locked_1609121332911 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121332911.has(this)){\n\n            var_current_scope_1609121332911.set(this , (() => {\n                const getRightXY = include('src::mindmap.node.xy.right').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得区域的右边距离\r\n * \r\n * @import nodes from ......nodes.leaf\r\n * \r\n *  @import getRightXY from ....xy.right scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {number} 距离\r\n * \r\n */\r\n\r\n let leafNodes = nodes(node),\r\n     maxRightX = 0;\r\n\r\nfor(let leafNode of leafNodes){\r\n\r\n    let {\r\n        x:rightX\r\n    } = getRightXY(leafNode) ;\r\n\r\n    if(maxRightX < rightX){\r\n\r\n        maxRightX = rightX ;\r\n    }\r\n}\r\n\r\nreturn maxRightX ;\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332911.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.region.scope.right"
  },
  "src::mindmap.node.region.scope": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.region.scope(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized",
      "src::mindmap.node.region.scope.top",
      "src::mindmap.node.region.scope.bottom",
      "src::mindmap.node.region.scope.right",
      "src::mindmap.node.xy.bottom"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609429260359 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609429260359.has(this)){\n\n            var_current_scope_1609429260359.set(this , (() => {\n                const isSized = include('src::mindmap.node.sized').bind(this);\nconst getTop = include('src::mindmap.node.region.scope.top').bind(this);\nconst getBottom = include('src::mindmap.node.region.scope.bottom').bind(this);\nconst getRight = include('src::mindmap.node.region.scope.right').bind(this);\nconst getBottomXY = include('src::mindmap.node.xy.bottom').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得当前节点作用区域\r\n * \r\n * @import isSized from ..sized scoped\r\n * \r\n * @import getTop from .scope.top scoped\r\n * \r\n * @import getBottom from .scope.bottom scoped\r\n * \r\n * @import getRight from .scope.right scoped\r\n * \r\n * @import getBottomXY from ..xy.bottom scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {object}  节点作用区域信息\r\n * \r\n */\r\n\r\nlet {\r\n    x,\r\n    y,\r\n    hidden\r\n} = node ;\r\n\r\n if(isSized(node) && !hidden){ \r\n\r\n    let top = Math.min(getTop(node) , y),\r\n        bottom = Math.max(getBottom(node) , getBottomXY(node).y),\r\n        right = getRight(node) ;\r\n\r\n    return {\r\n        x,\r\n        y:top,\r\n        width:right - x,\r\n        height:bottom - top\r\n    } ;\r\n }\r\n\r\n return {\r\n    x,\r\n    y,\r\n    width:0,\r\n    height:0\r\n} ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609429260359.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.region.scope"
  },
  "src::mindmap.region": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.region()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.xy.right",
      "src::mindmap.node.xy.top",
      "src::mindmap.node.xy.bottom",
      "src::mindmap.node.region.scope",
      "src::mindmap.node.root"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101766 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101766.has(this)){\n\n            var_current_scope_1610693101766.set(this , (() => {\n                const getRightXY = include('src::mindmap.node.xy.right').bind(this);\nconst getTopXY = include('src::mindmap.node.xy.top').bind(this);\nconst getBottomXY = include('src::mindmap.node.xy.bottom').bind(this);\nconst getRegion = include('src::mindmap.node.region.scope').bind(this);\nconst getRootNode = include('src::mindmap.node.root').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 获取当前脑图区域\r\n * \r\n * @import getRightXY from .node.xy.right scoped\r\n * \r\n * @import getTopXY from .node.xy.top scoped\r\n * \r\n * @import getBottomXY from .node.xy.bottom scoped\r\n * \r\n * @import getRegion from .node.region.scope scoped\r\n * \r\n * @import getRootNode from .node.root scoped\r\n * \r\n * @return {object} 区域数据 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n   region\r\n } = me;\r\n\r\n if(region){\r\n\r\n   return region ;\r\n }\r\n\r\n let {\r\n   leafNodes,\r\n   padding,\r\n   width:mindmapWidth,\r\n   height:mindmapHeight\r\n } = me,\r\n rootNode = getRootNode(),\r\n left = 0,\r\n right,\r\n bottom,\r\n {\r\n   x,\r\n   y:top,\r\n   width:rootNodeRegionWidth,\r\n   height:rootNodeRegionHeight\r\n } = getRegion(rootNode) ;\r\n\r\n right = x + rootNodeRegionWidth ;\r\n\r\n bottom = top + rootNodeRegionHeight ;\r\n\r\nlet width = right - left + padding.left + padding.right,\r\n    height = bottom - top + padding.top + padding.bottom;\r\n\r\nif(mindmapHeight > height){\r\n\r\n   height = mindmapHeight ;\r\n\r\n}\r\n\r\nif(mindmapWidth > width){\r\n\r\n   width = mindmapWidth;\r\n\r\n}\r\n\r\nreturn me.region = {\r\n   left,\r\n   right,\r\n   top,\r\n   bottom,\r\n   width,\r\n   height\r\n} ;\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101766.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.region"
  },
  "src::mindmap.node.y": {
    "meta": "code.meta.script.function",
    "signature": "<Number> src::mindmap.node.y(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.region"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101740 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101740.has(this)){\n\n            var_current_scope_1610693101740.set(this , (() => {\n                const getRegion = include('src::mindmap.region').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取可显示纵纵标\r\n * \r\n * @import getRegion from ..region scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {Number} 增加偏移值的纵坐标  \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   padding,\r\n   height\r\n} = me,\r\n{\r\n   height:regionHeight\r\n} = getRegion(),\r\nheightPadding = 0;\r\n\r\nif(height !== regionHeight){\r\n\r\n   heightPadding = padding.top ;\r\n}\r\n\r\nreturn node.y + heightPadding ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101740.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.y"
  },
  "src::mindmap.node.data": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.data(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.root",
      "src::mindmap.node.is.leaf",
      "src::mindmap.node.parent",
      "src::mindmap.data.node.data",
      "src::mindmap.node.x",
      "src::mindmap.node.y",
      "src::mindmap.data.node.from",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101690 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101690.has(this)){\n\n            var_current_scope_1610693101690.set(this , (() => {\n                const isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst isLeafNode = include('src::mindmap.node.is.leaf').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst getData = include('src::mindmap.data.node.data').bind(this);\nconst getX = include('src::mindmap.node.x').bind(this);\nconst getY = include('src::mindmap.node.y').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\nconst getNodeData = include('src::mindmap.node.data').bind(this);\n\n                \r\n/**\r\n * \r\n * 获取节点实际的数据信息\r\n * \r\n * @import isRootNode from .is.root scoped\r\n * \r\n * @import isLeafNode from .is.leaf scoped\r\n * \r\n * @import getParentNode from .parent scoped\r\n * \r\n * @import getData from ..data.node.data scoped\r\n * \r\n * @import getX from .x scoped\r\n * \r\n * @import getY from .y scoped\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @import getNodeData from .data scoped\r\n * \r\n * @param {mixed} node 节点\r\n * \r\n * @return {object} 数据信息 \r\n * \r\n */\r\n\r\n const addFields = {\r\n      root(node){\r\n\r\n         return isRootNode(node) ;\r\n      },\r\n\r\n      hasParentNode(node){\r\n\r\n         return !! getParentNode(node) ;\r\n      },\r\n\r\n      parentNode(node){\r\n\r\n         let parentNode = getParentNode(node) ;\r\n\r\n         if(parentNode){\r\n\r\n            return getNodeData(parentNode) ;\r\n         }\r\n      },\r\n\r\n      leaf(node){\r\n\r\n         return isLeafNode(node) ;\r\n      },\r\n\r\n      x(node){\r\n\r\n         return getX(node) ;\r\n      },\r\n\r\n      y(node){\r\n\r\n         return getY(node) ;\r\n      }\r\n } ;\r\n\r\n function main(node){\r\n\r\n   return getData(from(node) , addFields);\r\n   \r\n }\r\n\r\n \r\n\r\n \n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101690.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.data"
  },
  "src::mindmap.node.query": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record|object> src::mindmap.node.query(<string> id , <boolean> isReturnData)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332943 = new Map();\n    \n                    return function(id , isReturnData = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332943.has(this)){\n\n            var_current_scope_1609121332943.set(this , (() => {\n                const data = include('src::mindmap.node.data').bind(this);\n\n                function main(id , isReturnData){\n\n        \r\n/**\r\n * \r\n * 查询节点\r\n * \r\n * @import data from .data scoped\r\n * \r\n * @param {string} id 节点编号\r\n * \r\n * @param {boolean} [isReturnData = false] 是否返回数据\r\n * \r\n * @return {data.Record|object} 节点信息 \r\n * \r\n */\r\n\r\n let {\r\n     nodes\r\n } = this,\r\n node = nodes.get(id) ;\r\n\r\n if(node){\r\n\r\n    if(isReturnData){\r\n\r\n        return data(node) ;\r\n    }\r\n\r\n    return node ;\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332943.get(this) ;\n\n        \n    \n                        return main.call(this , id , isReturnData) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.query"
  },
  "src::mindmap.node.parent": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record|object> src::mindmap.node.parent(<data.Record|string> node , <boolean> isReturnData)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.data",
      "src::is.string",
      "src::mindmap.node.query"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1610693101658;\n \n                    \n\n                    const var_current_scope_1610693101658 = new Map();\n    \n                    return function(node , isReturnData = false){\n    \n                        \n        if(!var_init_locked_1610693101658){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1610693101658 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693101658.has(this)){\n\n            var_current_scope_1610693101658.set(this , (() => {\n                const data = include('src::mindmap.node.data').bind(this);\nconst query = include('src::mindmap.node.query').bind(this);\n\n                function main(node , isReturnData){\n\n        \r\n/**\r\n * \r\n * 获取指定节点的父节点引用\r\n * \r\n * @import data from .data scoped\r\n * \r\n * @import is.string\r\n * \r\n * @import query from .query scoped\r\n * \r\n * @param {data.Record|string} node 节点\r\n * \r\n * @param {boolean} [isReturnData = false] 是否返回数据\r\n * \r\n * @return {data.Record|object} 父节点 \r\n * \r\n */\r\n\r\n if(isString(node)){\r\n\r\n   node = query(node) ;\r\n\r\n   if(!node){\r\n\r\n      return ;\r\n   }\r\n }\r\n\r\n let {\r\n  parentNodeId\r\n } = node ;\r\n\r\n if(parentNodeId){\r\n\r\n   let parentNode = query(parentNodeId) ;\r\n\r\n   if(isReturnData){\r\n\r\n      return data(parentNode) ;\r\n   }\r\n\r\n   return parentNode ;\r\n\r\n }\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101658.get(this) ;\n\n        \n    \n                        return main.call(this , node , isReturnData) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.parent"
  },
  "src::mindmap.hidden.reset": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.hidden.reset(<data.Record> node , <string> direction)",
    "standard": true,
    "importNames": [
      "src::mindmap.hidden.reset",
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332962 = new Map();\n    \n                    return function(node , direction){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332962.has(this)){\n\n            var_current_scope_1609121332962.set(this , (() => {\n                const reset = include('src::mindmap.hidden.reset').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                function main(node , direction){\n\n        \r\n/**\r\n * \r\n * 重置节点\r\n * \r\n * @import reset from .reset scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {string} direction 重置方向\r\n * \r\n */\r\n\r\nif(node){\r\n\r\n    switch(direction){\r\n\r\n        case 'up':\r\n\r\n            delete node.descendantNodes ;\r\n\r\n            delete node.leafNodes ;\r\n\r\n            delete node.relationNodes ;\r\n\r\n            delete node.firstChildNodes ;\r\n\r\n            delete node.lastChildNodes ;\r\n\r\n            reset(getParentNode(node) , 'up') ;\r\n\r\n            break ;\r\n\r\n        case 'down':\r\n\r\n            delete node.ancestorNodes ;\r\n\r\n            if(node.expanded){\r\n\r\n                let {\r\n                    children\r\n                } = node ;\r\n\r\n                for(let childNode of children){\r\n\r\n                    reset(childNode , 'down') ;\r\n                }\r\n            }\r\n\r\n            break ;\r\n\r\n        default:\r\n\r\n            reset(node , 'up') ;\r\n\r\n            reset(node , 'down') ;\r\n    }\r\n}\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332962.get(this) ;\n\n        \n    \n                        return main.call(this , node , direction) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.hidden.reset"
  },
  "src::mindmap.hidden.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.hidden.leaf(<data.Record> node , <boolean> hidden)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.root",
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332979 = new Map();\n    \n                    return function(node , hidden){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332979.has(this)){\n\n            var_current_scope_1609121332979.set(this , (() => {\n                const isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                function main(node , hidden){\n\n        \r\n/**\r\n * \r\n * 有关叶子节点识别\r\n * \r\n * @import isRootNode from ..node.is.root scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {boolean} hidden 决定节点是否隐藏，隐藏为 true , 显示为 false\r\n * \r\n */\r\n\r\nlet {\r\n    id\r\n} = node,\r\nme = this,\r\n{\r\n    leafNodes\r\n} = me;\r\n\r\nif(hidden === false){\r\n\r\n    if(!isRootNode(node)){\r\n\r\n        let {\r\n            id:parentNodeId\r\n        } = getParentNode(node) ;\r\n\r\n        leafNodes.delete(parentNodeId) ;\r\n    }\r\n\r\n    leafNodes.set(id , node) ;\r\n\r\n}else{\r\n\r\n    leafNodes.delete(id) ;\r\n\r\n    if(!isRootNode(node)){\r\n    \r\n        let parentNode = getParentNode(node),\r\n        {\r\n            children\r\n        } = parentNode,\r\n        childrenHidden = true;\r\n\r\n        for(let childNode of children){\r\n\r\n            if(childNode !== node && !childNode.hidden){\r\n\r\n                childrenHidden = false ;\r\n\r\n                break ;\r\n            }\r\n        }\r\n\r\n        if(childrenHidden){\r\n\r\n            leafNodes.set(parentNode.id , parentNode) ;\r\n        }\r\n    }            \r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332979.get(this) ;\n\n        \n    \n                        return main.call(this , node , hidden) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.hidden.leaf"
  },
  "src::mindmap.hidden.level": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.hidden.level(<data.Record> node , <boolean> hidden)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121332996 = new Map();\n    \n                    return function(node , hidden){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121332996.has(this)){\n\n            var_current_scope_1609121332996.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                function main(node , hidden){\n\n        \r\n/**\r\n * \r\n * 设置脑图节点层次\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {boolean} hidden 决定节点是否隐藏，隐藏为 true , 显示为 false\r\n * \r\n */\r\n\r\n if(hidden){\r\n\r\n    node.level = -1 ;\r\n \r\n }else{\r\n\r\n    let parentNode,\r\n        noLevelNodes = [\r\n            node\r\n        ];\r\n\r\n    while(parentNode = getParentNode(node)){\r\n\r\n        let {\r\n            level\r\n        } = parentNode ;\r\n\r\n        if(level === -1){\r\n\r\n            noLevelNodes.unshift(parentNode) ;\r\n        \r\n        }else{\r\n\r\n            for(let noLevelNode of noLevelNodes){\r\n\r\n                noLevelNode.level = ++ level ;\r\n            }\r\n\r\n            noLevelNodes.length = 0 ;\r\n\r\n            break ;\r\n        }\r\n    }\r\n\r\n    if(noLevelNodes.length){\r\n\r\n        let level = 0 ;\r\n\r\n        for(let noLevelNode of noLevelNodes){\r\n\r\n            noLevelNode.level = level ++ ;\r\n        }\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332996.get(this) ;\n\n        \n    \n                        return main.call(this , node , hidden) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.hidden.level"
  },
  "src::mindmap.hidden": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.hidden(<data.Record> node , <boolean> hidden)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.root",
      "src::mindmap.node.parent",
      "src::mindmap.hidden.reset",
      "src::mindmap.hidden.leaf",
      "src::mindmap.hidden.level"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isRootNode;\n    \n                    let var_init_locked_1609121332493;\n \n                    \n\n                    const var_current_scope_1609121332493 = new Map();\n    \n                    return function(node , hidden){\n    \n                        \n        if(!var_init_locked_1609121332493){\n\n            isRootNode = include('src::mindmap.node.is.root');\n\n            var_init_locked_1609121332493 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121332493.has(this)){\n\n            var_current_scope_1609121332493.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst reset = include('src::mindmap.hidden.reset').bind(this);\nconst leaf = include('src::mindmap.hidden.leaf').bind(this);\nconst level = include('src::mindmap.hidden.level').bind(this);\n\n                function main(node , hidden){\n\n        \r\n/**\r\n * \r\n * 设置节点隐藏属性\r\n * \r\n * @import isRootNode from .node.is.root\r\n * \r\n * @import getParentNode from .node.parent scoped\r\n * \r\n * @import reset from .hidden.reset scoped\r\n * \r\n * @import leaf from .hidden.leaf scoped\r\n * \r\n * @import level from .hidden.level scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {boolean} hidden 决定节点是否隐藏，隐藏为 true , 显示为 false\r\n * \r\n * @return {boolean} 节点隐藏状态\r\n * \r\n */\r\n\r\nlet {\r\n    id\r\n} = node,\r\nme = this,\r\n{\r\n    visibilityNodes\r\n} = me;\r\n\r\nreset(node) ;\r\n\r\nleaf(node , hidden) ;\r\n\r\nlevel(node , hidden) ;\r\n\r\nif(hidden === false){\r\n\r\n    visibilityNodes.set(id , node) ;\r\n\r\n}else{\r\n\r\n    visibilityNodes.delete(id) ;\r\n\r\n    node.selected = false ;\r\n}\r\n\r\nreturn hidden ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121332493.get(this) ;\n\n        \n    \n                        return main.call(this , node , hidden) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.hidden"
  },
  "src::mindmap.node.unsized.register": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.unsized.register(<data.Record> node , <boolean> forceSize)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node , forceSize){\n\n        \r\n/**\r\n * \r\n * 登记尺寸未设置的脑图节点\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {boolean} [forceSize = false] 强制重新计算大小 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    unsizedNodes\r\n } = me,\r\n {\r\n    id,\r\n    hidden,\r\n    width,\r\n    height\r\n } = node;\r\n\r\n if(!unsizedNodes.has(id)){\r\n\r\n   if((!hidden && !(width !== false && height !== false)) || forceSize){\r\n\r\n      unsizedNodes.set(id , node) ;\r\n\r\n      me.fireNodeUnsizedEvent() ;\r\n   }\r\n }\n\n    }\n    \n                    return function(node , forceSize = false){\n    \n                        \n    \n                        return main.call(this , node , forceSize) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.unsized.register"
  },
  "src::mindmap.node.unsized.unregister": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.unsized.unregister(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 注销尺寸已设置的脑图节点\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   unsizedNodes\r\n} = me,\r\n{\r\n   id\r\n} = node;\r\n\r\nif(unsizedNodes.has(id)){\r\n\r\n   unsizedNodes.delete(id) ;\r\n\r\n   me.fireNodeSizedEvent() ;\r\n}\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.unsized.unregister"
  },
  "src::mindmap.hidden.after": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.hidden.after(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.unsized.register",
      "src::mindmap.node.unsized.unregister"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333013 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333013.has(this)){\n\n            var_current_scope_1609121333013.set(this , (() => {\n                const register = include('src::mindmap.node.unsized.register').bind(this);\nconst unregister = include('src::mindmap.node.unsized.unregister').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 设置隐藏属性之后调用\r\n * \r\n * @import register from ..node.unsized.register scoped\r\n * \r\n * @import unregister from ..node.unsized.unregister scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n */\r\n\r\n if(node.hidden){\r\n\r\n    unregister(node) ;\r\n \r\n }else{\r\n\r\n    register(node) ;\r\n }\r\n\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333013.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.hidden.after"
  },
  "src::mindmap.selected": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.selected(<data.Record> node , <boolean> selected)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node , selected){\n\n        \r\n/**\r\n * \r\n * 设置选定状态\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {boolean} selected 节点选定状态\r\n * \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   selectedNode\r\n} = me;\r\n\r\n if(selected){\r\n\r\n    if(selectedNode){\r\n\r\n       selectedNode.selected = false ;\r\n    }\r\n\r\n    me.selectedNode = node ;\r\n \r\n }else if(node === selectedNode){\r\n\r\n   delete me.selectedNode ;\r\n   \r\n }\r\n\r\n return selected ;\n\n    }\n    \n                    return function(node , selected){\n    \n                        \n    \n                        return main.call(this , node , selected) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.selected"
  },
  "src::mindmap.indicated": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.indicated(<data.Record> node , <boolean> indicated)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node , indicated){\n\n        \r\n/**\r\n * \r\n * 设置节点指示标识\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {boolean} indicated 指示标识值\r\n * \r\n * @return {boolean} 提示标识值 \r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    restructureIndicatedNode\r\n } = me ;\r\n\r\n if(indicated){\r\n\r\n    if(restructureIndicatedNode){\r\n\r\n        restructureIndicatedNode.indicated = false ;\r\n    }\r\n\r\n    me.restructureIndicatedNode = node ;\r\n }\r\n\r\n return indicated ;\n\n    }\n    \n                    return function(node , indicated){\n    \n                        \n    \n                        return main.call(this , node , indicated) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.indicated"
  },
  "src::mindmap.ellipsis": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.ellipsis(<data.Record> node , <boolean> ellipsis)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node , ellipsis){\n\n        \r\n/**\r\n * \r\n * 设置节点忽略状态\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {boolean} ellipsis 忽略状态\r\n * \r\n * @return {boolean} 忽略状态 \r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n if(ellipsis){\r\n\r\n    let {\r\n        ellipsisRootNode\r\n    } = me ;\r\n\r\n    if(ellipsisRootNode){\r\n\r\n        ellipsisRootNode.ellipsis = false ;\r\n    }\r\n\r\n    me.ellipsisRootNode = node ;\r\n\r\n }else{\r\n\r\n    delete me.ellipsisRootNode ;\r\n }\r\n\r\n return ellipsis ;\n\n    }\n    \n                    return function(node , ellipsis){\n    \n                        \n    \n                        return main.call(this , node , ellipsis) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.ellipsis"
  },
  "src::mindmap.nodes.relation.descendant": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.relation.descendant(<data.Reocrd> node , <boolean> isVisible)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.relation.descendant"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDescendantNodes;\n    \n                    let var_init_locked_1609121333168;\n    \n                    \n\n                    function main(node , isVisible){\n\n        \r\n/**\r\n * \r\n * 获取所有子孙节点\r\n * \r\n * @import getDescendantNodes from .descendant\r\n * \r\n * @param {data.Reocrd} node 节点\r\n * \r\n * @param {boolean} [isVisible = true] 是否只获取可见的节点\r\n * \r\n * @return {array} 节点集合\r\n * \r\n */\r\n\r\nlet {\r\n    descendantNodes\r\n} = node ;\r\n\r\nif(descendantNodes){\r\n\r\n    return descendantNodes ;\r\n}\r\n\r\nlet {\r\n    expanded,\r\n    children\r\n} = node;\r\n\r\ndescendantNodes = node.descendantNodes = [] ;\r\n\r\nif(expanded || !isVisible){\r\n\r\n    for(let childNode of children){\r\n\r\n        descendantNodes.push(childNode , ...getDescendantNodes(childNode , isVisible)) ;\r\n    }\r\n\r\n}\r\n\r\nreturn descendantNodes ;\n\n    }\n    \n                    return function(node , isVisible = true){\n    \n                        \n        if(!var_init_locked_1609121333168){\n\n            getDescendantNodes = include('src::mindmap.nodes.relation.descendant');\n\n            var_init_locked_1609121333168 = true ;\n        }\n        \n    \n                        return main.call(this , node , isVisible) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.relation.descendant"
  },
  "src::mindmap.nodes.relation.ancestor": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.relation.ancestor(<data.Recorder> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333186 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333186.has(this)){\n\n            var_current_scope_1609121333186.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取所有祖先节点\r\n * \r\n * @import getParentNode from ....node.parent scoped\r\n * \r\n * @param {data.Recorder} node 节点\r\n * \r\n * @return {array} 祖先节点集合\r\n * \r\n */\r\n\r\nlet {\r\n    ancestorNodes\r\n} = node ;\r\n\r\nif(ancestorNodes){\r\n\r\n    return ancestorNodes ;\r\n}\r\n\r\nlet parentNode;\r\n\r\nancestorNodes = node.ancestorNodes = [] ;\r\n\r\nwhile(parentNode = getParentNode(node)){\r\n\r\n    if(!parentNode.hidden){\r\n\r\n        ancestorNodes.push(parentNode) ;\r\n\r\n        node = parentNode ;\r\n    \r\n    }else{\r\n\r\n        break ;\r\n    }\r\n}\r\n\r\nreturn ancestorNodes ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333186.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.relation.ancestor"
  },
  "src::mindmap.nodes.relation": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.relation(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.relation.descendant",
      "src::mindmap.nodes.relation.ancestor"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDescendantNodes;\n    \n                    let var_init_locked_1609121333146;\n \n                    \n\n                    const var_current_scope_1609121333146 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121333146){\n\n            getDescendantNodes = include('src::mindmap.nodes.relation.descendant');\n\n            var_init_locked_1609121333146 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333146.has(this)){\n\n            var_current_scope_1609121333146.set(this , (() => {\n                const getAncestorNodes = include('src::mindmap.nodes.relation.ancestor').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得指定节点的所有关联\r\n * \r\n * @import getDescendantNodes from .relation.descendant\r\n * \r\n * @import getAncestorNodes from .relation.ancestor scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {array} 关联节点集合 \r\n * \r\n */\r\n\r\n\r\nlet {\r\n    relationNodes\r\n} = node ;\r\n\r\nif(relationNodes){\r\n\r\n    return relationNodes ;\r\n}\r\n\r\nlet {\r\n    hidden\r\n} = node;\r\n\r\nrelationNodes = node.relationNodes = [] ;\r\n\r\nif(!hidden){\r\n\r\n    relationNodes.push(node , ...getDescendantNodes(node) , ...getAncestorNodes(node)) ;\r\n\r\n\r\n}\r\n\r\nreturn relationNodes ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333146.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.relation"
  },
  "src::mindmap.node.is.visibility": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.is.visibility(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 是否为可见节点\r\n * \r\n * @param {data.Record}  node\r\n * \r\n * @return {boolean} 如果为可见节点则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return node.hidden === false;\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.is.visibility"
  },
  "src::mindmap.node.is.normal": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.is.normal(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.visibility"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is;\n    \n                    let var_init_locked_1609121333205;\n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 是否为正常可见节点\r\n * \r\n * @import is from .visibility\r\n * \r\n * @param {data.Record}  node\r\n * \r\n * @return {boolean} 如果为正常节点则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\n return is(node) && node.placeholder === false && node.restructuring === false;\n\n    }\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121333205){\n\n            is = include('src::mindmap.node.is.visibility');\n\n            var_init_locked_1609121333205 = true ;\n        }\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.is.normal"
  },
  "src::mindmap.nodes.visibility": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.nodes.visibility()",
    "standard": true,
    "importNames": [
      "src::math.region.xy.center",
      "src::math.region.xy.right",
      "src::math.point.line.distance",
      "src::mindmap.nodes.relation",
      "src::mindmap.node.region.scope",
      "src::math.region.from",
      "src::math.region.outOfBoundOffset.y",
      "src::mindmap.node.is.normal",
      "src::mindmap.node.data",
      "src::math.region.translate",
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getCenterXY,getRightXY,getDistance,from,getOutOfBoundOffsetY,is,translate,isDefined;\n    \n                    let var_init_locked_1609121333119;\n    \n                    let var_class_1609121333119;\n    \n                    \n\n                    const var_current_scope_1609121333119 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121333119){\n\n            getCenterXY = include('src::math.region.xy.center');\ngetRightXY = include('src::math.region.xy.right');\ngetDistance = include('src::math.point.line.distance');\nfrom = include('src::math.region.from');\ngetOutOfBoundOffsetY = include('src::math.region.outOfBoundOffset.y');\nis = include('src::mindmap.node.is.normal');\ntranslate = include('src::math.region.translate');\nisDefined = include('src::is.defined');\n\n            var_init_locked_1609121333119 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333119.has(this)){\n\n            var_current_scope_1609121333119.set(this , (() => {\n                const getRelationNodes = include('src::mindmap.nodes.relation').bind(this);\nconst getRegion = include('src::mindmap.node.region.scope').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                \n            \r\n/**\r\n * \r\n * 可视化节点集合\r\n * \r\n * @import getCenterXY from math.region.xy.center\r\n * \r\n * @import getRightXY from math.region.xy.right\r\n * \r\n * @import getDistance from math.point.line.distance\r\n * \r\n * @import getRelationNodes from .relation scoped\r\n * \r\n * @import getRegion from ..node.region.scope scoped\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import getOutOfBoundOffsetY from math.region.outOfBoundOffset.y\r\n * \r\n * @import is from ..node.is.normal\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @import translate from math.region.translate\r\n * \r\n * @import is.defined\r\n * \r\n */\r\n\r\n\r\n class main extends Map{\r\n\r\n    constructor(){\r\n\r\n        super() ;\r\n\r\n        let me = this ;\r\n        \r\n        me.sortedXNodeIndexes = new Map() ;\r\n\r\n        me.sortedYNodeIndexes = new Map() ;\r\n    }\r\n\r\n    clear(){\r\n\r\n        super.clear() ;\r\n\r\n        let {\r\n            sortedXNodeIndexes,\r\n            sortedYNodeIndexes\r\n        } = this ;\r\n\r\n        sortedXNodeIndexes.clear() ;\r\n\r\n        sortedYNodeIndexes.clear() ;\r\n    }\r\n\r\n    resort(){\r\n\r\n        let me = this,\r\n        nodes = me.nodes = Array.from(me.values()).map(node => {\r\n\r\n            let region = from(node) ;\r\n\r\n            return {\r\n                xy:getCenterXY(region),\r\n                rightXY:getRightXY(region),\r\n                node\r\n            } ;\r\n\r\n        }),\r\n        {\r\n            sortedXNodeIndexes,\r\n            sortedYNodeIndexes\r\n        } = me;\r\n\r\n        sortedXNodeIndexes.clear() ;\r\n\r\n        sortedYNodeIndexes.clear() ;\r\n\r\n        me.sortedXNodes = nodes.sort(({\r\n            xy:startXY\r\n        } , {\r\n            xy:endXY\r\n        }) => startXY.x - endXY.x).map(({\r\n            xy,\r\n            node\r\n        } , index) => {\r\n\r\n            sortedXNodeIndexes.set(node , index) ;\r\n\r\n            return {\r\n                value:xy.x,\r\n                xy,\r\n                node\r\n            } ;\r\n        }) ;\r\n\r\n        me.sortedYNodes = nodes.sort(({\r\n            xy:startXY\r\n        } , {\r\n            xy:endXY\r\n        }) => startXY.y - endXY.y).map(({\r\n            xy,\r\n            node\r\n        } , index) => {\r\n\r\n            sortedYNodeIndexes.set(node , index) ;\r\n\r\n            return {\r\n                value:xy.y,\r\n                xy,\r\n                node\r\n            } ;\r\n        }) ;\r\n    }\r\n\r\n    getNearestParentNode(xy){\r\n\r\n        let {\r\n            nodes\r\n        } = this;\r\n\r\n        for(let {\r\n            node\r\n        } of nodes){\r\n\r\n            if(!is(node)){\r\n\r\n                continue ;\r\n            }\r\n\r\n            let parentNode = getNearestParentNode(node , xy) ;\r\n\r\n            if(parentNode){\r\n\r\n                return parentNode ;\r\n            }\r\n        }\r\n    }\r\n\r\n    getNearestNode(node , direction){\r\n\r\n        let {\r\n            sortedYNodes,\r\n            sortedYNodeIndexes,\r\n            sortedXNodes,\r\n            sortedXNodeIndexes\r\n        } = this,\r\n        xy,\r\n        nodes;\r\n\r\n        if(!sortedYNodeIndexes.has(node)){\r\n\r\n            return ;\r\n        }\r\n\r\n        switch(direction){\r\n\r\n            case 'right':\r\n\r\n                {\r\n                    let index = sortedXNodeIndexes.get(node),\r\n                        info = sortedXNodes[index];\r\n                        \r\n                    xy = info.xy ;\r\n\r\n                    nodes = getNearestNodes(sortedXNodes.slice(index + 1) , info.value , getRelationNodes(node)) ;\r\n\r\n                    break ;\r\n                }\r\n\r\n            case 'up':\r\n\r\n                {\r\n                    let index = sortedYNodeIndexes.get(node),\r\n                        info = sortedYNodes[index];\r\n                        \r\n                    xy = info.xy ;\r\n\r\n                    nodes = getNearestNodes(sortedYNodes.slice(0 , index).reverse() , info.value , getRelationNodes(node)) ;\r\n\r\n\r\n                    break ;\r\n                }\r\n\r\n            case 'down':\r\n\r\n                {\r\n                    let index = sortedYNodeIndexes.get(node),\r\n                        info = sortedYNodes[index];\r\n                        \r\n                    xy = info.xy ;\r\n\r\n                    nodes = getNearestNodes(sortedYNodes.slice(index + 1) , info.value , getRelationNodes(node)) ;\r\n\r\n                }\r\n        }\r\n\r\n        let {\r\n            length\r\n        } = nodes ;\r\n\r\n        if(length){\r\n\r\n            if(length === 1){\r\n\r\n                return nodes[0].node ;\r\n            }\r\n\r\n            let nearestNode,\r\n                minDistance = Infinity;\r\n\r\n            for(let {\r\n                xy:nodeXY,\r\n                node\r\n            } of nodes){\r\n\r\n                let distance =  getDistance(xy , nodeXY) ;\r\n\r\n                if(minDistance > distance){\r\n\r\n                    minDistance = distance ;\r\n\r\n                    nearestNode = node ;\r\n                }\r\n            }\r\n\r\n            return nearestNode ;\r\n        }\r\n    }\r\n }\r\n\r\n function getNearestParentNode(node , xy){\r\n\r\n    let {\r\n        x,\r\n        y\r\n    } = xy,\r\n    dataNode = data(node , [\r\n        'x',\r\n        'y',\r\n        'width',\r\n        'height'\r\n    ]),\r\n    {\r\n        right\r\n    } = from(dataNode),\r\n    offsetNodeX = dataNode.x - node.x,\r\n    offsetNodeY = dataNode.y - node.y;\r\n\r\n    if(!(x >= right)){\r\n\r\n        return ;\r\n    }\r\n\r\n    let region = from(getRegion(node)) ;\r\n\r\n    region = translate(region , {\r\n        x:region.left + offsetNodeX,\r\n        y:region.top + offsetNodeY\r\n    }) ;\r\n\r\n    let offsetY = getOutOfBoundOffsetY(region , y) ;\r\n\r\n    if(offsetY === 0){\r\n\r\n        let {\r\n            children,\r\n            expanded\r\n        } = node ;\r\n\r\n        if(expanded){\r\n\r\n            for(let childNode of children){\r\n\r\n                if(!is(childNode)){\r\n\r\n                    continue ;\r\n                }    \r\n    \r\n                let parentNode = getNearestParentNode(childNode , xy) ;\r\n        \r\n                if(parentNode){\r\n                    \r\n                    return parentNode ;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return node ;\r\n    }\r\n }\r\n\r\n function getNearestNodes(infos , ignoreValue , ignoreNodes){\r\n\r\n    let value,\r\n        result = [];\r\n\r\n    for(let info of infos){\r\n\r\n        let {\r\n            value:nodeValue,\r\n            node\r\n        } = info ;\r\n\r\n        if(nodeValue === ignoreValue || ignoreNodes.includes(node)){\r\n\r\n            continue ;\r\n        }\r\n \r\n        if(!isDefined(value)){\r\n\r\n            value = nodeValue ;\r\n\r\n        }\r\n\r\n        result.push(info) ;\r\n    }\r\n\r\n    return result ;\r\n }\n\n            var_class_1609121333119 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121333119 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::mindmap.nodes.visibility' ;\n                }\n\n            } ;\n\n            main = var_class_1609121333119 ;\n        \n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333119.get(this) ;\n\n        \n    \n                        return new main() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.visibility"
  },
  "src::function.buffer": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.buffer(<mixed> fn , {<mixed> scope , <mixed> buffer})",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121333234;\n    \n                    \n\n                    function main(fn , {scope , buffer}){\n\n        \r\n/**\r\n * \r\n * 实现懒执行模式函数\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {mixed} fn 函数\r\n * \r\n * @param {object} [config = {}] 函数配置\r\n * \r\n * @param {mixed} [config.scope] 函数作用域\r\n * \r\n * @param {mixed} [config.buffer = 0] 缓存时间\r\n * \r\n * \r\n */\r\n\r\nlet bufferId ;\r\n\r\nreturn (...args) =>{\r\n\r\n    if(bufferId){\r\n\r\n        clearTimeout(bufferId) ;\r\n\r\n        bufferId = null ;\r\n    }\r\n\r\n    bufferId = setTimeout(() => {\r\n\r\n        get(fn , scope)(...args) ;\r\n\r\n        bufferId = null ;\r\n\r\n    } , buffer) ;\r\n} ;\n\n    }\n    \n                    return function(fn , {scope , buffer = 0} = {}){\n    \n                        \n        if(!var_init_locked_1609121333234){\n\n            get = include('src::function.get');\n\n            var_init_locked_1609121333234 = true ;\n        }\n        \n    \n                        return main.call(this , fn , {scope , buffer}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.buffer"
  },
  "src::mindmap.data.node.parent": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.data.node.parent(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333296 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333296.has(this)){\n\n            var_current_scope_1609121333296.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取指定节点的父节点引用\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node 节点\r\n * \r\n * @return {data.Record} 父节点 \r\n * \r\n */\r\n\r\n node = from(node) ;\r\n\r\n if(node){\r\n\r\n    let {\r\n       parentNodeId\r\n    } = node ;\r\n\r\n    if(parentNodeId){\r\n\r\n      return from(parentNodeId) ;\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333296.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.parent"
  },
  "src::mindmap.data": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.data(<array> mindNodes , <boolean> generateLines)",
    "standard": true,
    "importNames": [
      "src::math.region.xy.center",
      "src::math.region.xy.right",
      "src::math.region.xy.left",
      "src::math.region.from",
      "src::mindmap.data.node.parent",
      "src::mindmap.node.is.root",
      "src::mindmap.node.is.leaf",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getRegionCenterXY,getRegionRightXY,getRegionLeftXY,from;\n    \n                    let var_init_locked_1610693101811;\n \n                    \n\n                    const var_current_scope_1610693101811 = new Map();\n    \n                    return function(mindNodes , generateLines = false){\n    \n                        \n        if(!var_init_locked_1610693101811){\n\n            getRegionCenterXY = include('src::math.region.xy.center');\ngetRegionRightXY = include('src::math.region.xy.right');\ngetRegionLeftXY = include('src::math.region.xy.left');\nfrom = include('src::math.region.from');\n\n            var_init_locked_1610693101811 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693101811.has(this)){\n\n            var_current_scope_1610693101811.set(this , (() => {\n                const getParentNode = include('src::mindmap.data.node.parent').bind(this);\nconst isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst isLeafNode = include('src::mindmap.node.is.leaf').bind(this);\nconst getNodeData = include('src::mindmap.node.data').bind(this);\n\n                \r\n/**\r\n * \r\n * 输出脑图节点\r\n * \r\n * @import getRegionCenterXY from math.region.xy.center\r\n * \r\n * @import getRegionRightXY from math.region.xy.right\r\n * \r\n * @import getRegionLeftXY from math.region.xy.left\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import getParentNode from .data.node.parent scoped\r\n * \r\n * @import isRootNode from .node.is.root scoped\r\n * \r\n * @import isLeafNode from .node.is.leaf scoped\r\n * \r\n * @import getNodeData from .node.data scoped\r\n * \r\n * @param {array} mindNodes 节点集合\r\n * \r\n * @param {boolean} [generateLines = false] 生成连线信息 \r\n * \r\n * @return {array} 处理后的脑图节点\r\n * \r\n */\r\n\r\n function get(node , data){\r\n\r\n    if(!data.has(node)){\r\n\r\n        let nodeData = getNodeData(node),\r\n            region = from(nodeData) ;\r\n\r\n        data.set(node , {\r\n          data:nodeData,\r\n          rightXY:getRegionRightXY(region),\r\n          leftXY:getRegionLeftXY(region),\r\n          centerXY:getRegionCenterXY(region)\r\n        }) ;\r\n    }\r\n\r\n    return data.get(node) ;\r\n }\r\n\r\n function getData(node , data){\r\n\r\n    return get(node , data).data ;\r\n }\r\n\r\n function getRightXY(node , data){\r\n\r\n    return get(node , data).rightXY ;\r\n }\r\n\r\n function getLeftXY(node , data){\r\n\r\n    return get(node , data).leftXY ;\r\n }\r\n\r\n function getCenterXY(node , data){\r\n\r\n    return get(node , data).centerXY ;\r\n }\r\n\r\n function main(mindNodes , generateLines){\r\n\r\n    let nodes = [],\r\n        lines = [],\r\n        selectedNode,\r\n        data = new Map();\r\n  \r\n    mindNodes = Array.from(mindNodes) ;\r\n  \r\n    for(let mindNode of mindNodes){\r\n  \r\n      if(generateLines){\r\n  \r\n        let parentNode = getParentNode(mindNode);\r\n  \r\n        if(parentNode && mindNodes.includes(parentNode)){\r\n\r\n            let {\r\n              placeholder:indicated\r\n            } = mindNode ;\r\n  \r\n            lines.push({\r\n              indicated,\r\n              start:getData(parentNode , data),\r\n              startCenterXY:getCenterXY(parentNode , data),\r\n              startRightXY:getRightXY(parentNode , data),\r\n              end:getData(mindNode , data),\r\n              endLeftXY:getLeftXY(mindNode , data)\r\n            }) ;\r\n        }\r\n      }\r\n\r\n      let node = getData(mindNode , data) ;\r\n  \r\n      nodes.push(node) ;\r\n  \r\n      if(mindNode.selected){\r\n  \r\n        selectedNode = node ;\r\n      }\r\n    }\r\n  \r\n    return {\r\n      selectedNode,\r\n      nodes,\r\n      lines\r\n    } ;\r\n }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101811.get(this) ;\n\n        \n    \n                        return main.call(this , mindNodes , generateLines) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data"
  },
  "src::mindmap.node.sized.wait": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.sized.wait()",
    "standard": true,
    "importNames": [
      "src::event.listener.add",
      "src::mindmap.node.sized.wait"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let add;\n    \n                    let var_init_locked_1609121333322;\n \n                    \n\n                    const var_current_scope_1609121333322 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121333322){\n\n            add = include('src::event.listener.add');\n\n            var_init_locked_1609121333322 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333322.has(this)){\n\n            var_current_scope_1609121333322.set(this , (() => {\n                const wait = include('src::mindmap.node.sized.wait').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 等待所有节点都获取了尺寸\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import wait from .wait scoped\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    unsizedNodes\r\n} = me ;\r\n\r\nif(unsizedNodes.size){\r\n\r\n    return new Promise(callback =>   add(me , 'nodesized' , async () => callback(true) , {\r\n        once:true\r\n    })) ;\r\n\r\n}\r\n\r\nreturn false ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333322.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.sized.wait"
  },
  "src::mindmap.node.xy.center": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.node.xy.center(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609134759778 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609134759778.has(this)){\n\n            var_current_scope_1609134759778.set(this , (() => {\n                const isSized = include('src::mindmap.node.sized').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得节点的中间坐标\r\n * \r\n * @import isSized from ..sized scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @return {object} 坐标 \r\n * \r\n */\r\n\r\nlet {\r\n    x,\r\n    y,\r\n    hidden\r\n } = node ;\r\n\r\n if(isSized(node)){\r\n\r\n    let {\r\n        width,\r\n        height\r\n    } = node; \r\n\r\n    return {\r\n        x:x + width / 2,\r\n        y:y + height / 2\r\n    } ;\r\n }\r\n\r\n return {\r\n     x,\r\n     y\r\n } ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609134759778.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.xy.center"
  },
  "src::mindmap.node.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.move(<data.Record|array> node , <string|object> property , <number> distance)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.move",
      "src::is.object.simple",
      "src::is.array"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let move,isObject,isArray;\n    \n                    let var_init_locked_1609121333378;\n    \n                    \n\n                    function main(node , property , distance){\n\n        \r\n/**\r\n * \r\n * 连同子孙节点纵坐标移动\r\n * \r\n * @import move from .move\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @param {data.Record|array} node 脑图节点\r\n * \r\n * @param {string|object} property 坐标名称\r\n * \r\n * @param {number} [distance] 移动距离\r\n * \r\n */\r\n\r\n if(isArray(node)){\r\n\r\n    let nodes = node ;\r\n\r\n    for(let node of nodes){\r\n\r\n        move(node , property , distance) ;\r\n    }\r\n\r\n }else{\r\n\r\n    let {\r\n        hidden\r\n    } = node ;\r\n\r\n    if(!hidden){\r\n\r\n        if(isObject(property)){\r\n\r\n            let {\r\n                x,\r\n                y\r\n            } = property ;\r\n\r\n            node.x += x ;\r\n\r\n            node.y += y ;\r\n\r\n        }else{\r\n\r\n            node[property] += distance ;\r\n        }\r\n\r\n        let {\r\n            expanded\r\n        } = node ;\r\n\r\n        if(expanded){\r\n\r\n            let {\r\n                children\r\n            } = node ;\r\n\r\n            for(let childNode of children){\r\n\r\n                move(childNode , property , distance) ;\r\n            }\r\n        }\r\n    }\r\n }\n\n    }\n    \n                    return function(node , property , distance){\n    \n                        \n        if(!var_init_locked_1609121333378){\n\n            move = include('src::mindmap.node.move');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\n\n            var_init_locked_1609121333378 = true ;\n        }\n        \n    \n                        return main.call(this , node , property , distance) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.move"
  },
  "src::mindmap.node.move.y": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.move.y(<data.Record> node , <number> distance)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let move;\n    \n                    let var_init_locked_1609121333359;\n    \n                    \n\n                    function main(node , distance){\n\n        \r\n/**\r\n * \r\n * 连同子孙节点纵坐标移动\r\n * \r\n * @import move from ..move\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {number} distance 移动距离\r\n * \r\n */\r\n\r\nmove(node , 'y' , distance) ;\n\n    }\n    \n                    return function(node , distance){\n    \n                        \n        if(!var_init_locked_1609121333359){\n\n            move = include('src::mindmap.node.move');\n\n            var_init_locked_1609121333359 = true ;\n        }\n        \n    \n                        return main.call(this , node , distance) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.move.y"
  },
  "src::mindmap.node.move.x": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.move.x(<data.Record> node , <number> distance)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.move"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let move;\n    \n                    let var_init_locked_1609121333399;\n    \n                    \n\n                    function main(node , distance){\n\n        \r\n/**\r\n * \r\n * 连同子孙节点横坐标移动\r\n * \r\n * @import move from ..move\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {number} distance 移动距离\r\n * \r\n */\r\n\r\n move(node , 'x' , distance) ;\n\n    }\n    \n                    return function(node , distance){\n    \n                        \n        if(!var_init_locked_1609121333399){\n\n            move = include('src::mindmap.node.move');\n\n            var_init_locked_1609121333399 = true ;\n        }\n        \n    \n                        return main.call(this , node , distance) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.move.x"
  },
  "src::mindmap.node.move.to": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.move.to(<data.Record> node , <string|object> property , <number> value)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.move",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let move,isObject;\n    \n                    let var_init_locked_1609121333434;\n    \n                    \n\n                    function main(node , property , value){\n\n        \r\n/**\r\n * \r\n * 连同子孙节点纵坐标移动\r\n * \r\n * @import move from ..move\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {string|object} property 坐标名称\r\n * \r\n * @param {number} [value] 移动距离\r\n * \r\n */\r\n\r\nlet {\r\n    hidden\r\n } = node ;\r\n\r\n if(!hidden){\r\n\r\n    if(isObject(property)){\r\n\r\n        let {\r\n            x,\r\n            y\r\n        } = property,\r\n        oldX = node.x,\r\n        oldY = node.y;\r\n\r\n        node.x = x ;\r\n\r\n        node.y = y ;\r\n\r\n        property = {\r\n            x:x - oldX,\r\n            y:y - oldY\r\n        } ;\r\n\r\n    }else{\r\n\r\n        let oldValue = node[property] ;\r\n\r\n        node[property] = value ;\r\n\r\n        value -= oldValue ;\r\n    }\r\n\r\n    let {\r\n        expanded\r\n    } = node ;\r\n\r\n    if(expanded){\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        for(let childNode of children){\r\n\r\n            move(childNode , property , value) ;\r\n        }\r\n    }\r\n }\n\n    }\n    \n                    return function(node , property , value){\n    \n                        \n        if(!var_init_locked_1609121333434){\n\n            move = include('src::mindmap.node.move');\nisObject = include('src::is.object.simple');\n\n            var_init_locked_1609121333434 = true ;\n        }\n        \n    \n                        return main.call(this , node , property , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.move.to"
  },
  "src::mindmap.node.move.to.y": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.move.to.y(<data.Record> node , <number> y)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.move.to"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let move;\n    \n                    let var_init_locked_1609121333416;\n    \n                    \n\n                    function main(node , y){\n\n        \r\n/**\r\n * \r\n * 连同子孙节点纵坐标移动\r\n * \r\n * @import move from ..to\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @param {number} y 移动至的纵坐标\r\n * \r\n */\r\n\r\nmove(node , 'y' , y) ;\n\n    }\n    \n                    return function(node , y){\n    \n                        \n        if(!var_init_locked_1609121333416){\n\n            move = include('src::mindmap.node.move.to');\n\n            var_init_locked_1609121333416 = true ;\n        }\n        \n    \n                        return main.call(this , node , y) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.move.to.y"
  },
  "src::mindmap.fire.draw": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.fire.draw()",
    "standard": true,
    "importNames": [
      "src::mindmap.region",
      "src::mindmap.data",
      "src::mindmap.node.root",
      "src::mindmap.nodes.relation.descendant"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101879 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101879.has(this)){\n\n            var_current_scope_1610693101879.set(this , (() => {\n                const region = include('src::mindmap.region').bind(this);\nconst data = include('src::mindmap.data').bind(this);\nconst getRootNode = include('src::mindmap.node.root').bind(this);\nconst getDescendantNodes = include('src::mindmap.nodes.relation.descendant').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 触发绘制事件\r\n * \r\n * @import region from ..region scoped\r\n * \r\n * @import data from ..data scoped\r\n * \r\n * @import getRootNode from ..node.root scoped\r\n * \r\n * @import getDescendantNodes from ..nodes.relation.descendant scoped\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    rootNode,\r\n    visibilityNodes\r\n } = me,\r\n mindNodes;\r\n\r\n if(rootNode === getRootNode()){\r\n\r\n   mindNodes = visibilityNodes.values();\r\n \r\n }else{\r\n\r\n   rootNode = getRootNode() ;\r\n\r\n   mindNodes = [\r\n      rootNode,\r\n      ...getDescendantNodes(rootNode)\r\n   ] ;\r\n }\r\n\r\n let {\r\n     nodes,\r\n     selectedNode,\r\n     lines\r\n } = data(mindNodes , true),\r\n params = {\r\n   nodes,\r\n   lines,\r\n   selectedNode,\r\n   canvas:region()\r\n};\r\n\r\n me.fireEvent('draw' , params) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101879.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.fire.draw"
  },
  "src::mindmap.nodes.child.visible": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.child.visible(<data.Record> node)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(node){\n\n        \r\n/**\r\n * \r\n * 获得未隐藏的子节点\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {array} 可视子节点集合\r\n * \r\n */\r\n\r\n let {\r\n    hidden,\r\n    expanded\r\n } = node ;\r\n\r\n if(!hidden && expanded){\r\n\r\n    let {\r\n        children\r\n    } = node,\r\n    nodes = []; \r\n\r\n    for(let childNode of children){\r\n\r\n        if(!childNode.hidden){\r\n\r\n            nodes.push(childNode) ;\r\n        }        \r\n    }\r\n\r\n    return nodes ;\r\n }\r\n\r\n return [] ;\n\n    }\n    \n                    return function(node){\n    \n                        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.child.visible"
  },
  "src::mindmap.node.level": {
    "meta": "code.meta.script.function",
    "signature": "<Number> src::mindmap.node.level(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333510 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333510.has(this)){\n\n            var_current_scope_1609121333510.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 实时获取节点深度\r\n * \r\n * @import getParentNode from .parent scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {Number} 节点深度 \r\n * \r\n */\r\n\r\nif(!node.hidden){\r\n\r\n    let level = 1,\r\n        parentNode;\r\n\r\n    while(parentNode = getParentNode(node)){\r\n\r\n        if(!parentNode.hidden && !parentNode.ellipsis){\r\n\r\n            level ++ ;\r\n\r\n            node = parentNode ;\r\n        \r\n        }else{\r\n\r\n            break ;\r\n        }\r\n    }\r\n\r\n    return level ;\r\n}\r\n\r\nreturn 0 ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333510.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.level"
  },
  "src::mindmap.node.leaf.deepest": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.leaf.deepest(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.leaf",
      "src::mindmap.node.level"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333492 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333492.has(this)){\n\n            var_current_scope_1609121333492.set(this , (() => {\n                const getLeafNodes = include('src::mindmap.nodes.leaf').bind(this);\nconst getLevel = include('src::mindmap.node.level').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取最深的叶子节点\r\n * \r\n * @import getLeafNodes from ....nodes.leaf scoped\r\n * \r\n * @import getLevel from ..level scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {data.Record} 叶子节点 \r\n * \r\n */\r\n\r\n let nodes = getLeafNodes(node),\r\n     maxLevel = 0,\r\n     maxLevelNode;\r\n\r\n for(let node of nodes){\r\n\r\n    let level = getLevel(node) ;\r\n\r\n    if(maxLevel < level){\r\n\r\n        maxLevel = level ;\r\n\r\n        maxLevelNode = node ;\r\n    }\r\n }\r\n\r\n return maxLevelNode;\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333492.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.leaf.deepest"
  },
  "src::mindmap.node.distance.separation": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::mindmap.node.distance.separation(<string> direction , <object> node , <number> index , <number> length)",
    "standard": true,
    "importNames": [
      "src::is.number",
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isNumber,isFunction;\n    \n                    let var_init_locked_1610693101907;\n    \n                    \n\n                    function main(direction , node , index , length){\n\n        \r\n/**\r\n * \r\n * 获取脑图节点之间的间隔值\r\n * \r\n * @import is.number\r\n * \r\n * @import is.function\r\n * \r\n * @import is.number\r\n * \r\n * @param {string} direction 相对于脑图节点间隔所在的方向\r\n * \r\n * @param {object} node 脑图节点数据\r\n * \r\n * @param {number} index 脑图节点在父节点的子节点集合中的位置\r\n * \r\n * @param {number} length 脑图节点所在的父节点的子节点集合总数\r\n * \r\n * @return {number} 返回脑图节点之间的间隔值 \r\n * \r\n */\r\n\r\n let {\r\n    nodeVerticalSeparationDistance,\r\n    nodeSeparationDistance\r\n } = this ;\r\n\r\n if(isFunction(nodeSeparationDistance)){\r\n\r\n   let distance = nodeSeparationDistance(direction , node , index , length) ;\r\n\r\n   if(isNumber(distance)){\r\n\r\n      return distance ;\r\n   }\r\n }\r\n\r\n switch(direction){\r\n\r\n    case 'bottom':\r\n\r\n        if(index < length - 1){\r\n\r\n            return nodeVerticalSeparationDistance ;\r\n        }\r\n }\r\n\r\n return 0 ;\n\n    }\n    \n                    return function(direction , node , index , length){\n    \n                        \n        if(!var_init_locked_1610693101907){\n\n            isNumber = include('src::is.number');\nisFunction = include('src::is.function');\nisNumber = include('src::is.number');\n\n            var_init_locked_1610693101907 = true ;\n        }\n        \n    \n                        return main.call(this , direction , node , index , length) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.distance.separation"
  },
  "src::mindmap.layout": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.layout(<boolean> isFireDrawEvent)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.xy.center",
      "src::mindmap.node.xy.right",
      "src::mindmap.node.region.scope",
      "src::mindmap.node.move.y",
      "src::mindmap.node.move.x",
      "src::mindmap.node.move.to.y",
      "src::mindmap.region",
      "src::mindmap.fire.draw",
      "src::function.defer",
      "src::mindmap.node.root",
      "src::mindmap.node.parent",
      "src::mindmap.nodes.child.visible",
      "src::mindmap.node.is.root",
      "src::mindmap.node.leaf.deepest",
      "src::mindmap.node.level",
      "src::math.region.from",
      "src::mindmap.node.data",
      "src::mindmap.node.distance.separation"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let moveY,moveX,moveToY,defer,from;\n    \n                    let var_init_locked_1610693101841;\n \n                    \n\n                    const var_current_scope_1610693101841 = new Map();\n    \n                    return function(isFireDrawEvent = true){\n    \n                        \n        if(!var_init_locked_1610693101841){\n\n            moveY = include('src::mindmap.node.move.y');\nmoveX = include('src::mindmap.node.move.x');\nmoveToY = include('src::mindmap.node.move.to.y');\ndefer = include('src::function.defer');\nfrom = include('src::math.region.from');\n\n            var_init_locked_1610693101841 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693101841.has(this)){\n\n            var_current_scope_1610693101841.set(this , (() => {\n                const getCenterXY = include('src::mindmap.node.xy.center').bind(this);\nconst getRightXY = include('src::mindmap.node.xy.right').bind(this);\nconst getScopeRegion = include('src::mindmap.node.region.scope').bind(this);\nconst getRegion = include('src::mindmap.region').bind(this);\nconst fireDrawEvent = include('src::mindmap.fire.draw').bind(this);\nconst getRootNode = include('src::mindmap.node.root').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst getChildNodes = include('src::mindmap.nodes.child.visible').bind(this);\nconst isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst getDeepestNode = include('src::mindmap.node.leaf.deepest').bind(this);\nconst getLevel = include('src::mindmap.node.level').bind(this);\nconst getData = include('src::mindmap.node.data').bind(this);\nconst getNodeSeparationDistance = include('src::mindmap.node.distance.separation').bind(this);\n\n                \r\n/**\r\n * \r\n * 初始化布局\r\n * \r\n * @import getCenterXY from .node.xy.center scoped\r\n * \r\n * @import getRightXY from .node.xy.right scoped\r\n * \r\n * @import getScopeRegion from .node.region.scope scoped\r\n * \r\n * @import moveY from .node.move.y\r\n * \r\n *  @import moveX from .node.move.x\r\n * \r\n * @import moveToY from .node.move.to.y\r\n * \r\n * @import getRegion from .region scoped\r\n * \r\n * @import fireDrawEvent from .fire.draw scoped\r\n * \r\n * @import defer from function.defer\r\n * \r\n * @import getRootNode from .node.root scoped\r\n * \r\n * @import getParentNode from .node.parent scoped\r\n * \r\n * @import getChildNodes from .nodes.child.visible scoped\r\n * \r\n * @import isRootNode from .node.is.root scoped\r\n * \r\n * @import getDeepestNode from .node.leaf.deepest scoped\r\n * \r\n * @import getLevel from .node.level scoped\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import getData from .node.data scoped\r\n * \r\n * @import getNodeSeparationDistance from .node.distance.separation scoped\r\n * \r\n * @param {boolean} [isFireDrawEvent = true] 是否派发绘制事件\r\n * \r\n */\r\n\r\nfunction main(isFireDrawEvent){\r\n\r\n    let me = this,\r\n    {\r\n        height:mindmapHeight,\r\n        visibilityNodes,\r\n        nodeHorizontalSeparationDistance\r\n    } = me,\r\n    rootNode = getRootNode();\r\n\r\n    rootNode.x = 0 ;\r\n\r\n    delete me.region ;\r\n\r\n    layout.call(me , rootNode) ;\r\n\r\n    if(nodeHorizontalSeparationDistance === 0){\r\n        \r\n        let {\r\n                padding,\r\n                width\r\n            } = me,\r\n            {\r\n                width:nodeWidth\r\n            } = rootNode,\r\n            regionWidth = (width - (padding.left + padding.right) - nodeWidth) / (getLevel(getDeepestNode(rootNode)) - 1);\r\n            \r\n        visibilityNodes.forEach(node => {\r\n\r\n            if(!isRootNode(node)){\r\n\r\n                let {\r\n                    right:parentNodeRight\r\n                } = from(getParentNode(node)),\r\n                {\r\n                    right:nodeRight\r\n                } = from(node);\r\n\r\n                let distance = regionWidth - (nodeRight - parentNodeRight - node.width),\r\n                {\r\n                    maxNodeHorizontalSeparationDistance,\r\n                    minNodeHorizontalSeparationDistance\r\n                } = me;\r\n\r\n                if(distance < minNodeHorizontalSeparationDistance){\r\n\r\n                    distance = minNodeHorizontalSeparationDistance ;\r\n\r\n                }else if(distance > maxNodeHorizontalSeparationDistance){\r\n\r\n                    distance = maxNodeHorizontalSeparationDistance;\r\n                }\r\n\r\n                moveX(node , distance) ;\r\n                \r\n            }\r\n\r\n        }) ;\r\n    }\r\n\r\n    let {\r\n        top,\r\n        height\r\n    } = getRegion() ;\r\n\r\n    if(mindmapHeight === height){\r\n\r\n        let {\r\n            height:rootNodeHeight\r\n        } = rootNode ;\r\n\r\n        moveToY(rootNode , height / 2 - rootNodeHeight / 2) ;\r\n\r\n    }else{\r\n\r\n        moveY(rootNode , -top) ;\r\n    }\r\n\r\n    defer(() => visibilityNodes.resort()) ;\r\n\r\n    if(isFireDrawEvent){\r\n\r\n        fireDrawEvent() ;\r\n    }\r\n}\r\n\r\nfunction layout(node){\r\n\r\n    let {\r\n        expanded,\r\n        children\r\n    } = node,\r\n    me = this,\r\n    {\r\n        nodeHorizontalSeparationDistance\r\n    } = me,\r\n    {\r\n        length\r\n    } = children;\r\n\r\n    if(expanded && length){\r\n        \r\n        let {\r\n            y,\r\n            height\r\n        } = node,\r\n        {\r\n            x:rightX\r\n        } = getRightXY(node),\r\n        childX = rightX + nodeHorizontalSeparationDistance,\r\n        childY = y;\r\n\r\n        for(let i = 0 ; i < length ; i ++){\r\n\r\n            let childNode = children[i],\r\n                dataChildNode = getData(childNode);\r\n\r\n            let topSeparationDistance = getNodeSeparationDistance('top' , dataChildNode , i , length) ;\r\n\r\n            if(topSeparationDistance){\r\n\r\n                childY += topSeparationDistance ;\r\n            }\r\n\r\n            childNode.x = childX ;\r\n\r\n            childNode.y = childY ;\r\n\r\n            layout.call(me , childNode) ;\r\n\r\n            let {\r\n                height:scopeRegionHeight\r\n            } = getScopeRegion(childNode) ;\r\n\r\n            childY += scopeRegionHeight;\r\n\r\n            let bottomSeparationDistance = getNodeSeparationDistance('bottom' , dataChildNode , i , length) ;\r\n\r\n            if(bottomSeparationDistance){\r\n\r\n                childY += bottomSeparationDistance ;\r\n            }\r\n\r\n        }\r\n\r\n        let {\r\n            height:scopeRegionHeight\r\n        } = getScopeRegion(node) ;\r\n\r\n        if(scopeRegionHeight === height){\r\n\r\n            moveY(children , (scopeRegionHeight - from(children[children.length - 1]).bottom + children[0].y) / 2) ;\r\n\r\n        }else{\r\n\r\n            node.y += (scopeRegionHeight  - height) / 2;   \r\n        }\r\n        \r\n    }\r\n\r\n}\r\n \n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101841.get(this) ;\n\n        \n    \n                        return main.call(this , isFireDrawEvent) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.layout"
  },
  "src::mindmap.layout.try": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.layout.try()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sized.wait",
      "src::mindmap.layout"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333311 = new Map();\n    \n                    return async function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333311.has(this)){\n\n            var_current_scope_1609121333311.set(this , (() => {\n                const waitNodeSized = include('src::mindmap.node.sized.wait').bind(this);\nconst layout = include('src::mindmap.layout').bind(this);\n\n                async function main(){\n\n        \r\n/**\r\n * \r\n * 尝试布局\r\n * \r\n * @import waitNodeSized from ..node.sized.wait scoped\r\n * \r\n * @import layout from ..layout scoped\r\n * \r\n */\r\n\r\n await waitNodeSized() ;\r\n\r\n layout() ;\r\n \r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333311.get(this) ;\n\n        \n    \n                        return await main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.layout.try"
  },
  "src::mindmap.api.node.indicator.has": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.api.node.indicator.has(<mixed> node , <string> id)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333561 = new Map();\n    \n                    return function(node , id){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333561.has(this)){\n\n            var_current_scope_1609121333561.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node , id){\n\n        \r\n/**\r\n * \r\n * 判断脑图节点指示器是否存在\r\n * \r\n * @import from from ......data.node.from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {string} id 组件相对于脑图节点的唯一标识\r\n * \r\n * @return {boolean} 如果指示器在脑图节点中存在则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nlet  {\r\n    indicators\r\n} = from(node) ;\r\n\r\nfor(let {\r\n    id:componentId\r\n} of indicators){\r\n\r\n    if(componentId === id){\r\n\r\n        return true ;\r\n    }\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333561.get(this) ;\n\n        \n    \n                        return main.call(this , node , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.indicator.has"
  },
  "src::mindmap.api.node.indicator.add": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.api.node.indicator.add(<mixed> node , <string> id , <mixed> config)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from",
      "src::mindmap.api.node.indicator.has"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333545 = new Map();\n    \n                    return function(node , id , config){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333545.has(this)){\n\n            var_current_scope_1609121333545.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\nconst has = include('src::mindmap.api.node.indicator.has').bind(this);\n\n                function main(node , id , config){\n\n        \r\n/**\r\n * \r\n * 添加脑图节点指示器\r\n * \r\n * @import from from ......data.node.from scoped\r\n * \r\n * @import has from .has scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {string} id 组件相对于脑图节点的唯一标识\r\n * \r\n * @param {mixed} config 组件设置\r\n * \r\n */\r\n\r\nlet  {\r\n    indicators\r\n} = from(node) ;\r\n\r\nif(!has(node , id)){\r\n\r\n    indicators.push({\r\n        id,\r\n        ...config\r\n    }) ;\r\n\r\n    this.layout() ;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333545.get(this) ;\n\n        \n    \n                        return main.call(this , node , id , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.indicator.add"
  },
  "src::mindmap.api.node.indicator.remove": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.api.node.indicator.remove(<mixed> node , <string> id)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from",
      "src::array.remove.index"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let remove;\n    \n                    let var_init_locked_1609121333571;\n \n                    \n\n                    const var_current_scope_1609121333571 = new Map();\n    \n                    return function(node , id){\n    \n                        \n        if(!var_init_locked_1609121333571){\n\n            remove = include('src::array.remove.index');\n\n            var_init_locked_1609121333571 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333571.has(this)){\n\n            var_current_scope_1609121333571.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node , id){\n\n        \r\n/**\r\n * \r\n * 移除脑图节点指示器\r\n * \r\n * @import from from ......data.node.from scoped\r\n * \r\n * @import remove from array.remove.index\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {string} id 组件相对于脑图节点的唯一标识\r\n * \r\n */\r\n\r\nlet  {\r\n    indicators\r\n} = from(node),\r\nindex = 0;\r\n\r\nfor(let {\r\n    id:componentId\r\n} of indicators){\r\n\r\n    if(componentId === id){\r\n\r\n        remove(indicators , index) ;\r\n\r\n        this.layout() ;\r\n\r\n        break ;\r\n    }\r\n\r\n    index ++ ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333571.get(this) ;\n\n        \n    \n                        return main.call(this , node , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.indicator.remove"
  },
  "src::mindmap.data.node.info": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.data.node.info(<mixed> node , <object> data , {<boolean> isSilentMode , <boolean> recursive})",
    "standard": true,
    "importNames": [
      "src::data.equals",
      "src::mindmap.node.data",
      "src::mindmap.node.unsized.register",
      "src::mindmap.data.node.from",
      "src::is.object.simple",
      "src::is.string",
      "src::is.array",
      "src::object.copy",
      "src::data.clone"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let equals,isObject,isString,isArray,copy,clone;\n    \n                    let var_init_locked_1610693101951;\n \n                    \n\n                    const var_current_scope_1610693101951 = new Map();\n    \n                    return function(node , data , {isSilentMode = false , recursive = false} = {}){\n    \n                        \n        if(!var_init_locked_1610693101951){\n\n            equals = include('src::data.equals');\nisObject = include('src::is.object.simple');\nisString = include('src::is.string');\nisArray = include('src::is.array');\ncopy = include('src::object.copy');\nclone = include('src::data.clone');\n\n            var_init_locked_1610693101951 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693101951.has(this)){\n\n            var_current_scope_1610693101951.set(this , (() => {\n                const getData = include('src::mindmap.node.data').bind(this);\nconst unsized = include('src::mindmap.node.unsized.register').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                \r\n/**\r\n * \r\n * 修改节点信息\r\n * \r\n * @import equals from data.equals\r\n * \r\n * @import getData from ....node.data scoped\r\n * \r\n * @import unsized from ....node.unsized.register scoped\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.string\r\n * \r\n * @import is.array\r\n * \r\n * @import copy from object.copy\r\n * \r\n * @import clone from data.clone\r\n * \r\n * @param {mixed} [node] 脑图节点\r\n * \r\n * @param {object} [data] 修改节点信息\r\n * \r\n * @param {object} [config = {}] 配置\r\n * \r\n * @param {boolean} [config.isSilentMode = false] 是否静默模式\r\n * \r\n * @param {boolean} [config.recursive = false] 是否递归，仅对于设置脑图节点属性时有效\r\n * \r\n */\r\n\r\nfunction main(node , data , {\r\n    isSilentMode,\r\n    recursive\r\n}){\r\n\r\n    let me =  this ;\r\n\r\n    node = from(node) ;\r\n\r\n    if(node){\r\n\r\n        if(isObject(data)){\r\n\r\n            if(setNodeInfo.call(me , node , data , isSilentMode)){\r\n\r\n                if(!node.hidden){\r\n\r\n                    unsized(node , true) ;\r\n\r\n                    me.layout() ;\r\n                }\r\n\r\n                if(recursive){\r\n\r\n                    let {\r\n                        children\r\n                    } = node ;\r\n\r\n                    for(let childNode of children){\r\n\r\n                        main.call(me , childNode , data , {\r\n                            isSilentMode,\r\n                            recursive\r\n                        }) ;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ;\r\n        \r\n        }else if(isString(data)){\r\n\r\n            return node[data] ;\r\n        \r\n        }else if(isArray(data)){\r\n\r\n            return copy({} , node , data) ;\r\n        }\r\n\r\n        return getData(node) ;\r\n    }\r\n}\r\n\r\nfunction setNodeInfo(node , data , isSilentMode){\r\n\r\n    let fields = Object.keys(data),\r\n        me = this,\r\n        {\r\n            nodes\r\n        } = me,\r\n        isUpdated = false;\r\n\r\n    for(let field of fields){\r\n\r\n        let value = data[field],\r\n            oldValue = node[field];\r\n\r\n        if(equals(oldValue , value)){\r\n\r\n            continue ; \r\n        }\r\n\r\n        switch(field){\r\n\r\n            case 'parentNodeId':\r\n            case 'x':\r\n            case 'y':\r\n            case 'width':\r\n            case 'height':\r\n            case 'hidden':\r\n            case 'expanded':\r\n            case 'selected':\r\n            case 'placeholder':\r\n            case 'restructuring':\r\n            case 'indicated':\r\n            case 'order':\r\n\r\n                continue ;\r\n\r\n            case 'id':\r\n\r\n            {\r\n                \r\n                let {\r\n                    id,\r\n                    children\r\n                } = node ;\r\n\r\n                if(nodes.has(value)){\r\n\r\n                    console.error(`${value} - 脑图中已经存该节点`) ;\r\n\r\n                    continue ;\r\n                }\r\n\r\n                node.id = value ;\r\n\r\n                for(let childNode of children){\r\n\r\n                    childNode.parentNodeId = value ;\r\n                }\r\n\r\n                sync.call(me , id , value) ;\r\n            }\r\n\r\n            break ;\r\n\r\n            default:\r\n\r\n                let newValue = node[field] = clone(value),\r\n                {\r\n                    id\r\n                } = node ;\r\n\r\n                if(!equals(newValue , oldValue) && !isSilentMode){\r\n\r\n                    me.fireEvent(`node${field.toLowerCase()}change` , id , value , oldValue) ;\r\n\r\n                    me.fireEvent('nodechange' , id , field , value , oldValue) ;\r\n                }\r\n        }\r\n\r\n        isUpdated = true ;\r\n    }\r\n\r\n    return isUpdated ;\r\n}\r\n\r\nfunction sync(oldId){\r\n\r\n    let {\r\n        nodes,\r\n        visibilityNodes,\r\n        unsizedNodes,\r\n        leafNodes\r\n    } = this ;\r\n\r\n    syncMap(nodes , oldId) ;\r\n\r\n    syncMap(visibilityNodes , oldId) ;\r\n\r\n    syncMap(unsizedNodes , oldId) ;\r\n\r\n    syncMap(leafNodes , oldId) ;\r\n}\r\n\r\nfunction syncMap(map , id){\r\n\r\n    if(map.has(id)){\r\n\r\n        let node = map.get(id) ;\r\n\r\n        map.delete(id) ;\r\n\r\n        map.set(node.id , node) ;\r\n    }\r\n}\r\n\r\n\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101951.get(this) ;\n\n        \n    \n                        return main.call(this , node , data , {isSilentMode , recursive}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.info"
  },
  "src::mindmap.api.node.color.background": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::mindmap.api.node.color.background(<mixed> node , <string> backgroundColor)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::mindmap.data.node.info",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121333582;\n \n                    \n\n                    const var_current_scope_1609121333582 = new Map();\n    \n                    return function(node , backgroundColor){\n    \n                        \n        if(!var_init_locked_1609121333582){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121333582 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333582.has(this)){\n\n            var_current_scope_1609121333582.set(this , (() => {\n                const info = include('src::mindmap.data.node.info').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node , backgroundColor){\n\n        \r\n/**\r\n * \r\n * 设置背景颜色\r\n * \r\n * @import is.defined\r\n * \r\n * @import info from ......data.node.info scoped\r\n * \r\n * @import from from ......data.node.from scoped\r\n * \r\n * @param {mixed} [node] 脑图节点\r\n * \r\n * @param {string} backgroundColor 背景颜色\r\n * \r\n * @return {mixed} 属性值\r\n * \r\n */\r\n\r\ninfo(node , {\r\n    backgroundColor\r\n} , false) ; \r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333582.get(this) ;\n\n        \n    \n                        return main.call(this , node , backgroundColor) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.color.background"
  },
  "src::mindmap.data.node.ancestor": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.data.node.ancestor(<mixed> node , <function> fn , <boolean> fromCurrentNode)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.parent",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333628 = new Map();\n    \n                    return function(node , fn , fromCurrentNode = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333628.has(this)){\n\n            var_current_scope_1609121333628.set(this , (() => {\n                const getParentNode = include('src::mindmap.data.node.parent').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node , fn , fromCurrentNode){\n\n        \r\n/**\r\n * \r\n * 获得祖先节点\r\n * \r\n * @import getParentNode from .parent scoped\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {function} fn 查询条件函数\r\n * \r\n * @param {boolean} [fromCurrentNode = false] 是否从当前脑图节点进行遍历\r\n * \r\n * @return {object} 祖先脑图节点\r\n * \r\n */\r\n\r\n let target ;\r\n\r\n if(fromCurrentNode){\r\n\r\n    target = node ;\r\n \r\n }else{\r\n\r\n    target = getParentNode(node) ;\r\n }\r\n\r\n while(target){\r\n\r\n    if(fn(target)){\r\n\r\n        return target ;\r\n    }\r\n\r\n    target = getParentNode(target) ;\r\n\r\n }\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333628.get(this) ;\n\n        \n    \n                        return main.call(this , node , fn , fromCurrentNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.ancestor"
  },
  "src::mindmap.api.node.ancestor.property": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::mindmap.api.node.ancestor.property(<mixed> node , <string> name , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.ancestor",
      "src::is.defined",
      "src::array.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined,from;\n    \n                    let var_init_locked_1609121333611;\n \n                    \n\n                    const var_current_scope_1609121333611 = new Map();\n    \n                    return function(node , name , value){\n    \n                        \n        if(!var_init_locked_1609121333611){\n\n            isDefined = include('src::is.defined');\nfrom = include('src::array.from');\n\n            var_init_locked_1609121333611 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333611.has(this)){\n\n            var_current_scope_1609121333611.set(this , (() => {\n                const getAncestorNode = include('src::mindmap.data.node.ancestor').bind(this);\n\n                function main(node , name , value){\n\n        \r\n/**\r\n * \r\n * 获得拥有指定属性的祖先脑图节点\r\n * \r\n * @import getAncestorNode from ......data.node.ancestor scoped\r\n * \r\n * @import is.defined\r\n * \r\n * @import from from array.from\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {mixed} value  属性值\r\n * \r\n * @return {mixed} 脑图节点\r\n * \r\n */\r\n\r\n return getAncestorNode(node , node => node[name] === value) ;\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333611.get(this) ;\n\n        \n    \n                        return main.call(this , node , name , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.ancestor.property"
  },
  "src::mindmap.api.node.selected": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.api.node.selected()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333638 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333638.has(this)){\n\n            var_current_scope_1609121333638.set(this , (() => {\n                const data = include('src::mindmap.node.data').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 获得当前选中节点\r\n * \r\n * @import data from ....node.data scoped\r\n * \r\n * @return {object} 脑图节点\r\n * \r\n */\r\n\r\n let {\r\n    selectedNode\r\n } = this ;\r\n\r\n return data(selectedNode) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333638.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.selected"
  },
  "src::mindmap.api.node.root": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.api.node.root()",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333649 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333649.has(this)){\n\n            var_current_scope_1609121333649.set(this , (() => {\n                const data = include('src::mindmap.data.node.data').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 获取根脑图节点\r\n * \r\n * @import data from ....data.node.data scoped\r\n * \r\n * @return {object} 脑图节点\r\n * \r\n */\r\n\r\n return data(this.rootNode) ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333649.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.root"
  },
  "src::mindmap.api.node.parent": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.api.node.parent(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.data",
      "src::mindmap.data.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333663 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333663.has(this)){\n\n            var_current_scope_1609121333663.set(this , (() => {\n                const data = include('src::mindmap.data.node.data').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取父脑图节点\r\n * \r\n * @import data from ....data.node.data scoped\r\n * \r\n * @import getParentNode from ....data.node.parent scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {object} 脑图节点\r\n * \r\n */\r\n\r\n return data(getParentNode(node)) ;\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333663.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.parent"
  },
  "src::mindmap.api.on": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.api.on(<string> event , <function> fn)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(event , fn){\n\n        \r\n/**\r\n * \r\n * 监听脑图事件\r\n * \r\n * @param {string} event 事件名称\r\n * \r\n * @param {function} fn 事件回调\r\n * \r\n */\r\n\r\n this.on(event ,fn) ;\n\n    }\n    \n                    return function(event , fn){\n    \n                        \n    \n                        return main.call(this , event , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.on"
  },
  "src::mindmap.api.off": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.api.off(<string> event , <function> fn)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(event , fn){\n\n        \r\n/**\r\n * \r\n * 移除监听脑图事件\r\n * \r\n * @param {string} event 事件名称\r\n * \r\n * @param {function} fn 事件回调\r\n * \r\n */\r\n\r\nthis.un(event ,fn) ;\n\n    }\n    \n                    return function(event , fn){\n    \n                        \n    \n                        return main.call(this , event , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.off"
  },
  "src::mindmap.api.node.property": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::mindmap.api.node.property(<mixed> node , <string> name , <mixed> value)",
    "standard": true,
    "importNames": [
      "src::is.defined",
      "src::mindmap.data.node.info"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121333712;\n \n                    \n\n                    const var_current_scope_1609121333712 = new Map();\n    \n                    return function(node , name , value){\n    \n                        \n        if(!var_init_locked_1609121333712){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121333712 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333712.has(this)){\n\n            var_current_scope_1609121333712.set(this , (() => {\n                const info = include('src::mindmap.data.node.info').bind(this);\n\n                function main(node , name , value){\n\n        \r\n/**\r\n * \r\n * 设置与获取脑图节点自定义属性\r\n * \r\n * @import is.defined\r\n * \r\n * @import info from ....data.node.info scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {mixed}  [value] 属性值\r\n * \r\n * @return {mixed} 属性值\r\n * \r\n */\r\n\r\n if(isDefined(value)){\r\n\r\n    info(node , {\r\n        [name]:value\r\n    } , true) ; \r\n \r\n }else{\r\n\r\n    return info(node , name) ;\r\n }\r\n\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333712.get(this) ;\n\n        \n    \n                        return main.call(this , node , name , value) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.property"
  },
  "src::mindmap.data.nodes.descendant": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.data.nodes.descendant(<mixed> node , <function> fn)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693101981 = new Map();\n    \n                    return function(node , fn){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693101981.has(this)){\n\n            var_current_scope_1610693101981.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                \r\n/**\r\n * \r\n * 获得所有的子孙节点\r\n * \r\n * @import from from ..node.from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {function} fn 查询条件函数\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\nfunction main(node , fn){\r\n\r\n    node = from(node) ;\r\n\r\n    let nodes = getDescendantNodes(node , fn || (() => ({\r\n        result:true,\r\n        next:true\r\n    }))) ;\r\n\r\n    if(nodes.length && nodes[0].id === node.id){\r\n\r\n        nodes.shift() ;\r\n    }\r\n    \r\n    return nodes ;\r\n}\r\n\r\nfunction getDescendantNodes(node , fn){\r\n\r\n    let {\r\n        result,\r\n        next\r\n    } = fn(node),\r\n    nodes = [];\r\n\r\n    if(result){\r\n\r\n        nodes.push(node) ;\r\n    }\r\n\r\n    if(next){\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        for(let childNode of children){\r\n\r\n            nodes.push(...getDescendantNodes(childNode , fn)) ;\r\n        }\r\n    }\r\n\r\n    return nodes ;\r\n}\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101981.get(this) ;\n\n        \n    \n                        return main.call(this , node , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.nodes.descendant"
  },
  "src::mindmap.api.nodes.data": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.api.nodes.data(<array> nodes)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333748 = new Map();\n    \n                    return function(nodes){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333748.has(this)){\n\n            var_current_scope_1609121333748.set(this , (() => {\n                const data = include('src::mindmap.data.node.data').bind(this);\n\n                function main(nodes){\n\n        \r\n/**\r\n * \r\n * 获得数据集合\r\n * \r\n * @import data from ....data.node.data scoped\r\n * \r\n * @param {array} nodes 一组脑图节点\r\n * \r\n * @return {array} 一组脑图节点的数据形式\r\n * \r\n */\r\n\r\n let result = [] ;\r\n\r\n for(let node of nodes){\r\n\r\n    result.push(data(node)) ;\r\n }\r\n\r\n return result ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333748.get(this) ;\n\n        \n    \n                        return main.call(this , nodes) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.nodes.data"
  },
  "src::mindmap.api.nodes.descendant": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.api.nodes.descendant(<mixed> node , <function> fn)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::mindmap.data.nodes.descendant",
      "src::mindmap.api.nodes.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121333723;\n \n                    \n\n                    const var_current_scope_1609121333723 = new Map();\n    \n                    return function(node , fn){\n    \n                        \n        if(!var_init_locked_1609121333723){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121333723 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121333723.has(this)){\n\n            var_current_scope_1609121333723.set(this , (() => {\n                const getDescendantNodes = include('src::mindmap.data.nodes.descendant').bind(this);\nconst data = include('src::mindmap.api.nodes.data').bind(this);\n\n                function main(node , fn){\n\n        \r\n/**\r\n * \r\n * 获得所有的子孙节点\r\n * \r\n * @import is.function\r\n * \r\n * @import getDescendantNodes from ....data.nodes.descendant scoped\r\n * \r\n * @import data from .data scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {function} [fn] 查询条件函数\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\n if(isFunction(fn)){\r\n\r\n    return data(getDescendantNodes(node , fn)) ;\r\n }\r\n\r\n return data(getDescendantNodes(node , () => ({\r\n    result:true,\r\n    next:true\r\n }))) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333723.get(this) ;\n\n        \n    \n                        return main.call(this , node , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.nodes.descendant"
  },
  "src::mindmap.api.nodes.descendant.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.api.nodes.descendant.leaf(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.is.leaf",
      "src::mindmap.api.nodes.descendant"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333762 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333762.has(this)){\n\n            var_current_scope_1609121333762.set(this , (() => {\n                const isLeafNode = include('src::mindmap.data.node.is.leaf').bind(this);\nconst getDescendantNodes = include('src::mindmap.api.nodes.descendant').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取所有叶子节点\r\n * \r\n * @import isLeafNode from ......data.node.is.leaf scoped\r\n * \r\n * @import getDescendantNodes from ..descendant scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\n return getDescendantNodes(node , node => ({\r\n   result:isLeafNode(node),\r\n   next:true\r\n })) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333762.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.nodes.descendant.leaf"
  },
  "src::mindmap.data.node.equals": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.data.node.equals(<mixed> node1 , <mixed> node2)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333783 = new Map();\n    \n                    return function(node1 , node2){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333783.has(this)){\n\n            var_current_scope_1609121333783.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node1 , node2){\n\n        \r\n/**\r\n * \r\n * 判断脑图节点是否相等\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node1 脑图节点\r\n * \r\n * @param {mixed} node2 脑图节点\r\n * \r\n * @return {boolean} 如果两个脑图节点相等则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n let {\r\n    id:id1\r\n } = from(node1),\r\n {\r\n    id:id2\r\n } = from(node2);\r\n\r\n return id1 === id2 ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333783.get(this) ;\n\n        \n    \n                        return main.call(this , node1 , node2) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.equals"
  },
  "src::mindmap.api.nodes.descendant.children": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.api.nodes.descendant.children(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.equals",
      "src::mindmap.api.nodes.descendant"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333771 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333771.has(this)){\n\n            var_current_scope_1609121333771.set(this , (() => {\n                const equals = include('src::mindmap.data.node.equals').bind(this);\nconst getDescendantNodes = include('src::mindmap.api.nodes.descendant').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取所有叶子节点\r\n * \r\n * @import equals from ......data.node.equals scoped\r\n * \r\n * @import getDescendantNodes from ..descendant scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {array} 节点集合 \r\n * \r\n */\r\n\r\nreturn getDescendantNodes(node , itemNode => ({\r\n    result:true,\r\n    next:equals(node , itemNode)\r\n})) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333771.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.nodes.descendant.children"
  },
  "src::mindmap.api.node.is.leaf": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.api.node.is.leaf(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.is.leaf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333795 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333795.has(this)){\n\n            var_current_scope_1609121333795.set(this , (() => {\n                const isLeafNode = include('src::mindmap.data.node.is.leaf').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 判断是否为叶子节点\r\n * \r\n * @import isLeafNode from ......data.node.is.leaf scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {boolean} 如果脑图节点为叶子节点则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n return isLeafNode(node) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333795.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.is.leaf"
  },
  "src::mindmap.api.node.is.root": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.api.node.is.root(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.is.root"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333811 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333811.has(this)){\n\n            var_current_scope_1609121333811.set(this , (() => {\n                const isRootNode = include('src::mindmap.data.node.is.root').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 判断是否为根节点\r\n * \r\n * @import isRootNode from ......data.node.is.root scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {boolean} 如果脑图节点为根节点则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn isRootNode(node) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333811.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.api.node.is.root"
  },
  "src::mindmap.constructor.api": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.constructor.api()",
    "standard": true,
    "importNames": [
      "src::mindmap.api.node.indicator.add",
      "src::mindmap.api.node.indicator.remove",
      "src::mindmap.api.node.indicator.has",
      "src::mindmap.api.node.color.background",
      "src::mindmap.api.node.ancestor.property",
      "src::mindmap.api.node.selected",
      "src::mindmap.api.node.root",
      "src::mindmap.api.node.parent",
      "src::mindmap.api.on",
      "src::mindmap.api.off",
      "src::mindmap.api.node.property",
      "src::mindmap.api.nodes.descendant",
      "src::mindmap.api.nodes.descendant.leaf",
      "src::mindmap.api.nodes.descendant.children",
      "src::mindmap.api.node.is.leaf",
      "src::mindmap.api.node.is.root"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333529 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333529.has(this)){\n\n            var_current_scope_1609121333529.set(this , (() => {\n                const addNodeIndicator = include('src::mindmap.api.node.indicator.add').bind(this);\nconst removeNodeIndicator = include('src::mindmap.api.node.indicator.remove').bind(this);\nconst hasNodeIndicator = include('src::mindmap.api.node.indicator.has').bind(this);\nconst setNodeBackgroundColor = include('src::mindmap.api.node.color.background').bind(this);\nconst getPropertyAncestorNode = include('src::mindmap.api.node.ancestor.property').bind(this);\nconst getSelectedNode = include('src::mindmap.api.node.selected').bind(this);\nconst getRootNode = include('src::mindmap.api.node.root').bind(this);\nconst getParentNode = include('src::mindmap.api.node.parent').bind(this);\nconst on = include('src::mindmap.api.on').bind(this);\nconst off = include('src::mindmap.api.off').bind(this);\nconst property = include('src::mindmap.api.node.property').bind(this);\nconst getDescendantNodes = include('src::mindmap.api.nodes.descendant').bind(this);\nconst getLeafNodes = include('src::mindmap.api.nodes.descendant.leaf').bind(this);\nconst getChildrenNodes = include('src::mindmap.api.nodes.descendant.children').bind(this);\nconst isLeafNode = include('src::mindmap.api.node.is.leaf').bind(this);\nconst isRootNode = include('src::mindmap.api.node.is.root').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 获取脑图的API\r\n * \r\n * @import addNodeIndicator from ..api.node.indicator.add scoped\r\n * \r\n * @import removeNodeIndicator from ..api.node.indicator.remove scoped\r\n * \r\n * @import hasNodeIndicator from ..api.node.indicator.has scoped\r\n * \r\n * @import setNodeBackgroundColor from ..api.node.color.background scoped\r\n * \r\n * @import getPropertyAncestorNode from ..api.node.ancestor.property scoped\r\n * \r\n * @import getSelectedNode from ..api.node.selected scoped\r\n * \r\n * @import getRootNode from ..api.node.root scoped\r\n * \r\n * @import getParentNode from ..api.node.parent scoped\r\n * \r\n * @import on from ..api.on scoped\r\n * \r\n * @import off from ..api.off scoped\r\n * \r\n * @import property from ..api.node.property scoped\r\n * \r\n * @import getDescendantNodes from ..api.nodes.descendant scoped\r\n * \r\n * @import getLeafNodes from ..api.nodes.descendant.leaf scoped\r\n * \r\n * @import getChildrenNodes from ..api.nodes.descendant.children scoped\r\n * \r\n * @import isLeafNode from ..api.node.is.leaf scoped\r\n * \r\n * @import isRootNode from ..api.node.is.root scoped\r\n *\r\n * @return {object} \r\n *\r\n * \r\n */\r\n\r\n return {\r\n   isLeafNode,\r\n   isRootNode,\r\n   addNodeIndicator,\r\n   removeNodeIndicator,\r\n   hasNodeIndicator,\r\n   getPropertyAncestorNode,\r\n   getSelectedNode,\r\n   getRootNode,\r\n   getParentNode,\r\n   property,\r\n   getDescendantNodes,\r\n   getChildrenNodes,\r\n   getLeafNodes,\r\n   setNodeBackgroundColor,\r\n   on,\r\n   off\r\n } ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333529.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.constructor.api"
  },
  "src::mindmap.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.constructor({<data.Reader> reader , <data.Reader> readConfig , <boolean> initVisibilityLevel , <function> nodeSeparationDistance , <number> nodeVerticalSeparationDistance , <number> nodeHorizontalSeparationDistance , <number> nodeHorizontalLineBreakPointOffset , <number> placeholderNodeWidth , <number> placeholderNodeHeight , <number> ellipsisNodeWidth , <number> ellipsisNodeHeight , <number> padding , <number> width , <number> height , <number> ellipsisPattern , <object> placeholderNodeData , <function> callback})",
    "standard": true,
    "importNames": [
      "src::data.reader.json",
      "src::mindmap.hidden",
      "src::mindmap.hidden.after",
      "src::mindmap.selected",
      "src::mindmap.indicated",
      "src::mindmap.ellipsis",
      "src::mindmap.nodes.visibility",
      "src::id.generate",
      "src::function.buffer",
      "src::mindmap.data",
      "src::mindmap.layout.try",
      "src::is.object.simple",
      "src::is.array",
      "src::mindmap.constructor.api",
      "src::function.empty",
      "src::is.number"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let createReader,generate,buffer,isObject,isArray,emptyFn,isNumber;\n    \n                    let var_init_locked_1610693101567;\n \n                    \n\n                    const var_current_scope_1610693101567 = new Map();\n    \n                    return function({reader , readConfig , initVisibilityLevel = 2 , nodeSeparationDistance , nodeVerticalSeparationDistance = 15 , nodeHorizontalSeparationDistance = 0 , nodeHorizontalLineBreakPointOffset = 12.5 , placeholderNodeWidth = 60 , placeholderNodeHeight = 20 , ellipsisNodeWidth = 60 , ellipsisNodeHeight = 20 , padding = 5 , width = 0 , height = 0 , ellipsisPattern = false , placeholderNodeData = {} , callback}){\n    \n                        \n        if(!var_init_locked_1610693101567){\n\n            createReader = include('src::data.reader.json');\ngenerate = include('src::id.generate');\nbuffer = include('src::function.buffer');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\nemptyFn = include('src::function.empty')();\nisObject = include('src::is.object.simple');\nisNumber = include('src::is.number');\n\n            var_init_locked_1610693101567 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693101567.has(this)){\n\n            var_current_scope_1610693101567.set(this , (() => {\n                const setHidden = include('src::mindmap.hidden').bind(this);\nconst afterSetHidden = include('src::mindmap.hidden.after').bind(this);\nconst setSelected = include('src::mindmap.selected').bind(this);\nconst setIndicated = include('src::mindmap.indicated').bind(this);\nconst setEllipsis = include('src::mindmap.ellipsis').bind(this);\nconst createVisibilityNodes = include('src::mindmap.nodes.visibility').bind(this);\nconst data = include('src::mindmap.data').bind(this);\nconst tryLayout = include('src::mindmap.layout.try').bind(this);\nconst getAPI = include('src::mindmap.constructor.api').bind(this);\n\n                function main({reader , readConfig , initVisibilityLevel , nodeSeparationDistance , nodeVerticalSeparationDistance , nodeHorizontalSeparationDistance , nodeHorizontalLineBreakPointOffset , placeholderNodeWidth , placeholderNodeHeight , ellipsisNodeWidth , ellipsisNodeHeight , padding , width , height , ellipsisPattern , placeholderNodeData , callback}){\n\n        \r\n/**\r\n * \r\n * 初始化脑图\r\n * \r\n * @import createReader from data.reader.json\r\n * \r\n * @import setHidden from .hidden scoped\r\n * \r\n * @import afterSetHidden from .hidden.after scoped\r\n * \r\n * @import setSelected from .selected scoped\r\n * \r\n * @import setIndicated from .indicated scoped\r\n * \r\n * @import setEllipsis from .ellipsis scoped\r\n * \r\n * @import createVisibilityNodes from .nodes.visibility scoped\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import buffer from function.buffer\r\n * \r\n * @import data from .data scoped\r\n * \r\n * @import tryLayout from .layout.try scoped\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import getAPI from .constructor.api scoped\r\n * \r\n * @import emptyFn from function.empty value\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.number\r\n * \r\n * @param {object} config 脑图配置\r\n * \r\n * @param {data.Reader} config.reader 数据读取配置\r\n * \r\n * @param {data.Reader} [config.readConfig] 数据读取根路径设置\r\n * \r\n * @param {boolean} [config.initVisibilityLevel = 2] 初始显示脑图节点层数\r\n * \r\n * @param {function} [config.nodeSeparationDistance] 节点间隔距离\r\n * \r\n * @param {number} [config.nodeVerticalSeparationDistance = 15] 节点垂直间隔距离\r\n * \r\n * @param {number} [config.nodeHorizontalSeparationDistance = 0] 节点水平间隔距离\r\n * \r\n * @param {number} [config.nodeHorizontalLineBreakPointOffset = 12.5] 脑图节点之间连线的折点的偏移位置\r\n * \r\n * @param {number} [config.placeholderNodeWidth = 60] 占位符宽度\r\n * \r\n * @param {number} [config.placeholderNodeHeight = 20] 占位符高度\r\n * \r\n * @param {number} [config.ellipsisNodeWidth = 60] 省略符宽度\r\n * \r\n * @param {number} [config.ellipsisNodeHeight = 20] 省略符高度\r\n * \r\n * @param {number} [config.padding = 5] 脑图四周填充距离\r\n * \r\n * @param {number} [config.width = 0] 脑图宽度\r\n * \r\n * @param {number} [config.height = 0] 脑图高度\r\n * \r\n * @param {number} [config.ellipsisPattern = false] 标识是否启用省略模式\r\n * \r\n * @param {object} [config.placeholderNodeData = {}] 占位脑图节点的其它配置\r\n * \r\n * @param {function} [config.callback] 脑图内部回调\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n me.api = getAPI() ;\r\n\r\n me.nodes = new Map() ;\r\n\r\n callback = callback || emptyFn ;\r\n\r\n me.callback = (...args) => callback.call(me , ...args) ;\r\n\r\n me.visibilityNodes = createVisibilityNodes() ;\r\n \r\n me.unsizedNodes = new Map();\r\n \r\n me.leafNodes = new Map();\r\n\r\n me.ellipsisNodes = [];\r\n\r\n me.ellipsisPattern = ellipsisPattern ;\r\n\r\n me.ellipsisNodeWidth = ellipsisNodeWidth ;\r\n\r\n me.ellipsisNodeHeight = ellipsisNodeHeight ;\r\n\r\n me.nodeSeparationDistance = nodeSeparationDistance ;\r\n\r\n me.nodeVerticalSeparationDistance = nodeVerticalSeparationDistance ;\r\n\r\n if(isObject(nodeHorizontalSeparationDistance)){\r\n\r\n   let {\r\n      max = 0,\r\n      min = 0\r\n   } = nodeHorizontalSeparationDistance ;\r\n\r\n   me.maxNodeHorizontalSeparationDistance = max ;\r\n\r\n   me.minNodeHorizontalSeparationDistance = min ;\r\n\r\n   nodeHorizontalSeparationDistance = 0 ;\r\n }\r\n\r\n me.nodeHorizontalSeparationDistance = nodeHorizontalSeparationDistance ;\r\n\r\n if(nodeHorizontalLineBreakPointOffset > nodeHorizontalSeparationDistance){\r\n\r\n   nodeHorizontalLineBreakPointOffset = nodeHorizontalSeparationDistance / 2;\r\n }\r\n\r\n me.nodeHorizontalLineBreakPointOffset = nodeHorizontalLineBreakPointOffset ;\r\n\r\n if(isNumber(padding)){\r\n\r\n   me.padding = {\r\n      top:padding,\r\n      bottom:padding,\r\n      left:padding,\r\n      right:padding\r\n   } ;\r\n\r\n }else if(isObject(padding)){\r\n\r\n   me.padding = Object.assign({\r\n      top:0,\r\n      bottom:0,\r\n      left:0,\r\n      right:0\r\n   } , padding) ;\r\n\r\n }else{\r\n\r\n   me.padding = {\r\n      top:0,\r\n      bottom:0,\r\n      left:0,\r\n      right:0\r\n   } ;\r\n }\r\n\r\n me.width = width ;\r\n\r\n me.height = height ;\r\n\r\n let mindmap = me,\r\n {\r\n    fields:readerFields,\r\n    addFields:readerAddFields = () => {}\r\n } = reader;\r\n \r\n reader = me.reader = createReader({\r\n         order:{\r\n            mode:'readwrite',\r\n            defaultValue:0\r\n         },\r\n\r\n         indicators:{\r\n               equals(value , oldValue){\r\n\r\n                  return value === oldValue ;\r\n               },\r\n\r\n               defaultValue(){\r\n\r\n                  return [] ;\r\n               },\r\n               \r\n               mode:'readwrite'\r\n         },\r\n         ...readerFields,\r\n         expanded:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         },\r\n         hidden:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            set(hidden){\r\n\r\n               return setHidden(this , hidden) ;\r\n            },\r\n            afterSet(){\r\n\r\n               return afterSetHidden(this) ;\r\n            },\r\n            defaultValue:true\r\n         },\r\n         level:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:-1\r\n         },\r\n         width:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         },\r\n         height:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         },\r\n         x:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:0\r\n         },\r\n         y:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:0\r\n         },\r\n         selected:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            set(selected){\r\n\r\n               return setSelected(this , selected) ;\r\n\r\n            },\r\n            defaultValue:false\r\n         },\r\n         placeholder:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         },\r\n         restructuring:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         },\r\n         indicated:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false,\r\n            set(indicated){\r\n\r\n               return setIndicated(this , indicated) ;\r\n            }\r\n         },\r\n         ellipsis:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false,\r\n            set(ellipsis){\r\n\r\n               return setEllipsis(this , ellipsis) ;\r\n            }\r\n         },\r\n         editing:{\r\n            mode:'readwrite',\r\n            local:true,\r\n            defaultValue:false\r\n         }\r\n      } , readerAddFields.bind(me)) ;\r\n\r\n me.readConfig = readConfig ;\r\n\r\n me.initVisibilityLevel = initVisibilityLevel ;\r\n\r\n let placeholderNode = reader.create(Object.assign({\r\n   id:generate('placeholder-'),\r\n   width:placeholderNodeWidth,\r\n   height:placeholderNodeHeight,\r\n   placeholder:true,\r\n   children:[],\r\n   properties:[],\r\n   plugins:[]\r\n } , placeholderNodeData)) ;\r\n\r\n me.placeholderNode = placeholderNode ;\r\n\r\n me.nodes.set(placeholderNode.id , placeholderNode) ;\r\n\r\n {\r\n   me.fireNodeUnsizedEvent = buffer(() => {\r\n    \r\n      let {\r\n          unsizedNodes\r\n      } = me ;\r\n\r\n      if(unsizedNodes.size){\r\n\r\n         me.fireEvent('nodeunsized' , data(unsizedNodes.values()).nodes) ;\r\n      }\r\n   }) ;\r\n\r\n   me.fireNodeSizedEvent = buffer(() => {\r\n\r\n      let {\r\n         unsizedNodes\r\n      } = me ;\r\n\r\n      if(!unsizedNodes.size){\r\n\r\n         me.fireEvent('nodesized') ;\r\n      }\r\n\r\n   }) ;\r\n }\r\n\r\nme.layout = buffer(tryLayout) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693101567.get(this) ;\n\n        \n    \n                        return main.call(this , {reader , readConfig , initVisibilityLevel , nodeSeparationDistance , nodeVerticalSeparationDistance , nodeHorizontalSeparationDistance , nodeHorizontalLineBreakPointOffset , placeholderNodeWidth , placeholderNodeHeight , ellipsisNodeWidth , ellipsisNodeHeight , padding , width , height , ellipsisPattern , placeholderNodeData , callback}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.constructor"
  },
  "src::mindmap.region.selected": {
    "meta": "code.meta.script.function",
    "signature": "<math.Region> src::mindmap.region.selected()",
    "standard": true,
    "importNames": [
      "src::math.region.from",
      "src::math.region.move",
      "src::mindmap.region"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let from,move;\n    \n                    let var_init_locked_1610693102002;\n \n                    \n\n                    const var_current_scope_1610693102002 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1610693102002){\n\n            from = include('src::math.region.from');\nmove = include('src::math.region.move');\n\n            var_init_locked_1610693102002 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693102002.has(this)){\n\n            var_current_scope_1610693102002.set(this , (() => {\n                const getRegion = include('src::mindmap.region').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 获得选中节点的方位信息\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import move from math.region.move\r\n * \r\n * @import getRegion from ..region scoped\r\n * \r\n * @return {math.Region} 区域 \r\n * \r\n */\r\n\r\n let {\r\n    height,\r\n    padding,\r\n    selectedNode\r\n } = this,\r\n {\r\n    height:regionHeight\r\n } = getRegion(),\r\n heightPadding = 0;\r\n\r\n if(height !== regionHeight){\r\n\r\n    heightPadding = padding.top ;\r\n }\r\n\r\n return move(from(selectedNode) , {\r\n    x:padding,\r\n    y:heightPadding\r\n }) ;\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102002.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.region.selected"
  },
  "src::mindmap.load.sort": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.load.sort()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 节点排序\r\n * \r\n */\r\n\r\n function main(){\r\n\r\n    sort(this.rootNode) ;\r\n }\r\n\r\n function sort({\r\n    children\r\n}){\r\n\r\n    children.sort(sortByOrder) ;\r\n\r\n    for(let childNode of children){\r\n\r\n        sort(childNode) ;\r\n    }\r\n }\r\n\r\n function sortByOrder({\r\n     order:order1\r\n } , {\r\n     order:order2\r\n }){\r\n\r\n    return order1 - order2 ;\r\n }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.load.sort"
  },
  "src::mindmap.node.show": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.show(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.leaf",
      "src::mindmap.node.show"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333939 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333939.has(this)){\n\n            var_current_scope_1609121333939.set(this , (() => {\n                const isLeaf = include('src::mindmap.node.is.leaf').bind(this);\nconst show = include('src::mindmap.node.show').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 显示节点\r\n * \r\n * @import isLeaf from .is.leaf scoped\r\n * \r\n * @import show from .show scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n */\r\n\r\n let {\r\n    hidden\r\n } = node ;\r\n\r\n if(!hidden){\r\n\r\n    return ;\r\n }\r\n\r\nnode.hidden = false ;\r\n\r\nlet {\r\n    expanded\r\n} = node ;\r\n\r\nif(expanded && !isLeaf(node)){\r\n\r\n    let {\r\n        children\r\n    } = node ;\r\n\r\n    for(let childNode of children){\r\n\r\n        show(childNode) ;\r\n    }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333939.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.show"
  },
  "src::mindmap.node.expand": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.expand(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.show",
      "src::mindmap.node.is.leaf",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102076 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102076.has(this)){\n\n            var_current_scope_1610693102076.set(this , (() => {\n                const show = include('src::mindmap.node.show').bind(this);\nconst isLeaf = include('src::mindmap.node.is.leaf').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 展开节点\r\n * \r\n * @import show from .show scoped\r\n * \r\n * @import isLeaf from .is.leaf scoped\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @param {mixed} node 节点\r\n * \r\n * @return {boolean} 如果正确展开则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nnode = from(node) ;\r\n\r\nlet me = this,\r\n{\r\n    hidden\r\n} = node;\r\n\r\nif(!hidden){\r\n\r\n    let {\r\n        expanded\r\n    } = node;\r\n\r\n    if(!expanded){\r\n\r\n        node.expanded = true ;\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        for(let childNode of children){\r\n\r\n            show(childNode) ;\r\n        }\r\n\r\n        return true ;\r\n    }\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102076.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.expand"
  },
  "src::mindmap.node.expand.deep": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.expand.deep(<mixed> node , <number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.node.expand"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102050 = new Map();\n    \n                    return function(node , level = 1){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102050.has(this)){\n\n            var_current_scope_1610693102050.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst expand = include('src::mindmap.node.expand').bind(this);\n\n                \r\n/**\r\n * \r\n * 深度展开节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @import expand from ..expand scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} [level = 1] 展开层次\r\n * \r\n * @return {boolean} 如果有展开动作则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nfunction main(node , level){\r\n\r\n    return doDeepExpand(from(node) , 0 , level) ;\r\n}\r\n\r\nfunction doDeepExpand(node , level , maxLevel){\r\n\r\n    node.hidden = false ;\r\n\r\n    level ++ ;\r\n\r\n    if(level <= maxLevel){\r\n\r\n        let isExpand = false ;\r\n\r\n        if(expand(node)){\r\n\r\n            isExpand = true ;\r\n        }\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        for(let childNode of children){\r\n\r\n            if(doDeepExpand(childNode , level , maxLevel)){\r\n\r\n                isExpand = true ;\r\n            }\r\n        }\r\n\r\n        if(isExpand){\r\n\r\n            return true ;\r\n        }\r\n    }\r\n\r\n    return false ;\r\n}\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102050.get(this) ;\n\n        \n    \n                        return main.call(this , node , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.expand.deep"
  },
  "src::mindmap.expand": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.expand(<mixed> node , <number> level , <boolean> isLayout)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.expand.deep"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102026 = new Map();\n    \n                    return function(node , level = 1 , isLayout = true){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102026.has(this)){\n\n            var_current_scope_1610693102026.set(this , (() => {\n                const expand = include('src::mindmap.node.expand.deep').bind(this);\n\n                function main(node , level , isLayout){\n\n        \r\n/**\r\n * \r\n * 展开节点\r\n * \r\n * @import expand from .node.expand.deep scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} [level = 1] 展开层次\r\n * \r\n * @param {boolean} [isLayout = true] 是否布局\r\n * \r\n */\r\n\r\nif(expand(node , level) && isLayout){\r\n\r\n    this.layout() ;\r\n\r\n    return true ;\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102026.get(this) ;\n\n        \n    \n                        return main.call(this , node , level , isLayout) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.expand"
  },
  "src::mindmap.load.visibility": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.load.visibility()",
    "standard": true,
    "importNames": [
      "src::mindmap.expand"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333888 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333888.has(this)){\n\n            var_current_scope_1609121333888.set(this , (() => {\n                const expand = include('src::mindmap.expand').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 初始化显示节点\r\n * \r\n * @import expand from ..expand scoped\r\n * \r\n */\r\nlet me = this,\r\n{\r\n    rootNode,\r\n    initVisibilityLevel\r\n} = me ;\r\n\r\nexpand(rootNode , initVisibilityLevel , false) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333888.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.load.visibility"
  },
  "src::mindmap.load.nodes": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.load.nodes()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 登记所有节点\r\n * \r\n */\r\n\r\n function main(){\r\n\r\n        \r\n    let {\r\n        rootNode,\r\n        nodes\r\n    } = this ;\r\n\r\n    deepNodes(rootNode , nodes) ;\r\n }\r\n\r\n\r\n function deepNodes(node , nodes){\r\n\r\n    let {\r\n        id,\r\n        children\r\n    } = node ;\r\n\r\n    nodes.set(id , node) ;\r\n\r\n    for(let childNode of children){\r\n\r\n        deepNodes(childNode , nodes) ;\r\n    }\r\n }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.load.nodes"
  },
  "src::mindmap.load.data": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.load.data(<object> rootNode)",
    "standard": true,
    "importNames": [
      "src::mindmap.load.sort",
      "src::mindmap.load.visibility",
      "src::mindmap.load.nodes",
      "src::mindmap.layout.try"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333861 = new Map();\n    \n                    return async function(rootNode){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333861.has(this)){\n\n            var_current_scope_1609121333861.set(this , (() => {\n                const initSortNodes = include('src::mindmap.load.sort').bind(this);\nconst initVisibilityNodes = include('src::mindmap.load.visibility').bind(this);\nconst initNodes = include('src::mindmap.load.nodes').bind(this);\nconst tryLayout = include('src::mindmap.layout.try').bind(this);\n\n                async function main(rootNode){\n\n        \r\n/**\r\n * \r\n * 加载脑图专有数据\r\n * \r\n * @import initSortNodes from .sort scoped\r\n * \r\n * @import initVisibilityNodes from .visibility scoped\r\n * \r\n * @import initNodes from .nodes scoped\r\n * \r\n * @import tryLayout from ..layout.try scoped\r\n * \r\n * @param {object} rootNode 脑图数据\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    callback\r\n} = me ;\r\n\r\n\r\nme.rootNode = rootNode ;\r\n\r\nrootNode.selected = true ;\r\n\r\ninitSortNodes() ;\r\n\r\ninitNodes() ;\r\n\r\ninitVisibilityNodes() ;\r\n\r\nawait tryLayout() ;\r\n\r\ncallback('load') ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333861.get(this) ;\n\n        \n    \n                        return await main.call(this , rootNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.load.data"
  },
  "src::mindmap.load": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.load(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::mindmap.load.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333846 = new Map();\n    \n                    return async function(data){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333846.has(this)){\n\n            var_current_scope_1609121333846.set(this , (() => {\n                const loadData = include('src::mindmap.load.data').bind(this);\n\n                async function main(data){\n\n        \r\n/**\r\n * \r\n * 初始化脑图数据\r\n * \r\n * @import loadData from .load.data scoped\r\n * \r\n * @param {mixed} data 数据\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    reader,\r\n    readConfig\r\n } = me,\r\n records = reader.read(data , readConfig);\r\n\r\n if(records.length === 1){\r\n\r\n   await loadData(records[0]) ;\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333846.get(this) ;\n\n        \n    \n                        return await main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.load"
  },
  "src::mindmap.save.data": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::mindmap.save.data()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    \r\n/**\r\n * \r\n * 保存脑图数据\r\n * \r\n * @return {object} 脑图数据 \r\n * \r\n */\r\n\r\nfunction main(){\r\n\r\n    let {\r\n        reader,\r\n        rootNode\r\n    } = this;\r\n\r\n    return generateNodeData(reader , rootNode) ;\r\n\r\n }\r\n\r\n function generateNodeData(reader , node){\r\n\r\n    let data =  {\r\n        ...reader.data(node , {\r\n            ignoreFields:[\r\n                'hidden',\r\n                'children'\r\n            ]\r\n        })\r\n    },{\r\n        children\r\n    } = node,\r\n    childNodes = data.children = [];\r\n\r\n    for(let childNode of children){\r\n\r\n        childNodes.push(generateNodeData(reader , childNode)) ;\r\n    }\r\n\r\n    return data ;\r\n }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.save.data"
  },
  "src::mindmap.node.get": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.get(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121333996 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121333996.has(this)){\n\n            var_current_scope_1609121333996.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 通过ID获得节点引用\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {data.Record} 节点\r\n * \r\n */\r\n\r\n node = from(node) ;\r\n\r\n if(node && !node.hidden){\r\n\r\n   return node ;\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121333996.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.get"
  },
  "src::mindmap.node.size": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.size(<mixed> node , <number> width , <number> height , <boolean> isLayout)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.get",
      "src::mindmap.node.unsized.unregister"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609385697954 = new Map();\n    \n                    return function(node , width , height , isLayout = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609385697954.has(this)){\n\n            var_current_scope_1609385697954.set(this , (() => {\n                const get = include('src::mindmap.node.get').bind(this);\nconst unsized = include('src::mindmap.node.unsized.unregister').bind(this);\n\n                function main(node , width , height , isLayout){\n\n        \r\n/**\r\n * \r\n * 设置节点大小\r\n * \r\n * @import get from .get scoped\r\n * \r\n * @import unsized from .unsized.unregister scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} width 宽度\r\n * \r\n * @param {number} height 高度\r\n * \r\n * @param {boolean} [isLayout = false] 是否强制布局\r\n * \r\n */\r\n\r\n node = get(node);\r\n\r\n if(node){\r\n\r\n    node.width = width;\r\n\r\n    node.height = height;\r\n\r\n    if(isLayout){\r\n\r\n      this.layout() ;\r\n    \r\n    }else{\r\n\r\n      unsized(node) ;\r\n    }\r\n }\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609385697954.get(this) ;\n\n        \n    \n                        return main.call(this , node , width , height , isLayout) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.size"
  },
  "src::mindmap.node.hide": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.hide(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.leaf",
      "src::mindmap.nodes.leaf",
      "src::mindmap.node.show"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334066 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334066.has(this)){\n\n            var_current_scope_1609121334066.set(this , (() => {\n                const isLeaf = include('src::mindmap.node.is.leaf').bind(this);\nconst getLeafNodes = include('src::mindmap.nodes.leaf').bind(this);\nconst show = include('src::mindmap.node.show').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 显示节点\r\n * \r\n * @import isLeaf from .is.leaf scoped\r\n * \r\n * @import getLeafNodes from ..nodes.leaf scoped\r\n * \r\n * @import show from .show scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n */\r\n\r\nlet {\r\n    hidden\r\n } = node ;\r\n\r\n if(hidden){\r\n\r\n    return ;\r\n }\r\n\r\nlet {\r\n    expanded\r\n} = node;\r\n\r\nif(expanded && !isLeaf(node)){\r\n\r\n    let leafNodes,\r\n        length;\r\n\r\n    while(leafNodes = getLeafNodes(node),length = leafNodes.length){\r\n\r\n        if(length === 1 && leafNodes[0] === node){\r\n\r\n            break ;\r\n        }\r\n\r\n        for(let leafNode of leafNodes){\r\n\r\n            leafNode.hidden = true ;\r\n        }\r\n    }\r\n}\r\n\r\nnode.hidden = true ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334066.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.hide"
  },
  "src::mindmap.node.delete": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.delete(<data.Record> node , <boolean> keepSelf)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.root",
      "src::mindmap.node.parent",
      "src::mindmap.node.data",
      "src::mindmap.nodes.relation.descendant",
      "src::mindmap.node.hide",
      "src::mindmap.node.delete"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102101 = new Map();\n    \n                    return function(node , keepSelf = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102101.has(this)){\n\n            var_current_scope_1610693102101.set(this , (() => {\n                const isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst getDescendantNodes = include('src::mindmap.nodes.relation.descendant').bind(this);\nconst hide = include('src::mindmap.node.hide').bind(this);\nconst remove = include('src::mindmap.node.delete').bind(this);\n\n                function main(node , keepSelf){\n\n        \r\n/**\r\n * \r\n * 删除节点\r\n * \r\n * @import isRootNode from .is.root scoped\r\n * \r\n * @import getParentNode from .parent scoped\r\n * \r\n * @import data from .data scoped\r\n * \r\n * @import getDescendantNodes from ..nodes.relation.descendant scoped\r\n * \r\n * @import hide from .hide scoped\r\n * \r\n * @import remove from .delete scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {boolean} [keepSelf = false] 删除时是否仅删除指节点的所有子节点，如果是则指定 true , 否则指定 false\r\n * \r\n */\r\n\r\n let parentNode = getParentNode(node) ;\r\n\r\n if(!isRootNode(node) && parentNode){\r\n\r\n    if(keepSelf){\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        children = Array.from(children) ;\r\n\r\n        let deleteNodes = [] ;\r\n\r\n        for(let childNode of children){\r\n\r\n            deleteNodes.push(...remove(childNode)) ;\r\n        }\r\n\r\n        return deleteNodes ;\r\n\r\n    }\r\n\r\n    let {\r\n        children\r\n    } = parentNode;\r\n\r\n    hide(node) ;\r\n\r\n    let descendantNodes = getDescendantNodes(node , false),\r\n        deleteNodes = [];\r\n\r\n    for(let node of descendantNodes){\r\n\r\n        deleteNodes.push(data(node)) ;\r\n    }\r\n\r\n    deleteNodes.push(data(node)) ;\r\n\r\n    node.parentNodeId = null ;\r\n\r\n    children.splice(children.indexOf(node) , 1) ;\r\n\r\n    return deleteNodes ;\r\n }\r\n\r\n return false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102101.get(this) ;\n\n        \n    \n                        return main.call(this , node , keepSelf) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.delete"
  },
  "src::mindmap.destroy": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.destroy()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.delete"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334014 = new Map();\n    \n                    return function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334014.has(this)){\n\n            var_current_scope_1609121334014.set(this , (() => {\n                const remove = include('src::mindmap.node.delete').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 销毁脑图实例\r\n * \r\n * @import remove from .node.delete scoped\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    rootNode,\r\n    nodes,\r\n    visibilityNodes,\r\n    unsizedNodes,\r\n    leafNodes\r\n } = me,{\r\n    children\r\n } = rootNode ;\r\n\r\n me.removeAllListeners() ;\r\n\r\n for(let childNode of children){\r\n\r\n    remove(childNode) ;\r\n }\r\n\r\n nodes.clear() ;\r\n\r\n visibilityNodes.clear() ;\r\n\r\n unsizedNodes.clear() ;\r\n\r\n leafNodes.clear() ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334014.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.destroy"
  },
  "src::mindmap.resize": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.resize(<number> width , <number> height)",
    "standard": true,
    "importNames": [
      "src::mindmap.layout"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334086 = new Map();\n    \n                    return function(width , height){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334086.has(this)){\n\n            var_current_scope_1609121334086.set(this , (() => {\n                const layout = include('src::mindmap.layout').bind(this);\n\n                function main(width , height){\n\n        \r\n/**\r\n * \r\n * 重新计算大小\r\n * \r\n * @import layout from .layout scoped\r\n * \r\n * @param {number} width 宽度\r\n * \r\n * @param {number} height 高度\r\n * \r\n */\r\nlet me = this,\r\n{\r\n    width:mindmapWidth,\r\n    height:mindmapHeight\r\n} = me;\r\n\r\nif(mindmapWidth !== width || mindmapHeight !== height){\r\n\r\n    me.width = width;\r\n\r\n    me.height = height;\r\n\r\n    delete me.region ;\r\n\r\n    layout() ;\r\n\r\n    return true ;\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334086.get(this) ;\n\n        \n    \n                        return main.call(this , width , height) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.resize"
  },
  "src::mindmap.node.collapse": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.collapse(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.leaf",
      "src::mindmap.node.hide"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334121 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334121.has(this)){\n\n            var_current_scope_1609121334121.set(this , (() => {\n                const isLeaf = include('src::mindmap.node.is.leaf').bind(this);\nconst hide = include('src::mindmap.node.hide').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 收起节点\r\n * \r\n * @import isLeaf from .is.leaf scoped\r\n * \r\n * @import hide from .hide scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {boolean} 如果收起动作执行则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nlet {\r\n    expanded\r\n} = node;\r\n\r\nif(expanded && !isLeaf(node)){\r\n\r\n    let {\r\n        children\r\n    } = node ;\r\n\r\n    for(let childNode of children){\r\n\r\n        hide(childNode) ;\r\n    }\r\n\r\n    node.expanded = false ;\r\n\r\n    return true ;\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334121.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.collapse"
  },
  "src::mindmap.node.ellipsis.cancel": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.ellipsis.cancel()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 取消忽略\r\n * \r\n * \r\n */\r\n\r\n let {\r\n    ellipsisRootNode,\r\n    ellipsisNodes\r\n } = this ;\r\n\r\n if(ellipsisRootNode){\r\n\r\n    ellipsisRootNode.ellipsis = false ;\r\n\r\n    for(let ellipsisNode of ellipsisNodes){\r\n\r\n        ellipsisNode.hidden = false ;\r\n    }\r\n\r\n    ellipsisNodes.length = 0 ;\r\n }\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.ellipsis.cancel"
  },
  "src::mindmap.node.sibling.next": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.sibling.next(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent",
      "src::mindmap.node.get",
      "src::mindmap.node.data",
      "src::is.string"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1609121334237;\n \n                    \n\n                    const var_current_scope_1609121334237 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121334237){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1609121334237 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334237.has(this)){\n\n            var_current_scope_1609121334237.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst get = include('src::mindmap.node.get').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 返回节点的下兄弟节点\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @import get from ..get scoped\r\n * \r\n * @import data from ..data scoped\r\n * \r\n * @import is.string\r\n * \r\n * @param {mixed} node \r\n * \r\n * @return {data.Record} 下兄弟节点 \r\n * \r\n */\r\n\r\n let isData = false ;\r\n\r\n if(isString(node)){\r\n\r\n    node = get(node) ;\r\n\r\n    isData = true ;\r\n }\r\n\r\n let {\r\n    hidden\r\n } = node ;\r\n\r\n if(!hidden){\r\n\r\n    let parentNode = getParentNode(node) ;\r\n\r\n    if(parentNode){\r\n\r\n        let {\r\n            children\r\n        } = parentNode,\r\n        index = children.indexOf(node);\r\n\r\n        if(index !== children.length - 1){\r\n\r\n            let result = children[index + 1] ;\r\n\r\n            if(isData){\r\n\r\n                return data(result) ;\r\n            }\r\n\r\n            return result ;\r\n        }\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334237.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.sibling.next"
  },
  "src::mindmap.nodes.sibling.next": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.sibling.next(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.next"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334212 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334212.has(this)){\n\n            var_current_scope_1609121334212.set(this , (() => {\n                const next = include('src::mindmap.node.sibling.next').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取一组下兄弟节点\r\n * \r\n * @import next from ....node.sibling.next scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {array} 脑图节点列表\r\n * \r\n */\r\n\r\n let nextNode,\r\n     result = [];\r\n\r\nwhile(nextNode = next(node)){\r\n\r\n    result.push(nextNode) ;\r\n\r\n    node = nextNode ;\r\n}\r\n\r\nreturn result ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334212.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.sibling.next"
  },
  "src::mindmap.node.sibling.previous": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.sibling.previous(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent",
      "src::mindmap.node.get",
      "src::is.string",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString;\n    \n                    let var_init_locked_1609121334277;\n \n                    \n\n                    const var_current_scope_1609121334277 = new Map();\n    \n                    return function(node){\n    \n                        \n        if(!var_init_locked_1609121334277){\n\n            isString = include('src::is.string');\n\n            var_init_locked_1609121334277 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334277.has(this)){\n\n            var_current_scope_1609121334277.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst get = include('src::mindmap.node.get').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 返回节点的上兄弟节点\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @import get from ..get scoped\r\n * \r\n * @import is.string\r\n * \r\n * @import data from ..data scoped\r\n * \r\n * @param {data.Record} node \r\n * \r\n * @return {data.Record} 上兄弟节点 \r\n * \r\n */\r\n\r\n let isData = false ;\r\n\r\nif(isString(node)){\r\n\r\n    node = get(node) ;\r\n\r\n    isData = true ;\r\n }\r\n\r\nlet {\r\n    hidden\r\n } = node ;\r\n\r\n if(!hidden){\r\n\r\n    let parentNode = getParentNode(node) ;\r\n\r\n    if(parentNode){\r\n\r\n        let {\r\n            children\r\n        } = parentNode,\r\n        index = children.indexOf(node);\r\n\r\n        if(index !== 0){\r\n\r\n            let result = children[index - 1] ;\r\n\r\n            if(isData){\r\n\r\n                return data(result) ;\r\n            }\r\n\r\n            return result ;\r\n        }\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334277.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.sibling.previous"
  },
  "src::mindmap.nodes.sibling.previous": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.sibling.previous(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.previous"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334257 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334257.has(this)){\n\n            var_current_scope_1609121334257.set(this , (() => {\n                const previous = include('src::mindmap.node.sibling.previous').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获取一组下兄弟节点\r\n * \r\n * @import previous from ....node.sibling.previous scoped\r\n * \r\n * @param {data.Record} node 脑图节点\r\n * \r\n * @return {array} 脑图节点列表\r\n * \r\n */\r\n\r\nlet prevNode,\r\n    result = [];\r\n\r\nwhile(prevNode = previous(node)){\r\n\r\n    result.push(prevNode) ;\r\n\r\n    node = prevNode ;\r\n}\r\n\r\nreturn result ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334257.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.sibling.previous"
  },
  "src::mindmap.node.ellipsis": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.ellipsis(<data.Record> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent",
      "src::mindmap.nodes.sibling.next",
      "src::mindmap.nodes.sibling.previous",
      "src::mindmap.node.collapse",
      "src::mindmap.node.is.root"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334192 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334192.has(this)){\n\n            var_current_scope_1609121334192.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst next = include('src::mindmap.nodes.sibling.next').bind(this);\nconst previous = include('src::mindmap.nodes.sibling.previous').bind(this);\nconst collapse = include('src::mindmap.node.collapse').bind(this);\nconst isRootNode = include('src::mindmap.node.is.root').bind(this);\n\n                \r\n/**\r\n * \r\n * 省略指定节点的父节点\r\n * \r\n * @import getParentNode from .parent scoped\r\n * \r\n * @import next from ..nodes.sibling.next scoped\r\n * \r\n * @import previous from ..nodes.sibling.previous scoped\r\n * \r\n * @import collapse from .collapse scoped\r\n * \r\n * @import isRootNode from .is.root scoped\r\n * \r\n * @param {data.Record} node  脑图节点\r\n * \r\n */\r\n\r\n function main(node , useEllipsis = true){\r\n    \r\n    let parentNode = getParentNode(node),\r\n        me = this,\r\n        {\r\n            ellipsisNodes\r\n        } = me;\r\n\r\n    if(parentNode){\r\n\r\n        if(useEllipsis){\r\n\r\n            collapses(previous(node)) ;\r\n\r\n            collapses(next(node)) ;\r\n\r\n        }else{\r\n\r\n            hide.call(me , previous(node)) ;\r\n\r\n            hide.call(me , next(node)) ;\r\n        }\r\n\r\n        main.call(me , parentNode , false) ;\r\n        \r\n        if(useEllipsis){\r\n\r\n            if(!isRootNode(parentNode)){\r\n\r\n                parentNode.ellipsis = true ;\r\n            }\r\n\r\n        }else{\r\n\r\n            parentNode.hidden = true ;\r\n\r\n            ellipsisNodes.push(parentNode) ;\r\n        }\r\n    }\r\n\r\n    return true ;\r\n }\r\n\r\n function hide(nodes){\r\n\r\n    let me = this ;\r\n\r\n    for(let node of nodes){\r\n\r\n        downHide.call(me , node) ;\r\n    }\r\n }\r\n\r\n function collapses(nodes){\r\n\r\n    for(let node of nodes){\r\n\r\n        collapse(node) ;\r\n    }\r\n }\r\n\r\n function downHide(node){\r\n\r\n    let me = this,\r\n    {\r\n        ellipsisNodes\r\n    } = me ;\r\n\r\n    node.hidden = true ;\r\n\r\n    ellipsisNodes.push(node) ;\r\n\r\n    if(node.expanded){\r\n\r\n        let {\r\n            children\r\n        } = node ;\r\n\r\n        for(let childNode of children){\r\n\r\n            downHide.call(me , childNode) ;\r\n        }\r\n    }\r\n }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334192.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.ellipsis"
  },
  "src::mindmap.select": {
    "meta": "code.meta.script.function",
    "signature": "<Boolean> src::mindmap.select(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.data",
      "src::mindmap.node.ellipsis.cancel",
      "src::mindmap.node.ellipsis",
      "src::mindmap.node.parent",
      "src::mindmap.node.expand",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334149 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334149.has(this)){\n\n            var_current_scope_1609121334149.set(this , (() => {\n                const data = include('src::mindmap.node.data').bind(this);\nconst cancelEllipsis = include('src::mindmap.node.ellipsis.cancel').bind(this);\nconst ellipsis = include('src::mindmap.node.ellipsis').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst expand = include('src::mindmap.node.expand').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                \r\n/**\r\n * \r\n * 选定节点\r\n * \r\n * @import data from .node.data scoped\r\n * \r\n * @import cancelEllipsis from .node.ellipsis.cancel scoped\r\n * \r\n * @import ellipsis from .node.ellipsis scoped\r\n * \r\n * @import getParentNode from .node.parent scoped\r\n * \r\n * @import expand from .node.expand scoped\r\n * \r\n * @import from from .node.from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {Boolean} 如果成功选定节点则返回 true , 否则返回  false\r\n * \r\n */\r\n\r\n function main(node){\r\n\r\n    node = from(node) ;\r\n\r\n    let me = this,\r\n    {\r\n      selectedNode,\r\n      restructuring,\r\n      ellipsisPattern\r\n    } = me;\r\n  \r\n    if(!restructuring && node !== selectedNode){\r\n\r\n      if(ellipsisPattern){\r\n\r\n        cancelEllipsis() ;\r\n      }\r\n  \r\n      if(node.hidden){\r\n    \r\n          let parentNode,\r\n              baseNode = node,\r\n              parentNodes = [];\r\n    \r\n          while(parentNode = getParentNode(baseNode)){\r\n    \r\n            parentNode.hidden = false ;\r\n    \r\n            parentNodes.unshift(parentNode) ;\r\n    \r\n            baseNode = parentNode ; \r\n          }\r\n    \r\n          for(let parentNode of parentNodes){\r\n    \r\n            expand(parentNode) ;\r\n\r\n            let {\r\n              children\r\n            } = parentNode ;\r\n\r\n            for(let childNode of children){\r\n\r\n              childNode.hidden = false ;\r\n\r\n            }\r\n          }\r\n      }\r\n    \r\n      node.selected = true ;\r\n    \r\n      if(ellipsisPattern){\r\n    \r\n        ellipsis(node) ;\r\n\r\n      }\r\n\r\n      me.fireEvent('nodeselect' , data(node) , data(selectedNode)) ;\r\n\r\n      me.layout() ;\r\n\r\n      return true ;\r\n\r\n    }\r\n\r\n    return false ;\r\n }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334149.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.select"
  },
  "src::mindmap.collapse": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.collapse(<mixed> node , <number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.layout",
      "src::mindmap.node.collapse",
      "src::mindmap.select",
      "src::mindmap.data.node.parent",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102130 = new Map();\n    \n                    return function(node , level = 1){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102130.has(this)){\n\n            var_current_scope_1610693102130.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst layout = include('src::mindmap.layout').bind(this);\nconst collapse = include('src::mindmap.node.collapse').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                \r\n/**\r\n * \r\n * 收起节点\r\n * \r\n * @import from from .node.from scoped\r\n * \r\n * @import layout from .layout scoped\r\n * \r\n * @import collapse from .node.collapse scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import getParentNode from .data.node.parent scoped\r\n * \r\n * @import data from .node.data scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} [level = 1] 收起层次\r\n * \r\n */\r\n\r\n function main(node , level){\r\n\r\n    node = from(node) ;\r\n\r\n    let me = this,\r\n    {\r\n        selectedNode\r\n    } = me,\r\n    oldSelectedNode = selectedNode;\r\n\r\n    if(node && collapse(node)){\r\n\r\n        if(selectedNode){\r\n\r\n            while(selectedNode.hidden){\r\n\r\n                selectedNode = getParentNode(selectedNode) ;\r\n            }\r\n        \r\n            if(oldSelectedNode !== selectedNode){\r\n        \r\n                selectedNode.selected = true ;\r\n        \r\n                me.fireEvent('nodeselect' , data(selectedNode) , data(oldSelectedNode)) ;\r\n            }\r\n        }\r\n\r\n        me.layout() ;\r\n\r\n        return true ;\r\n    }\r\n\r\n    return false ;\r\n }\r\n\r\n\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102130.get(this) ;\n\n        \n    \n                        return main.call(this , node , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.collapse"
  },
  "src::mindmap.deselect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.deselect()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 取消脑图选择\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    selectedNode\r\n } = me ;\r\n\r\n if(selectedNode){\r\n\r\n    selectedNode.selected = false ;\r\n\r\n    me.layout() ;\r\n }\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.deselect"
  },
  "src::mindmap.order": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.order(<data.Record> node , <data.Record> unorderNode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334319 = new Map();\n    \n                    return function(node , unorderNode){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334319.has(this)){\n\n            var_current_scope_1609121334319.set(this , (() => {\n                const data = include('src::mindmap.node.data').bind(this);\n\n                function main(node , unorderNode){\n\n        \r\n/**\r\n * \r\n * 将指定节点的子节点进行排序，如果排序信息有变化则抛出事件\r\n * \r\n * @import data from .node.data scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {data.Record} unorderNode 未排序节点\r\n * \r\n */\r\n\r\n let {\r\n    children\r\n } = node,\r\n prevOrder = - Infinity;\r\n\r\n for(let node of children){\r\n\r\n    let {\r\n        order\r\n    } = node ;\r\n\r\n    if(order <= prevOrder){\r\n\r\n        let {\r\n            length\r\n        } = children,\r\n        orderNodes = [];\r\n\r\n        for(let i = 0 ; i < length ; i ++){\r\n\r\n            let node = children[i] ;\r\n\r\n            if(node.order !== i){\r\n\r\n                node.order = i ;\r\n\r\n                orderNodes.push(data(node)) ;\r\n            }\r\n        }\r\n\r\n        this.fireEvent('nodeorderupdated' , orderNodes) ;\r\n\r\n        return true ;\r\n    }\r\n\r\n    prevOrder = order ;\r\n }\r\n\r\n return false ;\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334319.get(this) ;\n\n        \n    \n                        return main.call(this , node , unorderNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.order"
  },
  "src::mindmap.delete": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.delete(<string> node , <boolean> keepSelf , <boolean> isSilentMode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.root",
      "src::mindmap.data.node.parent",
      "src::mindmap.node.data",
      "src::mindmap.node.delete",
      "src::mindmap.order",
      "src::mindmap.select",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693251257 = new Map();\n    \n                    return function(node , keepSelf , isSilentMode = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693251257.has(this)){\n\n            var_current_scope_1610693251257.set(this , (() => {\n                const isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst remove = include('src::mindmap.node.delete').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node , keepSelf , isSilentMode){\n\n        \r\n/**\r\n * \r\n * 删除当前选中节点\r\n * \r\n * @import isRootNode from .node.is.root scoped\r\n * \r\n * @import getParentNode from .data.node.parent scoped\r\n * \r\n * @import data from .node.data scoped\r\n * \r\n * @import remove from .node.delete scoped\r\n * \r\n * @import order from .order scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import from from .node.from scoped\r\n * \r\n * @param {string} [node] 节点编号\r\n * \r\n * @param {boolean} [keepSelf] 删除时是否仅删除指节点的所有子节点，如果是则指定 true , 否则指定 false\r\n * \r\n * @param {boolean} [isSilentMode = false] 是否静默模式\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    restructuring\r\n } = me;\r\n\r\n if(restructuring){\r\n\r\n    return false;\r\n }\r\n\r\n node = from(node) ;\r\n\r\n if(node && !isRootNode(node)){\r\n\r\n    let parentNode = getParentNode(node);\r\n\r\n    if(node.selected === true && keepSelf !== true){\r\n\r\n        let {\r\n            children\r\n        } = parentNode,\r\n        {\r\n            length\r\n        } = children,\r\n        index = children.indexOf(node),\r\n        nextSelectedNode;\r\n\r\n        if(length - 1){\r\n\r\n            if(index + 1 <= length - 1){\r\n\r\n                nextSelectedNode = children[index + 1] ;\r\n            }\r\n\r\n            if(index - 1 >= 0){\r\n\r\n                nextSelectedNode = children[index - 1] ;\r\n            }\r\n        \r\n        }else{\r\n\r\n            nextSelectedNode = parentNode ;\r\n        }\r\n\r\n        select(nextSelectedNode) ;\r\n    }\r\n\r\n    let deleteNodes = remove(node , keepSelf),\r\n    {\r\n        nodes\r\n    } = this;\r\n\r\n    for(let {\r\n        id\r\n    } of deleteNodes){\r\n\r\n        nodes.delete(id) ;\r\n    }\r\n\r\n    if(!isSilentMode){\r\n\r\n        order(parentNode) ;\r\n\r\n        me.fireEvent('nodedelete' , deleteNodes) ;\r\n    }\r\n\r\n    if(keepSelf === true){\r\n\r\n        me.layout() ;\r\n    }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693251257.get(this) ;\n\n        \n    \n                        return main.call(this , node , keepSelf , isSilentMode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.delete"
  },
  "src::mindmap.node.create": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.create(<mixed> node , <mixed> parentNode)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::is.data.record",
      "src::mindmap.node.is.visibility",
      "src::mindmap.node.delete",
      "src::array.remove",
      "src::mindmap.node.get",
      "src::mindmap.node.create",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate,is,isVisibilityNode,remove;\n    \n                    let var_init_locked_1609121334362;\n \n                    \n\n                    const var_current_scope_1609121334362 = new Map();\n    \n                    return function(node , parentNode){\n    \n                        \n        if(!var_init_locked_1609121334362){\n\n            generate = include('src::id.generate');\nis = include('src::is.data.record');\nisVisibilityNode = include('src::mindmap.node.is.visibility');\nremove = include('src::array.remove');\n\n            var_init_locked_1609121334362 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334362.has(this)){\n\n            var_current_scope_1609121334362.set(this , (() => {\n                const removeNode = include('src::mindmap.node.delete').bind(this);\nconst get = include('src::mindmap.node.get').bind(this);\nconst create = include('src::mindmap.node.create').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node , parentNode){\n\n        \r\n/**\r\n * \r\n * 创建新节点\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import is from is.data.record\r\n * \r\n * @import isVisibilityNode from .is.visibility\r\n * \r\n * @import removeNode from .delete scoped\r\n * \r\n * @import remove from array.remove\r\n * \r\n * @import get from .get scoped\r\n * \r\n * @import create from .create scoped\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @param {mixed} node 节点信息\r\n * \r\n * @param {mixed} [parentNode] 父节点\r\n * \r\n * @return {data.Record} 创建出来的新节点 \r\n * \r\n */\r\n\r\nparentNode = from(parentNode) ;\r\n\r\nlet {\r\n   reader,\r\n   nodes\r\n} = this ;\r\n\r\nif(is(node)){\r\n\r\n   removeNode(node) ;\r\n\r\n   if(parentNode){\r\n\r\n      node.parentNodeId = parentNode.id ;\r\n   }\r\n\r\n   return node ;\r\n}\r\n\r\nlet {\r\n   id\r\n} = node,\r\nexistNode = get(id);\r\n\r\nif(existNode){\r\n\r\n   return create(existNode , parentNode) ;\r\n}\r\n\r\ndelete node.hidden ;\r\n\r\ndelete node.level ;\r\n\r\nlet options = {\r\n   id:generate('node-'),\r\n   ...node,\r\n   children:[]\r\n} ;\r\n\r\nif(parentNode){\r\n\r\n   options.parentNodeId = parentNode.id ;\r\n}\r\n\r\nnode = reader.create(options) ;\r\n\r\nnodes.set(node.id , node) ;\r\n\r\nreturn node ;\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334362.get(this) ;\n\n        \n    \n                        return main.call(this , node , parentNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.create"
  },
  "src::mindmap.data.node.child.last": {
    "meta": "code.meta.script.function",
    "signature": "<data.Reocrd> src::mindmap.data.node.child.last(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334378 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334378.has(this)){\n\n            var_current_scope_1609121334378.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得最后一个子脑图节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {data.Reocrd} 子脑图节点引用\r\n * \r\n */\r\n\r\n let {\r\n     children\r\n } = from(node),\r\n {\r\n    length\r\n } = children;\r\n\r\n if(length){\r\n\r\n    return children[length - 1] ;\r\n }\r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334378.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.child.last"
  },
  "src::mindmap.node.append": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.append(<mixed> parentNode , <mixed> node)",
    "standard": true,
    "importNames": [
      "src::id.generate",
      "src::mindmap.node.create",
      "src::mindmap.node.show",
      "src::mindmap.data.node.from",
      "src::mindmap.data.node.child.last"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let generate;\n    \n                    let var_init_locked_1609121334345;\n \n                    \n\n                    const var_current_scope_1609121334345 = new Map();\n    \n                    return function(parentNode , node){\n    \n                        \n        if(!var_init_locked_1609121334345){\n\n            generate = include('src::id.generate');\n\n            var_init_locked_1609121334345 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334345.has(this)){\n\n            var_current_scope_1609121334345.set(this , (() => {\n                const create = include('src::mindmap.node.create').bind(this);\nconst show = include('src::mindmap.node.show').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\nconst getLastChildNode = include('src::mindmap.data.node.child.last').bind(this);\n\n                function main(parentNode , node){\n\n        \r\n/**\r\n * \r\n * 添加子节点\r\n * \r\n * @import generate from id.generate\r\n * \r\n * @import create from .create scoped\r\n * \r\n * @import show from .show scoped\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @import getLastChildNode from ..data.node.child.last scoped\r\n * \r\n * @param {mixed} parentNode 节点\r\n * \r\n * @param {mixed} node 节点配置\r\n * \r\n * \r\n */\r\n\r\nparentNode = from(parentNode) ;\r\n\r\nif(parentNode){\r\n  \r\n  let mindmapNode = from(node) ;\r\n\r\n  if(mindmapNode && (parentNode === mindmapNode || getLastChildNode(parentNode) === mindmapNode)){\r\n\r\n    return ;\r\n\r\n  }\r\n\r\n  let {\r\n      children,\r\n      hidden,\r\n      expanded\r\n  } = parentNode;\r\n\r\n  node = create(node , parentNode) ;\r\n  \r\n  children.push(node) ;\r\n\r\n  if(!hidden && expanded){\r\n\r\n    show(node) ;\r\n  }\r\n\r\n  return node ;\r\n}\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334345.get(this) ;\n\n        \n    \n                        return main.call(this , parentNode , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.append"
  },
  "src::mindmap.append": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.append(<object> node , <mixed> parentNode , <boolean> isSilentMode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.append",
      "src::mindmap.node.expand",
      "src::mindmap.select",
      "src::mindmap.node.data",
      "src::mindmap.order",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334332 = new Map();\n    \n                    return function(node = {} , parentNode , isSilentMode = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334332.has(this)){\n\n            var_current_scope_1609121334332.set(this , (() => {\n                const append = include('src::mindmap.node.append').bind(this);\nconst expand = include('src::mindmap.node.expand').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node , parentNode , isSilentMode){\n\n        \r\n/**\r\n * \r\n * 在选定节点下添加一个子节点\r\n * \r\n * @import append from .node.append scoped\r\n * \r\n * @import expand from .node.expand scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import data from .node.data scoped\r\n * \r\n * @import order from .order scoped\r\n * \r\n * @import from from .node.from scoped\r\n * \r\n * @param {object} [node = {}] 子节点配置信息\r\n * \r\n * @param {mixed} [parentNode] 脑图父节点\r\n * \r\n * @param {boolean} [isSilentMode = false] 是否静默模式\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n  restructuring\r\n} = me;\r\n\r\nif(restructuring){\r\n\r\n  return;\r\n}\r\n\r\nparentNode = from(parentNode) ; \r\n\r\nlet {\r\n    expanded,\r\n    selected\r\n} = parentNode;\r\n\r\nlet nodeSelected,\r\n    isNewNode = true;\r\n\r\nif(from(node)){\r\n\r\n    isNewNode = false ;\r\n\r\n    nodeSelected = node.selected ;\r\n}\r\n\r\nnode = append(parentNode , node) ;\r\n\r\nif(node){\r\n\r\n  if(nodeSelected){\r\n\r\n    node.selected = true ;\r\n  }\r\n\r\n  if(!isSilentMode){\r\n\r\n    if(selected && !expanded){\r\n  \r\n      expand(parentNode) ;\r\n      \r\n    }\r\n    \r\n    me.fireEvent('nodeappend' , data(node) , data(parentNode) , isNewNode) ;\r\n    \r\n    order(parentNode) ;\r\n    \r\n    if(!select(node)){\r\n\r\n      me.layout() ;\r\n    }\r\n  \r\n  }else{\r\n  \r\n    me.layout() ;\r\n    \r\n  }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334332.get(this) ;\n\n        \n    \n                        return main.call(this , node , parentNode , isSilentMode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.append"
  },
  "src::mindmap.data.node.slibing.previous": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.data.node.slibing.previous(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from",
      "src::mindmap.data.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609381172619 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609381172619.has(this)){\n\n            var_current_scope_1609381172619.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得脑图节点上兄弟节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {data.Record} 兄弟脑图节点 \r\n * \r\n */\r\n\r\nlet parentNode = getParentNode(node) ;\r\n\r\nif(parentNode){\r\n\r\n   node = from(node) ;\r\n\r\n   let {\r\n       children\r\n   } = parentNode ;\r\n\r\n   return children[children.indexOf(node) - 1] ;\r\n}\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609381172619.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.slibing.previous"
  },
  "src::mindmap.data.node.slibing.next": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.data.node.slibing.next(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.data.node.from",
      "src::mindmap.data.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609381172642 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609381172642.has(this)){\n\n            var_current_scope_1609381172642.set(this , (() => {\n                const from = include('src::mindmap.data.node.from').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 获得脑图节点下兄弟节点\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @return {data.Record} 兄弟脑图节点 \r\n * \r\n */\r\n\r\n let parentNode = getParentNode(node) ;\r\n\r\n if(parentNode){\r\n\r\n    node = from(node) ;\r\n\r\n    let {\r\n        children\r\n    } = parentNode ;\r\n\r\n    return children[children.indexOf(node) + 1] ;\r\n }\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609381172642.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.data.node.slibing.next"
  },
  "src::mindmap.node.insert": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.insert(<mixed> insertNode , <mixed> baseNode , <number> region)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.create",
      "src::mindmap.data.node.is.root",
      "src::mindmap.data.node.parent",
      "src::mindmap.data.node.slibing.previous",
      "src::mindmap.data.node.slibing.next",
      "src::mindmap.node.show",
      "src::mindmap.data.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609381172594 = new Map();\n    \n                    return function(insertNode = {} , baseNode , region){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609381172594.has(this)){\n\n            var_current_scope_1609381172594.set(this , (() => {\n                const create = include('src::mindmap.node.create').bind(this);\nconst isRootNode = include('src::mindmap.data.node.is.root').bind(this);\nconst getParentNode = include('src::mindmap.data.node.parent').bind(this);\nconst getPreviousNode = include('src::mindmap.data.node.slibing.previous').bind(this);\nconst getNextNode = include('src::mindmap.data.node.slibing.next').bind(this);\nconst show = include('src::mindmap.node.show').bind(this);\nconst from = include('src::mindmap.data.node.from').bind(this);\n\n                function main(insertNode , baseNode , region){\n\n        \r\n/**\r\n * \r\n * 插入节点\r\n * \r\n * @import create from .create scoped\r\n * \r\n * @import isRootNode from ..data.node.is.root scoped\r\n * \r\n * @import getParentNode from ..data.node.parent scoped\r\n * \r\n * @import getPreviousNode from ..data.node.slibing.previous scoped\r\n * \r\n * @import getNextNode from ..data.node.slibing.next scoped\r\n * \r\n * @import show from .show scoped\r\n * \r\n * @import from from ..data.node.from scoped\r\n * \r\n * @param {mixed} [insertNode = {}] 需要插入的节点\r\n * \r\n * @param {mixed} baseNode 参照节点\r\n * \r\n * @param {number} region 插入偏移位置\r\n * \r\n * @return {data.Record} 插入后的节点\r\n * \r\n */\r\n\r\nif(!isRootNode(baseNode)){\r\n\r\n    baseNode = from(baseNode) ;\r\n\r\n    let insertMindmapNode = from(insertNode) ;\r\n\r\n    if(insertMindmapNode){\r\n\r\n        if(insertMindmapNode === baseNode){\r\n\r\n            return ;\r\n        }\r\n\r\n        switch(region){\r\n\r\n            case 'before':\r\n\r\n                if(getPreviousNode(baseNode) === insertMindmapNode){\r\n\r\n                    return ;\r\n                }\r\n\r\n                break;\r\n\r\n            case 'after':\r\n\r\n                if(getNextNode(baseNode) === insertMindmapNode){\r\n\r\n                    return ;\r\n                }\r\n        }\r\n    }\r\n\r\n    let parentNode = getParentNode(baseNode),\r\n    {\r\n        children\r\n    } = parentNode,\r\n    {\r\n        length\r\n    } = children;\r\n\r\n    insertNode = create(insertNode , parentNode) ;\r\n\r\n    let index = children.indexOf(baseNode) ;\r\n\r\n    if(region === 'after'){\r\n\r\n        index ++ ;\r\n    }\r\n\r\n    if(index > length - 1){\r\n\r\n        index = length ;\r\n    \r\n    }\r\n\r\n    children.splice(index , 0 , insertNode) ;\r\n\r\n    if(!baseNode.hidden){\r\n\r\n        show(insertNode) ;\r\n    }\r\n\r\n    return insertNode ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609381172594.get(this) ;\n\n        \n    \n                        return main.call(this , insertNode , baseNode , region) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.insert"
  },
  "src::mindmap.node.insert.before": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.insert.before(<data.Record> insertNode , <data.Record> beforeNode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.insert"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334411 = new Map();\n    \n                    return function(insertNode , beforeNode){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334411.has(this)){\n\n            var_current_scope_1609121334411.set(this , (() => {\n                const insert = include('src::mindmap.node.insert').bind(this);\n\n                function main(insertNode , beforeNode){\n\n        \r\n/**\r\n * \r\n * 插入节点\r\n * \r\n * @import insert from ..insert scoped\r\n * \r\n * @param {data.Record} insertNode 需要插入的节点\r\n * \r\n * @param {data.Record} beforeNode 参照节点\r\n * \r\n * @return {data.Record} 插入后的节点\r\n * \r\n */\r\n\r\n return insert(insertNode , beforeNode , 'before') ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334411.get(this) ;\n\n        \n    \n                        return main.call(this , insertNode , beforeNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.insert.before"
  },
  "src::mindmap.node.insert.after": {
    "meta": "code.meta.script.function",
    "signature": "<data.Record> src::mindmap.node.insert.after(<data.Record> insertNode , <data.Record> afterNode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.insert"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334461 = new Map();\n    \n                    return function(insertNode , afterNode){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334461.has(this)){\n\n            var_current_scope_1609121334461.set(this , (() => {\n                const insert = include('src::mindmap.node.insert').bind(this);\n\n                function main(insertNode , afterNode){\n\n        \r\n/**\r\n * \r\n * 插入节点\r\n * \r\n * @import insert from ..insert scoped\r\n * \r\n * @param {data.Record} insertNode 需要插入的节点\r\n * \r\n * @param {data.Record} afterNode 参照节点\r\n * \r\n * @return {data.Record} 插入后的节点\r\n * \r\n */\r\n\r\nreturn insert(insertNode , afterNode , 'after') ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334461.get(this) ;\n\n        \n    \n                        return main.call(this , insertNode , afterNode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.insert.after"
  },
  "src::mindmap.move": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.move(<string> id , <string> baseId , <string> method)",
    "standard": true,
    "importNames": [
      "src::mindmap.layout",
      "src::mindmap.node.query",
      "src::mindmap.node.append",
      "src::mindmap.node.insert.before",
      "src::mindmap.node.insert.after",
      "src::mindmap.node.parent",
      "src::mindmap.node.sibling.previous",
      "src::mindmap.order"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334396 = new Map();\n    \n                    return function(id , baseId , method){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334396.has(this)){\n\n            var_current_scope_1609121334396.set(this , (() => {\n                const layout = include('src::mindmap.layout').bind(this);\nconst query = include('src::mindmap.node.query').bind(this);\nconst append = include('src::mindmap.node.append').bind(this);\nconst insertBefore = include('src::mindmap.node.insert.before').bind(this);\nconst insertAfter = include('src::mindmap.node.insert.after').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst getPreviousSibling = include('src::mindmap.node.sibling.previous').bind(this);\nconst order = include('src::mindmap.order').bind(this);\n\n                function main(id , baseId , method){\n\n        \r\n/**\r\n * \r\n * 移动节点\r\n * \r\n * @import layout from .layout scoped\r\n * \r\n * @import query from .node.query scoped\r\n * \r\n * @import append from .node.append scoped\r\n * \r\n * @import insertBefore from .node.insert.before scoped\r\n * \r\n * @import insertAfter from .node.insert.after scoped\r\n * \r\n * @import getParentNode from .node.parent scoped\r\n * \r\n * @import getPreviousSibling from .node.sibling.previous scoped\r\n * \r\n * @import order from .order scoped\r\n * \r\n * @param {string} id 需要移动的节点编号\r\n * \r\n * @param {string} baseId 基准节点编号\r\n * \r\n * @param {string} method 移动方式\r\n * \r\n */\r\n\r\n let node = query(id),\r\n     baseNode = query(baseId);\r\n\r\nif(node && baseNode){\r\n\r\n    let me = this,\r\n        oldParentNode = getParentNode(node),\r\n        oldPreviousSibling = getPreviousSibling(node);\r\n\r\n    switch(method){\r\n\r\n        case 'append':\r\n\r\n            append(baseNode , node) ;\r\n\r\n            if(!baseNode.hidden && baseNode.expanded){\r\n\r\n                layout() ;\r\n            }\r\n\r\n            break ;\r\n\r\n        case 'insertBefore':\r\n\r\n            if(insertBefore(node , baseNode) && !baseNode.hidden){\r\n\r\n                layout() ;\r\n            }\r\n\r\n            break ;\r\n\r\n        case 'insertAfter':\r\n\r\n            if(insertAfter(node , baseNode) && !baseNode.hidden){\r\n\r\n                layout() ;\r\n            }\r\n    }\r\n\r\n    let parentNode = getParentNode(node) ;\r\n\r\n    if(!(oldParentNode === parentNode && oldPreviousSibling === getPreviousSibling(node))){\r\n\r\n        me.fireEvent('nodemove' , node , parentNode , oldParentNode) ;\r\n\r\n        order(parentNode) ;\r\n    }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334396.get(this) ;\n\n        \n    \n                        return main.call(this , id , baseId , method) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.move"
  },
  "src::mindmap.node.collapse.deep": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.collapse.deep(<mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.data.nodes.descendant"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102251 = new Map();\n    \n                    return function(node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102251.has(this)){\n\n            var_current_scope_1610693102251.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst getDescendantNodes = include('src::mindmap.data.nodes.descendant').bind(this);\n\n                function main(node){\n\n        \r\n/**\r\n * \r\n * 深度收起\r\n * \r\n * @import from from ..from scoped\r\n * \r\n * @import getDescendantNodes from ....data.nodes.descendant scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * \r\n */\r\n\r\n node = from(node) ;\r\n\r\n if(!node.hidden){\r\n\r\n    node.expanded = false ;\r\n\r\n    let nodes = getDescendantNodes(node),\r\n        isCollapse = false;\r\n\r\n    for(let node of nodes){\r\n\r\n        let {\r\n            children,\r\n            expanded,\r\n            hidden\r\n        } = node ;\r\n\r\n        if(!hidden && children.length && expanded){\r\n\r\n            isCollapse = true ;\r\n        }\r\n\r\n        node.expanded = false ;\r\n\r\n        node.hidden = true ;\r\n    }\r\n\r\n    return isCollapse ;\r\n }\r\n\r\n return false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102251.get(this) ;\n\n        \n    \n                        return main.call(this , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.collapse.deep"
  },
  "src::mindmap.node.reset": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.reset(<mixed> rootNode , <number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.nodes.relation.descendant",
      "src::mindmap.node.expand.deep",
      "src::mindmap.node.collapse.deep"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102226 = new Map();\n    \n                    return function(rootNode , level = 1){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102226.has(this)){\n\n            var_current_scope_1610693102226.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst getDescendantNodes = include('src::mindmap.nodes.relation.descendant').bind(this);\nconst expand = include('src::mindmap.node.expand.deep').bind(this);\nconst collapse = include('src::mindmap.node.collapse.deep').bind(this);\n\n                function main(rootNode , level){\n\n        \r\n/**\r\n * \r\n * 重置脑图\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @import getDescendantNodes from ..nodes.relation.descendant scoped\r\n * \r\n * @import expand from .expand.deep scoped\r\n * \r\n * @import collapse from .collapse.deep scoped\r\n * \r\n * @param {mixed} rootNode 脑图节点\r\n * \r\n * @param {number} [level = 1] 显示层数\r\n * \r\n * @return {boolean} 如果发生重置行为则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n rootNode = from(rootNode) ;\r\n\r\nlet {\r\n    level:maxNodeLevel\r\n} = rootNode,\r\nisReset = false;\r\n\r\nif(expand(rootNode , level)){\r\n\r\n    isReset = true ;\r\n}\r\n\r\nmaxNodeLevel += level ;\r\n\r\nlet nodes = getDescendantNodes(rootNode) ;\r\n\r\nfor(let node of nodes){\r\n\r\n    let {\r\n        level:nodeLevel\r\n    } = node ;\r\n\r\n    if(nodeLevel === maxNodeLevel){\r\n\r\n        if(collapse(node)){\r\n\r\n            isReset = true ;\r\n        }\r\n    }\r\n}\r\n\r\nreturn isReset ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102226.get(this) ;\n\n        \n    \n                        return main.call(this , rootNode , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.reset"
  },
  "src::mindmap.reset": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.reset(<number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.root",
      "src::mindmap.node.reset",
      "src::mindmap.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102192 = new Map();\n    \n                    return function(level){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102192.has(this)){\n\n            var_current_scope_1610693102192.set(this , (() => {\n                const getRootNode = include('src::mindmap.node.root').bind(this);\nconst reset = include('src::mindmap.node.reset').bind(this);\nconst select = include('src::mindmap.select').bind(this);\n\n                function main(level){\n\n        \r\n/**\r\n * \r\n * 重置脑图\r\n * \r\n * @import getRootNode from .node.root scoped\r\n * \r\n * @import reset from .node.reset scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @param {number} [level] 显示层数\r\n * \r\n */\r\n\r\nlet rootNode = getRootNode(),\r\n    isSelect = select(rootNode),\r\n    isReset = reset(rootNode , level) ;\r\n\r\nif(!isSelect && isReset){\r\n\r\n    this.layout() ;\r\n}\r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102192.get(this) ;\n\n        \n    \n                        return main.call(this , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.reset"
  },
  "src::mindmap.node.focus": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.focus(<mixed> node , <number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.node.reset"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102314 = new Map();\n    \n                    return function(node , level){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102314.has(this)){\n\n            var_current_scope_1610693102314.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst reset = include('src::mindmap.node.reset').bind(this);\n\n                function main(node , level){\n\n        \r\n/**\r\n * \r\n * 聚焦节点\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @import reset from .reset scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} [level] 显示层数\r\n * \r\n * @return {boolean} 如果聚焦成功则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    focusNode\r\n } = me;\r\n\r\n node = from(node) ;\r\n\r\n if(focusNode !== node){\r\n\r\n    reset(node , level) ;\r\n\r\n    me.focusNode = node ;\r\n\r\n    return true ;\r\n }\r\n\r\n return false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102314.get(this) ;\n\n        \n    \n                        return main.call(this , node , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.focus"
  },
  "src::mindmap.focus": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.focus(<mixed> node , <number> level)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.root",
      "src::mindmap.select",
      "src::mindmap.node.focus"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102276 = new Map();\n    \n                    return function(node , level){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102276.has(this)){\n\n            var_current_scope_1610693102276.set(this , (() => {\n                const getRootNode = include('src::mindmap.node.root').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst focus = include('src::mindmap.node.focus').bind(this);\n\n                function main(node , level){\n\n        \r\n/**\r\n * \r\n * 聚焦节点\r\n * \r\n * @import getRootNode from .node.root scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import focus from .node.focus scoped\r\n * \r\n * @param {mixed} node 脑图节点\r\n * \r\n * @param {number} [level] 显示层数\r\n * \r\n */\r\n\r\nlet isSelect = select(node),\r\n    isFocus = focus(node , level) ;\r\n\r\nif(!isSelect && isFocus){\r\n\r\n    this.layout() ;\r\n}\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102276.get(this) ;\n\n        \n    \n                        return main.call(this , node , level) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.focus"
  },
  "src::mindmap.move.down": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.move.down(<boolean> isRealMove , <function> beforeMoveFn)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.next",
      "src::mindmap.node.insert.after",
      "src::mindmap.order",
      "src::mindmap.node.parent",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102347 = new Map();\n    \n                    return function(isRealMove = true , beforeMoveFn = () => true){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102347.has(this)){\n\n            var_current_scope_1610693102347.set(this , (() => {\n                const next = include('src::mindmap.node.sibling.next').bind(this);\nconst insertAfter = include('src::mindmap.node.insert.after').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                /**\r\n * \r\n * 选中节点向下移动\r\n * \r\n * @import next from ..node.sibling.next scoped\r\n * \r\n * @import insertAfter from ..node.insert.after scoped\r\n * \r\n * @import order from ..order scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @param {boolean} [isRealMove = true] 是否真实移动\r\n * \r\n * @param {function} [beforeMoveFn = () => true] 拖曳的拦截函数 \r\n * \r\n * @return {boolean} 判断是否可以向下移动\r\n * \r\n */\r\n\r\n function main(isRealMove , beforeMoveFn){\r\n\r\n   let me = this,\r\n   {\r\n      selectedNode,\r\n      visibilityNodes\r\n   } = me ;\r\n\r\n   if(isRealMove){\r\n\r\n      if(!doMoveDown.call(me , next(selectedNode) , beforeMoveFn)){\r\n\r\n         return !!(visibilityNodes && doMoveDown.call(me , visibilityNodes.getNearestNode(selectedNode , 'down') , beforeMoveFn)) ;\r\n      }\r\n   \r\n   }else if(!next(selectedNode)){\r\n\r\n      return !!(visibilityNodes && visibilityNodes.getNearestNode(selectedNode , 'down')) ;\r\n   }\r\n\r\n   return true ;\r\n }\r\n\r\n function doMoveDown(node , beforeMoveFn){\r\n\r\n   let me = this,\r\n   {\r\n      selectedNode\r\n   } = me ;\r\n\r\n   if(node && beforeMoveFn(data(getParentNode(selectedNode)) , data(node))){\r\n\r\n      insertAfter(selectedNode , node) ;\r\n\r\n      selectedNode.selected = true ;\r\n\r\n      me.fireEvent('nodeinsertafter' , data(selectedNode) , data(node) , false) ;\r\n\r\n      order(getParentNode(node)) ;\r\n\r\n      me.layout() ;\r\n\r\n      return true ;\r\n   }\r\n\r\n   return false ;\r\n }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102347.get(this) ;\n\n        \n    \n                        return main.call(this , isRealMove , beforeMoveFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.move.down"
  },
  "src::mindmap.move.up": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.move.up(<boolean> isRealMove , <function> beforeMoveFn)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.previous",
      "src::mindmap.node.insert.before",
      "src::mindmap.node.data",
      "src::mindmap.order",
      "src::mindmap.node.parent"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102374 = new Map();\n    \n                    return function(isRealMove = true , beforeMoveFn = () => true){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102374.has(this)){\n\n            var_current_scope_1610693102374.set(this , (() => {\n                const previous = include('src::mindmap.node.sibling.previous').bind(this);\nconst insertBefore = include('src::mindmap.node.insert.before').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\n\n                /**\r\n * \r\n * 选中节点向上移动\r\n * \r\n * @import previous from ..node.sibling.previous scoped\r\n * \r\n * @import insertBefore from ..node.insert.before scoped\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @import order from ..order scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @param {boolean} [isRealMove = true] 是否真实移动\r\n * \r\n * @param {function} [beforeMoveFn = () => true] 拖曳的拦截函数 \r\n * \r\n * @return {boolean} 判断是否可以向下移动\r\n * \r\n */\r\n\r\n function main(isRealMove , beforeMoveFn){\r\n\r\n    let me = this,\r\n    {\r\n        selectedNode,\r\n        visibilityNodes\r\n    } = me ;\r\n\r\n    if(isRealMove){\r\n\r\n        if(!doMoveUp.call(me , previous(selectedNode) , beforeMoveFn)){\r\n\r\n            return !!(visibilityNodes && doMoveUp.call(me , visibilityNodes.getNearestNode(selectedNode , 'up') , beforeMoveFn)) ;\r\n         }\r\n\r\n    }else if(!previous(selectedNode)){\r\n\r\n        return !!(visibilityNodes && visibilityNodes.getNearestNode(selectedNode , 'up')) ;\r\n    }\r\n\r\n    return true ;\r\n }\r\n\r\n function doMoveUp(node , beforeMoveFn){\r\n\r\n    let me = this,\r\n    {\r\n       selectedNode\r\n    } = me ;\r\n \r\n    if(node && beforeMoveFn(data(getParentNode(selectedNode)) , data(node))){\r\n \r\n        insertBefore(selectedNode , node) ;\r\n\r\n        selectedNode.selected = true ;\r\n    \r\n        me.fireEvent('nodeinsertbefore' , data(selectedNode) , data(node) , false) ;\r\n    \r\n        order(getParentNode(node)) ;\r\n    \r\n        me.layout() ;\r\n \r\n       return true ;\r\n    }\r\n \r\n    return false ;\r\n  }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102374.get(this) ;\n\n        \n    \n                        return main.call(this , isRealMove , beforeMoveFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.move.up"
  },
  "src::mindmap.node.info": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.info(<mixed> data , <mixed> node , <object> config)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.from",
      "src::mindmap.data.node.info"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1610693102394 = new Map();\n    \n                    return function(data , node , config){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1610693102394.has(this)){\n\n            var_current_scope_1610693102394.set(this , (() => {\n                const from = include('src::mindmap.node.from').bind(this);\nconst info = include('src::mindmap.data.node.info').bind(this);\n\n                function main(data , node , config){\n\n        \r\n/**\r\n * \r\n * 修改节点配置\r\n * \r\n * @import from from .from scoped\r\n * \r\n * @import info from ..data.node.info scoped\r\n * \r\n * @param {mixed} [data] 节点配置\r\n * \r\n * @param {mixed} [node] 节点编号\r\n * \r\n * @param {object} [config] 配置\r\n * \r\n * \r\n */\r\n\r\nreturn info(from(node) , data , config) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102394.get(this) ;\n\n        \n    \n                        return main.call(this , data , node , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.info"
  },
  "src::mindmap.nodes.order": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.nodes.order(<object> orders)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(orders){\n\n        \r\n/**\r\n * \r\n * 修改一组节点的排序序号\r\n * \r\n * @param {object} orders 排序序号集合\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n     nodes\r\n } = me,\r\n ids = Object.keys(orders);\r\n\r\n for(let id of ids){\r\n\r\n    if(nodes.has(id)){\r\n\r\n        let node = nodes.get(id) ;\r\n\r\n        node.order = orders[id] ;\r\n    }\r\n }\n\n    }\n    \n                    return function(orders){\n    \n                        \n    \n                        return main.call(this , orders) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.order"
  },
  "src::mindmap.nodes.child": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::mindmap.nodes.child(<string> id)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.query",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334555 = new Map();\n    \n                    return function(id){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334555.has(this)){\n\n            var_current_scope_1609121334555.set(this , (() => {\n                const query = include('src::mindmap.node.query').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                function main(id){\n\n        \r\n/**\r\n * \r\n * 返回子节点集合\r\n * \r\n * @import query from ..node.query scoped\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @param {string} id 节点编号\r\n * \r\n * @return {array} 节点信息集合\r\n * \r\n */\r\n\r\n let node = query(id) ;\r\n\r\n if(node){\r\n\r\n    let {\r\n        children\r\n    } = node,\r\n    result = [];\r\n\r\n    for(let childNode of children){\r\n\r\n        result.push(data(childNode)) ;\r\n    }\r\n\r\n    return result ;\r\n }\r\n\r\n return [] ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334555.get(this) ;\n\n        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.nodes.child"
  },
  "src::mindmap.node.text": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.text(<string> text , <mixed> node)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.info"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334569 = new Map();\n    \n                    return function(text , node){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334569.has(this)){\n\n            var_current_scope_1609121334569.set(this , (() => {\n                const info = include('src::mindmap.node.info').bind(this);\n\n                function main(text , node){\n\n        \r\n/**\r\n * \r\n * 修改节点文本\r\n * \r\n * @import info from .info scoped\r\n * \r\n * @param {string} text 节点文本\r\n * \r\n * @param {mixed} [node] 脑图节点\r\n * \r\n * \r\n */\r\n\r\nreturn info({\r\n    text\r\n} , node) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334569.get(this) ;\n\n        \n    \n                        return main.call(this , text , node) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.text"
  },
  "src::mindmap.insert.before": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.insert.before(<mixed> node , <mixed> beforeNode , <boolean> isSilentMode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.insert.before",
      "src::mindmap.select",
      "src::mindmap.node.data",
      "src::mindmap.order",
      "src::mindmap.node.parent",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334582 = new Map();\n    \n                    return function(node , beforeNode , isSilentMode = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334582.has(this)){\n\n            var_current_scope_1609121334582.set(this , (() => {\n                const insert = include('src::mindmap.node.insert.before').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node , beforeNode , isSilentMode){\n\n        \r\n/**\r\n * \r\n * 在选定节点之前插入\r\n * \r\n * @import insert from ..node.insert.before scoped\r\n * \r\n * @import select from ..select scoped\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @import order from ..order scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @import from from ..node.from scoped\r\n * \r\n * @param {mixed} node 插入的节点配置\r\n * \r\n * @param {mixed} [beforeNode] 参考脑图节点\r\n * \r\n * @param {boolean} [isSilentMode = false] 是否静默模式\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   restructuring\r\n} = me;\r\n\r\nif(restructuring){\r\n\r\n   return;\r\n}\r\n\r\nlet nodeSelected,\r\n    isNewNode = true;\r\n\r\nif(from(node)){\r\n\r\n   isNewNode = false ;\r\n\r\n   nodeSelected = node.selected ;\r\n}\r\n\r\nnode = insert(node , beforeNode) ;\r\n\r\nif(node){\r\n\r\n   if(nodeSelected){\r\n\r\n      node.selected = true ;\r\n   }\r\n\r\n   if(!isSilentMode){\r\n\r\n      me.fireEvent('nodeinsertbefore' , data(node) , data(beforeNode) , isNewNode) ;\r\n   \r\n      order(getParentNode(beforeNode)) ;\r\n   \r\n      if(!select(node)){\r\n\r\n         me.layout() ;\r\n      }  \r\n   \r\n   }else{\r\n   \r\n      me.layout() ;\r\n   }\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334582.get(this) ;\n\n        \n    \n                        return main.call(this , node , beforeNode , isSilentMode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.insert.before"
  },
  "src::mindmap.insert.after": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.insert.after(<mixed> node , <mixed> afterNode , <boolean> isSilentMode)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.insert.after",
      "src::mindmap.order",
      "src::mindmap.node.data",
      "src::mindmap.node.parent",
      "src::mindmap.select",
      "src::mindmap.node.from"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334596 = new Map();\n    \n                    return function(node , afterNode , isSilentMode = false){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334596.has(this)){\n\n            var_current_scope_1609121334596.set(this , (() => {\n                const insert = include('src::mindmap.node.insert.after').bind(this);\nconst order = include('src::mindmap.order').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst select = include('src::mindmap.select').bind(this);\nconst from = include('src::mindmap.node.from').bind(this);\n\n                function main(node , afterNode , isSilentMode){\n\n        \r\n/**\r\n * \r\n * 在选定节点之前插入\r\n * \r\n * @import insert from ..node.insert.after scoped\r\n * \r\n * @import order from ..order scoped\r\n * \r\n * @import data from ..node.data scoped\r\n * \r\n * @import getParentNode from ..node.parent scoped\r\n * \r\n * @import select from ..select scoped\r\n * \r\n * @import from from ..node.from scoped\r\n * \r\n * @param {mixed} node 插入的节点配置\r\n * \r\n * @param {mixed} [afterNode] 参考脑图节点\r\n * \r\n * @param {boolean} [isSilentMode = false] 是否静默模式\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   restructuring\r\n} = me;\r\n\r\nif(restructuring){\r\n\r\n   return;\r\n}\r\n\r\nlet nodeSelected,\r\n    isNewNode = true;\r\n\r\nif(from(node)){\r\n\r\n   isNewNode = false ;\r\n\r\n   nodeSelected = node.selected ;\r\n}\r\n\r\nnode = insert(node , afterNode) ;\r\n\r\nif(node){\r\n\r\n   if(nodeSelected){\r\n\r\n      node.selected = true ;\r\n   }\r\n\r\n   if(!isSilentMode){\r\n\r\n      me.fireEvent('nodeinsertafter' , data(node) , data(afterNode) , isNewNode) ;\r\n\r\n      order(getParentNode(afterNode)) ;\r\n   \r\n      if(!select(node)){\r\n\r\n         me.layout() ;\r\n      }\r\n   \r\n   }else{\r\n\r\n      me.layout() ;\r\n   }\r\n}\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334596.get(this) ;\n\n        \n    \n                        return main.call(this , node , afterNode , isSilentMode) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.insert.after"
  },
  "src::mindmap.select.move.left": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.select.move.left()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.parent",
      "src::mindmap.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334612 = new Map();\n    \n                    return async function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334612.has(this)){\n\n            var_current_scope_1609121334612.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst select = include('src::mindmap.select').bind(this);\n\n                async function main(){\n\n        \r\n/**\r\n * \r\n * 向左移动选择节点\r\n * \r\n * @import getParentNode from ....node.parent scoped\r\n * \r\n * @import select from ....select scoped\r\n * \r\n */\r\n\r\n let {\r\n    selectedNode\r\n } = this,\r\n node = getParentNode(selectedNode) ;\r\n\r\n if(node){\r\n\r\n   return await select(node.id) ;\r\n }\r\n\r\n return false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334612.get(this) ;\n\n        \n    \n                        return await main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.select.move.left"
  },
  "src::mindmap.select.move.right": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.select.move.right()",
    "standard": true,
    "importNames": [
      "src::mindmap.select",
      "src::mindmap.expand",
      "src::mindmap.select.move.right",
      "src::mindmap.node.is.leaf"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334632 = new Map();\n    \n                    return async function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334632.has(this)){\n\n            var_current_scope_1609121334632.set(this , (() => {\n                const select = include('src::mindmap.select').bind(this);\nconst expand = include('src::mindmap.expand').bind(this);\nconst right = include('src::mindmap.select.move.right').bind(this);\nconst isLeaf = include('src::mindmap.node.is.leaf').bind(this);\n\n                async function main(){\n\n        \r\n/**\r\n * \r\n * 向右移动选择节点\r\n * \r\n * @import select from ....select scoped\r\n * \r\n * @import expand from ....expand scoped\r\n * \r\n * @import right from .right scoped\r\n * \r\n * @import isLeaf from ....node.is.leaf scoped\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    selectedNode\r\n } = this,\r\n {\r\n     expanded\r\n } = selectedNode;\r\n\r\n if(expanded){\r\n\r\n    let {\r\n        children\r\n    } = selectedNode ;\r\n\r\n    if(children.length){\r\n\r\n        return await select(children[0].id) ;\r\n    }\r\n\r\n }else if(!isLeaf(selectedNode)){\r\n\r\n    await expand(selectedNode.id) ;\r\n\r\n    return await right() ;\r\n \r\n }else{\r\n\r\n    let {\r\n        visibilityNodes\r\n     } = me ;\r\n  \r\n     let node = visibilityNodes.getNearestNode(selectedNode , 'right') ;\r\n  \r\n     if(node){\r\n  \r\n        return await select(node.id) ;\r\n     }\r\n }\r\n\r\n return false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334632.get(this) ;\n\n        \n    \n                        return await main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.select.move.right"
  },
  "src::mindmap.select.move.up": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.select.move.up()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.previous",
      "src::mindmap.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334645 = new Map();\n    \n                    return async function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334645.has(this)){\n\n            var_current_scope_1609121334645.set(this , (() => {\n                const previous = include('src::mindmap.node.sibling.previous').bind(this);\nconst select = include('src::mindmap.select').bind(this);\n\n                async function main(){\n\n        \r\n/**\r\n * \r\n * 向上移动选择节点\r\n * \r\n * @import previous from ....node.sibling.previous scoped\r\n * \r\n * @import select from ....select scoped\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    selectedNode\r\n } = me,\r\n node = previous(selectedNode) ;\r\n\r\nif(node){\r\n\r\n   return await select(node.id) ;\r\n \r\n}else{\r\n\r\n   let {\r\n      visibilityNodes\r\n   } = me ;\r\n\r\n   let node = visibilityNodes.getNearestNode(selectedNode , 'up') ;\r\n\r\n   if(node){\r\n\r\n      return await select(node.id) ;\r\n   }\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334645.get(this) ;\n\n        \n    \n                        return await main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.select.move.up"
  },
  "src::mindmap.select.move.down": {
    "meta": "code.meta.script.function",
    "signature": "async <void> src::mindmap.select.move.down()",
    "standard": true,
    "importNames": [
      "src::mindmap.node.sibling.next",
      "src::mindmap.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334663 = new Map();\n    \n                    return async function(){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334663.has(this)){\n\n            var_current_scope_1609121334663.set(this , (() => {\n                const next = include('src::mindmap.node.sibling.next').bind(this);\nconst select = include('src::mindmap.select').bind(this);\n\n                async function main(){\n\n        \r\n/**\r\n * \r\n * 向下移动选择节点\r\n * \r\n * @import next from ....node.sibling.next scoped\r\n * \r\n * @import select from ....select scoped\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    selectedNode\r\n } = me,\r\n node = next(selectedNode) ;\r\n\r\n if(node){\r\n\r\n    return await select(node.id) ;\r\n\r\n }else{\r\n\r\n   let {\r\n      visibilityNodes\r\n   } = me ;\r\n\r\n   let node = visibilityNodes.getNearestNode(selectedNode , 'down') ;\r\n\r\n   if(node){\r\n\r\n      return await select(node.id) ;\r\n   }\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334663.get(this) ;\n\n        \n    \n                        return await main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.select.move.down"
  },
  "src::mindmap.node.restructure.start": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.restructure.start(<string> id)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.relation.descendant",
      "src::mindmap.node.is.root",
      "src::mindmap.fire.draw",
      "src::mindmap.node.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDescendantNodes;\n    \n                    let var_init_locked_1609121334684;\n \n                    \n\n                    const var_current_scope_1609121334684 = new Map();\n    \n                    return function(id){\n    \n                        \n        if(!var_init_locked_1609121334684){\n\n            getDescendantNodes = include('src::mindmap.nodes.relation.descendant');\n\n            var_init_locked_1609121334684 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334684.has(this)){\n\n            var_current_scope_1609121334684.set(this , (() => {\n                const isRootNode = include('src::mindmap.node.is.root').bind(this);\nconst fireDrawEvent = include('src::mindmap.fire.draw').bind(this);\nconst get = include('src::mindmap.node.get').bind(this);\n\n                function main(id){\n\n        \r\n/**\r\n * \r\n * 开始重组节点\r\n * \r\n * @import getDescendantNodes from ....nodes.relation.descendant\r\n * \r\n * @import isRootNode from ....node.is.root scoped\r\n * \r\n * @import fireDrawEvent from ....fire.draw scoped\r\n * \r\n * @import get from ..get scoped\r\n * \r\n * @param {string} id 节点编号\r\n * \r\n */\r\n\r\n let me = this,\r\n     selectedNode = get(id) ;\r\n\r\n if(!selectedNode || isRootNode(selectedNode)){\r\n\r\n    return ;\r\n }\r\n\r\n me.restructuring = true ;\r\n\r\n selectedNode.restructuring = true ;\r\n\r\n me.restructuredNode = selectedNode ;\r\n\r\n let nodes = getDescendantNodes(selectedNode) ;\r\n\r\n for(let node of nodes){\r\n\r\n   node.restructuring = true ;\r\n }\r\n\r\n fireDrawEvent() ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334684.get(this) ;\n\n        \n    \n                        return main.call(this , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.restructure.start"
  },
  "src::mindmap.node.restructure.preinsert": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::mindmap.node.restructure.preinsert(<data.Record> node , <object> xy)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.is.visibility",
      "src::mindmap.node.parent",
      "src::mindmap.node.insert.before",
      "src::mindmap.node.insert.after",
      "src::math.region.outOfBoundOffset.y",
      "src::math.region.contains",
      "src::math.region.from",
      "src::mindmap.node.data"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let is,getOutOfBoundOffsetY,contains,from;\n    \n                    let var_init_locked_1609121334716;\n \n                    \n\n                    const var_current_scope_1609121334716 = new Map();\n    \n                    return function(node , xy){\n    \n                        \n        if(!var_init_locked_1609121334716){\n\n            is = include('src::mindmap.node.is.visibility');\ngetOutOfBoundOffsetY = include('src::math.region.outOfBoundOffset.y');\ncontains = include('src::math.region.contains');\nfrom = include('src::math.region.from');\n\n            var_init_locked_1609121334716 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334716.has(this)){\n\n            var_current_scope_1609121334716.set(this , (() => {\n                const getParentNode = include('src::mindmap.node.parent').bind(this);\nconst insertBefore = include('src::mindmap.node.insert.before').bind(this);\nconst insertAfter = include('src::mindmap.node.insert.after').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\n\n                function main(node , xy){\n\n        \r\n/**\r\n * \r\n * 预插入节点\r\n * \r\n * @import is from ..is.visibility\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @import insertBefore from ..insert.before scoped\r\n * \r\n * @import insertAfter from ..insert.after scoped\r\n * \r\n * @import getOutOfBoundOffsetY from math.region.outOfBoundOffset.y\r\n * \r\n * @import contains from math.region.contains\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import data from ..data scoped\r\n * \r\n * @param {data.Record} node 节点\r\n * \r\n * @param {object} xy 坐标信息\r\n * \r\n * @return {boolean} 插入如果成功执行则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nif(is(node)){\r\n\r\n    let region = from(data(node)),\r\n    {\r\n        y\r\n    } = xy,\r\n    outY = getOutOfBoundOffsetY(region , y),\r\n    {\r\n        placeholderNode\r\n    } = this,\r\n    result;\r\n\r\n    if(outY > 0){\r\n\r\n        result = insertBefore(placeholderNode , node) ;\r\n    \r\n    }else if(outY < 0){\r\n\r\n        result = insertAfter(placeholderNode , node) ;\r\n    \r\n    }else{\r\n\r\n        let {\r\n            top:nodeY\r\n        } = region,\r\n        {\r\n            height\r\n        } = node;\r\n\r\n        if(y <= nodeY + height / 2){\r\n\r\n            result = insertBefore(placeholderNode , node) ;\r\n\r\n        }else{\r\n\r\n            result = insertAfter(placeholderNode , node) ;\r\n        }\r\n    }\r\n\r\n    return !! result ;\r\n}\r\n\r\nreturn false ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334716.get(this) ;\n\n        \n    \n                        return main.call(this , node , xy) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.restructure.preinsert"
  },
  "src::mindmap.node.restructure": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.restructure(<object> xy , <string> id)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.expand",
      "src::mindmap.node.restructure.preinsert",
      "src::mindmap.node.append",
      "src::math.region.outOfBoundOffset.y",
      "src::math.region.from",
      "src::mindmap.node.get",
      "src::mindmap.node.is.normal"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getOutOfBoundOffsetY,from,is;\n    \n                    let var_init_locked_1609121334700;\n \n                    \n\n                    const var_current_scope_1609121334700 = new Map();\n    \n                    return function(xy , id){\n    \n                        \n        if(!var_init_locked_1609121334700){\n\n            getOutOfBoundOffsetY = include('src::math.region.outOfBoundOffset.y');\nfrom = include('src::math.region.from');\nis = include('src::mindmap.node.is.normal');\n\n            var_init_locked_1609121334700 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334700.has(this)){\n\n            var_current_scope_1609121334700.set(this , (() => {\n                const expand = include('src::mindmap.node.expand').bind(this);\nconst preinsert = include('src::mindmap.node.restructure.preinsert').bind(this);\nconst append = include('src::mindmap.node.append').bind(this);\nconst get = include('src::mindmap.node.get').bind(this);\n\n                function main(xy , id){\n\n        \r\n/**\r\n * \r\n * 重构\r\n * \r\n * @import expand from .expand scoped\r\n * \r\n * @import preinsert from .restructure.preinsert scoped\r\n * \r\n * @import append from .append scoped\r\n * \r\n * @import getOutOfBoundOffsetY from math.region.outOfBoundOffset.y\r\n * \r\n * @import from from math.region.from\r\n * \r\n * @import get from .get scoped\r\n * \r\n * @import is from .is.normal\r\n * \r\n * @param {object} xy 坐标\r\n * \r\n * @param {string} [id] 节点编号\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    restructureIndicateLocked,\r\n    restructuring,\r\n    visibilityNodes,\r\n    placeholderNode\r\n} = me;\r\n\r\nif(!restructuring || restructureIndicateLocked){\r\n\r\n    return ;\r\n}\r\n\r\n if(id){\r\n\r\n    let node = get(id) ;\r\n\r\n    if(is(node) && preinsert(node , xy)){\r\n\r\n        me.layout() ;\r\n    }\r\n\r\n }else{\r\n\r\n    let parentNode = visibilityNodes.getNearestParentNode(xy) ;\r\n\r\n    if(parentNode){\r\n\r\n        parentNode.indicated = true ;\r\n\r\n        if(!parentNode.expanded){\r\n\r\n            me.restructureIndicateLocked = true ;\r\n\r\n            expand(parentNode) ;\r\n\r\n            me.layout() ;\r\n\r\n            me.restructureIndicateLocked = false ;\r\n\r\n            return ;\r\n        \r\n        }\r\n\r\n        let {\r\n            children\r\n        } = parentNode,\r\n        {\r\n            y\r\n        } = xy;\r\n\r\n        for(let childNode of children){\r\n\r\n            if(!is(childNode)){\r\n\r\n                continue ;\r\n            }\r\n\r\n            let offsetY = getOutOfBoundOffsetY(from(childNode) , y) ;\r\n\r\n            if(offsetY >= 0){\r\n\r\n                if(preinsert(childNode , xy)){\r\n\r\n                    me.layout() ;\r\n                }\r\n                \r\n                return ;\r\n            }\r\n        }\r\n\r\n        if(append(parentNode , placeholderNode)){\r\n\r\n            me.layout() ;\r\n        }\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334700.get(this) ;\n\n        \n    \n                        return main.call(this , xy , id) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.restructure"
  },
  "src::mindmap.node.restructure.end": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.restructure.end(<function> beforeMoveFn)",
    "standard": true,
    "importNames": [
      "src::mindmap.nodes.relation.descendant",
      "src::mindmap.fire.draw",
      "src::mindmap.node.parent",
      "src::mindmap.node.delete",
      "src::mindmap.node.insert.before",
      "src::mindmap.node.show",
      "src::mindmap.node.is.visibility",
      "src::mindmap.node.data",
      "src::mindmap.node.sibling.previous",
      "src::mindmap.order"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDescendantNodes,is;\n    \n                    let var_init_locked_1610693102438;\n \n                    \n\n                    const var_current_scope_1610693102438 = new Map();\n    \n                    return function(beforeMoveFn = () => true){\n    \n                        \n        if(!var_init_locked_1610693102438){\n\n            getDescendantNodes = include('src::mindmap.nodes.relation.descendant');\nis = include('src::mindmap.node.is.visibility');\n\n            var_init_locked_1610693102438 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1610693102438.has(this)){\n\n            var_current_scope_1610693102438.set(this , (() => {\n                const fireDrawEvent = include('src::mindmap.fire.draw').bind(this);\nconst getParentNode = include('src::mindmap.node.parent').bind(this);\nconst remove = include('src::mindmap.node.delete').bind(this);\nconst insertBefore = include('src::mindmap.node.insert.before').bind(this);\nconst show = include('src::mindmap.node.show').bind(this);\nconst data = include('src::mindmap.node.data').bind(this);\nconst getPreviousSibling = include('src::mindmap.node.sibling.previous').bind(this);\nconst doOrder = include('src::mindmap.order').bind(this);\n\n                function main(beforeMoveFn){\n\n        \r\n/**\r\n * \r\n * 结束重组节点\r\n * \r\n * @import getDescendantNodes from ....nodes.relation.descendant\r\n * \r\n * @import fireDrawEvent from ....fire.draw scoped\r\n * \r\n * @import getParentNode from ..parent scoped\r\n * \r\n * @import remove from ..delete scoped\r\n * \r\n * @import insertBefore from ..insert.before scoped\r\n * \r\n * @import show from ..show scoped\r\n * \r\n * @import is from ..is.visibility\r\n * \r\n * @import data from ..data scoped\r\n * \r\n * @import getPreviousSibling from ..sibling.previous scoped\r\n * \r\n * @import doOrder from ....order scoped\r\n * \r\n * @param {function} [beforeMoveFn = () => true] 拖曳的拦截函数 \r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n   restructuredNode:selectedNode,\r\n   restructureIndicatedNode,\r\n   placeholderNode\r\n} = me;\r\n\r\nif(!selectedNode){\r\n\r\n   return ;\r\n}\r\n\r\nif(restructureIndicatedNode){\r\n\r\n   restructureIndicatedNode.indicated = false ;\r\n\r\n   delete me.restructureIndicatedNode ;\r\n}\r\n\r\nlet fireEvent;\r\n\r\nif(is(placeholderNode)){\r\n\r\n   let oldPreviousSibling = getPreviousSibling(selectedNode),\r\n       oldParentNode = getParentNode(selectedNode);\r\n\r\n   if(beforeMoveFn(data(getParentNode(placeholderNode)) , data(selectedNode)) !== false){\r\n\r\n      let {\r\n         selected\r\n      } = selectedNode ;\r\n\r\n      insertBefore(selectedNode , placeholderNode) ;\r\n\r\n      selectedNode.selected = selected ;\r\n   }\r\n\r\n   remove(placeholderNode) ;\r\n\r\n   let parentNode = getParentNode(selectedNode);\r\n\r\n   if(!(oldParentNode === parentNode && oldPreviousSibling === getPreviousSibling(selectedNode))){\r\n\r\n      fireEvent = () => {\r\n\r\n         me.fireEvent('nodemove' , data(selectedNode) , data(parentNode) , oldParentNode) ;\r\n\r\n         doOrder(parentNode) ;\r\n\r\n      } ;\r\n\r\n     \r\n   }\r\n}\r\n\r\ndelete me.restructuring ;\r\n\r\ndelete me.restructuredNode ;\r\n\r\nselectedNode.restructuring = false ;\r\n\r\nlet nodes = getDescendantNodes(selectedNode) ;\r\n\r\nfor(let node of nodes){\r\n\r\n   node.restructuring = false ;\r\n}\r\n\r\nif(fireEvent){\r\n\r\n   fireEvent() ;\r\n\r\n}\r\n\r\nme.layout() ;\r\n \n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1610693102438.get(this) ;\n\n        \n    \n                        return main.call(this , beforeMoveFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.restructure.end"
  },
  "src::mindmap.node.indicator.input": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::mindmap.node.indicator.input(<object> node , <object> indicator , <array> indicators)",
    "standard": true,
    "importNames": [
      "src::mindmap.node.info"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n \n                    \n\n                    const var_current_scope_1609121334746 = new Map();\n    \n                    return function(node , indicator , indicators){\n    \n                        \n    \n                        \n        \n        if(!var_current_scope_1609121334746.has(this)){\n\n            var_current_scope_1609121334746.set(this , (() => {\n                const info = include('src::mindmap.node.info').bind(this);\n\n                function main(node , indicator , indicators){\n\n        \r\n/**\r\n * \r\n * 触发脑图节点上的指示器输入事件\r\n * \r\n * @import info from ..info scoped\r\n * \r\n * @param {object} node 脑图节点数据\r\n * \r\n * @param {object} indicator 指示器配置\r\n * \r\n * @param {array} indicators 指示器配置\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n info({\r\n   indicators\r\n} , node , false) ;\r\n\r\n me.fireEvent('nodeindicatorinput' , node , indicator) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334746.get(this) ;\n\n        \n    \n                        return main.call(this , node , indicator , indicators) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.node.indicator.input"
  },
  "src::mindmap.operation.near": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::mindmap.operation.near(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data){\n\n        \r\n/**\r\n * \r\n * 临近节点操作，可能是添加、插入之前、插入之后\r\n * \r\n * @param {mixed} data 参数说明\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n */\r\n\r\n // 代码实现\n\n    }\n    \n                    return function(data){\n    \n                        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "mindmap.operation.near"
  },
  "src::function.call": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::function.call(<mixed> target , <array> ...args)",
    "standard": true,
    "importNames": [
      "src::is.function",
      "src::is.object.simple",
      "src::is.array",
      "src::function.get",
      "src::function.call"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction,isObject,isArray,get,call;\n    \n                    let var_init_locked_1609121334768;\n    \n                    \n\n                    function main(target , ...args){\n\n        \r\n/**\r\n * \r\n * 执行函数\r\n * \r\n * @import is.function\r\n * \r\n * @import isObject from is.object.simple\r\n * \r\n * @import is.array\r\n * \r\n * @import get from .get\r\n * \r\n * @import call from .call\r\n * \r\n * @param {mixed} target 函数或者函数描述\r\n * \r\n * @param {array} [...args] 函数参数\r\n * \r\n * @return {mixed} 函数的返回值\r\n * \r\n */\r\n\r\n if(isFunction(target)){\r\n\r\n    return target(...args) ;\r\n\r\n }else if(isObject(target)){\r\n\r\n    let {\r\n        fn,\r\n        scope\r\n    } = target ;\r\n\r\n    get(fn , scope).apply(scope , args) ;\r\n\r\n }else if(isArray(target)){\r\n\r\n    let targets = target ;\r\n\r\n    for(let target of targets){\r\n\r\n        call(target , ...args) ;\r\n    }\r\n }\n\n    }\n    \n                    return function(target , ...args){\n    \n                        \n        if(!var_init_locked_1609121334768){\n\n            isFunction = include('src::is.function');\nisObject = include('src::is.object.simple');\nisArray = include('src::is.array');\nget = include('src::function.get');\ncall = include('src::function.call');\n\n            var_init_locked_1609121334768 = true ;\n        }\n        \n    \n                        return main.call(this , target , ...args) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.call"
  },
  "src::function.create.after": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::function.create.after(<function> target , <fucntion> afterFn)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(target , afterFn){\n\n        \r\n/**\r\n * \r\n * 基于目标函数生成一个带有后继函数的新函数\r\n * \r\n * @param {function} target 目标函数\r\n * \r\n * @param {fucntion} afterFn 后继函数\r\n * \r\n * @return {function} 生成后的函数\r\n * \r\n */\r\n\r\nreturn function(){\r\n\r\n    let me = this,\r\n        value = target.apply(me , arguments) ;\r\n\r\n    afterFn.apply(me , arguments) ;\r\n\r\n    return value ;\r\n} ;\n\n    }\n    \n                    return function(target , afterFn){\n    \n                        \n    \n                        return main.call(this , target , afterFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.create.after"
  },
  "src::function.create.before": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::function.create.before(<function> target , <fucntion> beforeFn)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(target , beforeFn){\n\n        \r\n/**\r\n * \r\n * 基于目标函数生成一个带有后继函数的新函数\r\n * \r\n * @param {function} target 目标函数\r\n * \r\n * @param {fucntion} beforeFn 后继函数\r\n * \r\n * @return {function} 生成后的函数\r\n * \r\n */\r\n\r\nreturn function(){\r\n\r\n    let me = this ;\r\n\r\n    if(beforeFn.apply(me , arguments) !== false){\r\n\r\n       return target.apply(me , arguments) ;\r\n    }\r\n} ;\n\n    }\n    \n                    return function(target , beforeFn){\n    \n                        \n    \n                        return main.call(this , target , beforeFn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.create.before"
  },
  "src::function.executer.callback": {
    "meta": "code.meta.script.function",
    "signature": "<function.Executer> src::function.executer.callback(<string|function> callback)",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121334843;\n    \n                    \n\n                    function main(callback){\n\n        \r\n/**\r\n * \r\n * 添加回调函数\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {string | function} callback 回调函数\r\n * \r\n * @return {function.Executer} 函数执行器本身\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    callbacks\r\n} = me;\r\n\r\ncallbacks.push(get(callback)) ;\r\n\r\nreturn me ;\n\n    }\n    \n                    return function(callback){\n    \n                        \n        if(!var_init_locked_1609121334843){\n\n            get = include('src::function.get');\n\n            var_init_locked_1609121334843 = true ;\n        }\n        \n    \n                        return main.call(this , callback) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.executer.callback"
  },
  "src::function.executer.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.executer.constructor(<function|string> fn)",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121334868;\n    \n                    \n\n                    function main(fn){\n\n        /**\r\n * \r\n * 构建函数执行器\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {function |string} fn 执行函数\r\n * \r\n */\r\n\r\nlet me = this ;\r\n\r\nme.target = get(fn) ;\r\n\r\nme.callbacks = [] ;\n\n    }\n    \n                    return function(fn){\n    \n                        \n        if(!var_init_locked_1609121334868){\n\n            get = include('src::function.get');\n\n            var_init_locked_1609121334868 = true ;\n        }\n        \n    \n                        return main.call(this , fn) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.executer.constructor"
  },
  "src::function.executer.execute": {
    "meta": "code.meta.script.function",
    "signature": "<function.Executer> src::function.executer.execute(<mixed> ...params)",
    "standard": true,
    "importNames": [
      "src::is.defined"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isDefined;\n    \n                    let var_init_locked_1609121334889;\n    \n                    \n\n                    \r\n/**\r\n * \r\n * 执行函数，如果当前是正在执行状态，则拒绝执行\r\n * \r\n * @import is.defined\r\n * \r\n * @param {mixed} [...params] 执行函数参数 \r\n * \r\n * @return {function.Executer} 函数执行器本身\r\n * \r\n */\r\n\r\n function main(...params){\r\n\r\n    let me = this ;\r\n\r\n    let {\r\n        target,\r\n        callbacks\r\n    } = me ;\r\n\r\n    me.params = params ;\r\n\r\n    me.isExecuting = true ;\r\n\r\n    let result = target(...params) ;\r\n\r\n    if(result instanceof Promise){\r\n\r\n        result.then(result => doCallback.call(me , callbacks , result)) ;\r\n\r\n    }else{\r\n\r\n        doCallback.call(me , callbacks , result) ;\r\n\r\n    }\r\n\r\n    return me ;\r\n\r\n }\r\n\r\n function doCallback(callbacks , result){\r\n\r\n    for(let callback of callbacks){\r\n\r\n        let itemResult = callback(result , params) ;\r\n\r\n        if(isDefined(itemResult)){\r\n\r\n            result = itemResult ;\r\n        }\r\n    }\r\n\r\n }\n    \n                    return function(...params){\n    \n                        \n        if(!var_init_locked_1609121334889){\n\n            isDefined = include('src::is.defined');\n\n            var_init_locked_1609121334889 = true ;\n        }\n        \n    \n                        return main.call(this , ...params) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.executer.execute"
  },
  "src::function.executer.reexecute": {
    "meta": "code.meta.script.function",
    "signature": "<function.Executer> src::function.executer.reexecute()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 重新执行函数\r\n * \r\n * @return {function.Executer} 函数执行器本身\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    params\r\n} = me;\r\n\r\nreturn me.execute(...params) ;\n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.executer.reexecute"
  },
  "src::function.executer": {
    "meta": "code.meta.class",
    "signature": "<void> src::function.executer()",
    "standard": true,
    "importNames": [
      "src::class.empty",
      "src::function.executer.constructor",
      "src::function.executer.callback",
      "src::function.executer.reexecute",
      "src::function.executer.execute",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let extend,constructor,method_callback,method_reexecute,method_execute,isObject;\n    \n                    let var_init_locked_1609121334927;\n    \n                    let var_class_1609121334927;\n    \n                    \n\n                    let var_global_main_1609121334927 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121334927){\n\n            extend = include('src::class.empty')();\nconstructor = include('src::function.executer.constructor');\nmethod_callback = include('src::function.executer.callback');\nmethod_reexecute = include('src::function.executer.reexecute');\nmethod_execute = include('src::function.executer.execute');\nisObject = include('src::is.object.simple');\n\n            class main {\n\n            \n\n            \n\n            constructor(...args){\n\n            \n\n            constructor.apply(this , args) ;\n\n        }\n\n            callback(...args){\n\n            return method_callback.apply(this , args) ;\n\n        }\nreexecute(...args){\n\n            return method_reexecute.apply(this , args) ;\n\n        }\nexecute(...args){\n\n            return method_execute.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121334927 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121334927 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::function.executer' ;\n                }\n\n            } ;\n\n            main = var_class_1609121334927 ;\n        \nvar_global_main_1609121334927 = main;\n\n            var_init_locked_1609121334927 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121334927() ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.executer"
  },
  "src::calendar.month.view": {
    "meta": "code.meta.class",
    "signature": "<void> src::calendar.month.view(<mixed> target , <mixed> config)",
    "standard": true,
    "importNames": [
      "src::class.empty",
      "src::calendar.month.view.constructor",
      "src::calendar.month.view.select",
      "src::calendar.month.view.selectLeft",
      "src::calendar.month.view.selectRight",
      "src::calendar.month.view.selectUp",
      "src::calendar.month.view.selectDown",
      "src::calendar.month.view.selectMonth",
      "src::calendar.month.view.selectNextMonth",
      "src::calendar.month.view.selectPrevMonth",
      "src::calendar.month.view.deselect",
      "src::is.object.simple"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let extend,constructor,method_select,method_selectLeft,method_selectRight,method_selectUp,method_selectDown,method_selectMonth,method_selectNextMonth,method_selectPrevMonth,method_deselect,isObject;\n    \n                    let var_init_locked_1609121334951;\n    \n                    let var_class_1609121334951;\n    \n                    \n\n                    let var_global_main_1609121334951 ;\n    \n                    return function(target , config){\n    \n                        \n        if(!var_init_locked_1609121334951){\n\n            extend = include('src::class.empty')();\nconstructor = include('src::calendar.month.view.constructor');\nmethod_select = include('src::calendar.month.view.select');\nmethod_selectLeft = include('src::calendar.month.view.selectLeft');\nmethod_selectRight = include('src::calendar.month.view.selectRight');\nmethod_selectUp = include('src::calendar.month.view.selectUp');\nmethod_selectDown = include('src::calendar.month.view.selectDown');\nmethod_selectMonth = include('src::calendar.month.view.selectMonth');\nmethod_selectNextMonth = include('src::calendar.month.view.selectNextMonth');\nmethod_selectPrevMonth = include('src::calendar.month.view.selectPrevMonth');\nmethod_deselect = include('src::calendar.month.view.deselect');\nisObject = include('src::is.object.simple');\n\n            class main {\n\n            \n\n            \n\n            constructor(...args){\n\n            \n\n            constructor.apply(this , args) ;\n\n        }\n\n            select(...args){\n\n            return method_select.apply(this , args) ;\n\n        }\nselectLeft(...args){\n\n            return method_selectLeft.apply(this , args) ;\n\n        }\nselectRight(...args){\n\n            return method_selectRight.apply(this , args) ;\n\n        }\nselectUp(...args){\n\n            return method_selectUp.apply(this , args) ;\n\n        }\nselectDown(...args){\n\n            return method_selectDown.apply(this , args) ;\n\n        }\nselectMonth(...args){\n\n            return method_selectMonth.apply(this , args) ;\n\n        }\nselectNextMonth(...args){\n\n            return method_selectNextMonth.apply(this , args) ;\n\n        }\nselectPrevMonth(...args){\n\n            return method_selectPrevMonth.apply(this , args) ;\n\n        }\ndeselect(...args){\n\n            return method_deselect.apply(this , args) ;\n\n        }\n\n            \n\n        }\n\n            var_class_1609121334951 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121334951 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::calendar.month.view' ;\n                }\n\n            } ;\n\n            main = var_class_1609121334951 ;\n        \nvar_global_main_1609121334951 = main;\n\n            var_init_locked_1609121334951 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121334951(target , config) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view"
  },
  "src::month.date.last": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::month.date.last(<number> year , <number> month)",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::date.prev",
      "src::month.date.last"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,prev,getLastDate;\n    \n                    let var_init_locked_1609121335037;\n    \n                    \n\n                    function main(year , month){\n\n        \r\n/**\r\n * \r\n * 指定月份的最后日期\r\n * \r\n * @import get from date.get\r\n * \r\n * @import prev from date.prev\r\n * \r\n * @import getLastDate from .last\r\n * \r\n * @param {number} year 年份\r\n * \r\n * @param {number} month 月份\r\n * \r\n * @return {Date} 日期对象 \r\n * \r\n */\r\n\r\n let date = get({\r\n      year,\r\n      month,\r\n      day:31\r\n   }) ;\r\n\r\n if(month < 1 || month > 12){\r\n\r\n    return getLastDate(date.getFullYear() , date.getMonth() + 1) ;\r\n }\r\n\r\n while(date.getMonth() + 1 !== month){\r\n\r\n    date = prev(date) ;\r\n }\r\n\r\n return date ;\r\n\n\n    }\n    \n                    return function(year , month){\n    \n                        \n        if(!var_init_locked_1609121335037){\n\n            get = include('src::date.get');\nprev = include('src::date.prev');\ngetLastDate = include('src::month.date.last');\n\n            var_init_locked_1609121335037 = true ;\n        }\n        \n    \n                        return main.call(this , year , month) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.date.last"
  },
  "src::calendar.month": {
    "meta": "code.meta.script.function",
    "signature": "<array> src::calendar.month(<number> year , <number> month , {<number> row , <number> weekStartDay , <number> day , <boolean> ignoreNotCurrentMonthLastRow})",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::week.days",
      "src::date.prev",
      "src::date.next",
      "src::month.date.last"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,getDays,prev,next,getLastDate;\n    \n                    let var_init_locked_1609121335018;\n    \n                    \n\n                    function main(year , month , {row , weekStartDay , day , ignoreNotCurrentMonthLastRow}){\n\n        \r\n/**\r\n * \r\n * 显示以月份显示的日历数据\r\n * \r\n * @import get from date.get\r\n * \r\n * @import getDays from week.days\r\n * \r\n * @import prev from date.prev\r\n * \r\n * @import next from date.next\r\n * \r\n * @import getLastDate from month.date.last\r\n * \r\n * @param {number} year 年份\r\n * \r\n * @param {number} month 月份\r\n * \r\n * @param {object} [config = {}] 日历构造配置\r\n * \r\n * @param {number} [config.row = 6] 日历显示行数\r\n * \r\n * @param {number} [config.weekStartDay = 1] 每周从周几进行显示\r\n * \r\n * @param {number} [config.day] 指定日期所在周作为日历的第一周\r\n * \r\n * @param {boolean} [config.ignoreNotCurrentMonthLastRow = true] 是否忽略不是本月的尾行\r\n * \r\n * @return {array} 一组日历数据 \r\n * \r\n */\r\n\r\n\r\nif(!day){\r\n\r\n    day = 1 ;\r\n\r\n}\r\n\r\nlet lastDay = getLastDate(year , month).getDate() ;\r\n\r\nif(day > lastDay){\r\n\r\n    day = lastDay ;\r\n}\r\n\r\nlet date = get({\r\n    year,\r\n    month,\r\n    day\r\n}) ;\r\n\r\nlet days = getDays(weekStartDay),\r\n    prevCount = days.indexOf(date.getDay()),\r\n    nextCount = 6 - prevCount,\r\n    result = [\r\n        date\r\n    ];\r\n\r\nlet currentDate = date ;\r\n\r\nwhile(prevCount -- > 0){\r\n\r\n    result.unshift(date = prev(date)) ;\r\n}\r\n\r\ndate = currentDate ;\r\n\r\nwhile(nextCount -- > 0){\r\n\r\n    result.push(date = next(date)) ;\r\n}\r\n\r\nlet count = (row - 1) ;\r\n\r\nwhile(count -- > 0){\r\n\r\n    date = next(date) ;\r\n\r\n    if(ignoreNotCurrentMonthLastRow && date.getMonth() + 1 !== month){\r\n\r\n        break ;\r\n    }\r\n\r\n    result.push(date) ;\r\n\r\n    for(let i = 0 ; i < 6 ; i ++){\r\n\r\n        result.push(date = next(date)) ;\r\n    }\r\n\r\n    \r\n}\r\n\r\nreturn result ;\r\n\r\n\r\n\r\n\n\n    }\n    \n                    return function(year , month , {row = 6 , weekStartDay = 1 , day , ignoreNotCurrentMonthLastRow = true} = {}){\n    \n                        \n        if(!var_init_locked_1609121335018){\n\n            get = include('src::date.get');\ngetDays = include('src::week.days');\nprev = include('src::date.prev');\nnext = include('src::date.next');\ngetLastDate = include('src::month.date.last');\n\n            var_init_locked_1609121335018 = true ;\n        }\n        \n    \n                        return main.call(this , year , month , {row , weekStartDay , day , ignoreNotCurrentMonthLastRow}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month"
  },
  "src::calendar.month.view.deselect": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.deselect()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(){\n\n        \r\n/**\r\n * \r\n * 清除当前日历所有选定\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    proxy,\r\n    dates,\r\n    selectedDate\r\n } = me ;\r\n\r\n if(selectedDate){\r\n\r\n    selectedDate.selected = false ;\r\n\r\n    proxy.call('deselect' , dates.indexOf(selectedDate) , selectedDate) ;\r\n    \r\n }\r\n\r\n delete me.selectedDate ;\r\n \n\n    }\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.deselect"
  },
  "src::calendar.month.view.select": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.select(<number> year , <number> month , <number> day)",
    "standard": true,
    "importNames": [
      "src::calendar.month.view.deselect",
      "src::month.date.last",
      "src::date.get.properties"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getLastDate,get;\n    \n                    let var_init_locked_1609121335074;\n \n                    \n\n                    const var_current_scope_1609121335074 = new Map();\n    \n                    return function(year , month , day){\n    \n                        \n        if(!var_init_locked_1609121335074){\n\n            getLastDate = include('src::month.date.last');\nget = include('src::date.get.properties');\n\n            var_init_locked_1609121335074 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335074.has(this)){\n\n            var_current_scope_1609121335074.set(this , (() => {\n                const deselect = include('src::calendar.month.view.deselect').bind(this);\n\n                function main(year , month , day){\n\n        \r\n/**\r\n * \r\n * 选定\r\n * \r\n * @import deselect from .deselect scoped\r\n * \r\n * @import getLastDate from month.date.last\r\n * \r\n * @import get from date.get.properties\r\n * \r\n * @param {number} year 选定年份\r\n * \r\n * @param {number} month 选定月份\r\n * \r\n * @param {number} day 选定日期\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    proxy,\r\n    selectedDate,\r\n    dates\r\n } = me;\r\n\r\n deselect() ;\r\n\r\n let {\r\n    day:lastDay\r\n } = get(getLastDate(year , month) , [\r\n    'day'\r\n ]) ;\r\n\r\n if(day > lastDay){\r\n\r\n   day = lastDay ;\r\n }\r\n\r\n let count = -1 ;\r\n\r\n for(let date of dates){\r\n\r\n   let {\r\n      year:itemYear,\r\n      month:itemMonth,\r\n      day:itemDay\r\n   } = date ;\r\n\r\n   count ++ ;\r\n\r\n   if(itemYear === year && itemMonth === month && itemDay === day){\r\n\r\n      me.selectedDate = date ;\r\n\r\n      date.selected = true ;\r\n\r\n      proxy.call('select' , count , date) ;\r\n\r\n      break ;\r\n   }\r\n }\r\n\r\n \r\n\r\n\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335074.get(this) ;\n\n        \n    \n                        return main.call(this , year , month , day) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.select"
  },
  "src::calendar.month.view.selectMonth": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectMonth(<number> year , <number> month)",
    "standard": true,
    "importNames": [
      "src::calendar.month",
      "src::calendar.month.view.deselect",
      "src::calendar.month.view.select",
      "src::date.get.properties"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDates,getProperty;\n    \n                    let var_init_locked_1609121334996;\n \n                    \n\n                    const var_current_scope_1609121334996 = new Map();\n    \n                    return function(year , month){\n    \n                        \n        if(!var_init_locked_1609121334996){\n\n            getDates = include('src::calendar.month');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121334996 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334996.has(this)){\n\n            var_current_scope_1609121334996.set(this , (() => {\n                const deselect = include('src::calendar.month.view.deselect').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(year , month){\n\n        \r\n/**\r\n * \r\n * 选定月份\r\n * \r\n * @import getDates from ....month\r\n * \r\n * @import deselect from .deselect scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @param {number} year 年份\r\n * \r\n * @param {number} month 月份\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n    selectedDate,\r\n    weekStartDay,\r\n    viewConfig\r\n } = me;\r\n\r\n deselect() ;\r\n\r\n let fields = [\r\n        'year',\r\n        'month',\r\n        'day'\r\n     ],\r\n     dates = me.dates = getDates(year , month , {\r\n        ...viewConfig,\r\n        weekStartDay\r\n     }).map(date =>{\r\n\r\n        let {\r\n            year:itemYear,\r\n            month:itemMonth,\r\n            day\r\n        } = getProperty(date , fields),\r\n        activate = year === itemYear && month === itemMonth;\r\n        \r\n        return {\r\n            activate,\r\n            year:itemYear,\r\n            month:itemMonth,\r\n            day,\r\n            selected:false,\r\n            key:date.getTime()\r\n        } ;\r\n\r\n    }) ;\r\n\r\nme.year = year ;\r\n\r\nme.month = month ;\r\n\r\nme.proxy.call('load' , year , month , dates) ;\r\n\r\nif(selectedDate){\r\n\r\n    let {\r\n        day\r\n    } = selectedDate,\r\n    {\r\n        year,\r\n        month\r\n    } = me;\r\n\r\n    select(year , month , day) ;\r\n}\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334996.get(this) ;\n\n        \n    \n                        return main.call(this , year , month) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectMonth"
  },
  "src::calendar.month.view.constructor": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.constructor(<mixed> target , {<object> selectedDate , <number> weekStartDay , <object> viewConfig})",
    "standard": true,
    "importNames": [
      "src::object.proxy",
      "src::calendar.month.view.selectMonth",
      "src::calendar.month.view.select",
      "src::date.get.properties"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getProxy,getProperty;\n    \n                    let var_init_locked_1609121334972;\n \n                    \n\n                    const var_current_scope_1609121334972 = new Map();\n    \n                    return function(target , {selectedDate , weekStartDay = 0 , viewConfig = {}} = {}){\n    \n                        \n        if(!var_init_locked_1609121334972){\n\n            getProxy = include('src::object.proxy');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121334972 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121334972.has(this)){\n\n            var_current_scope_1609121334972.set(this , (() => {\n                const selectMonth = include('src::calendar.month.view.selectMonth').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(target , {selectedDate , weekStartDay , viewConfig}){\n\n        \r\n/**\r\n * \r\n * 构建一个月基日历\r\n * \r\n * @import getProxy from object.proxy\r\n * \r\n * @import selectMonth from .selectMonth scoped\r\n * \r\n * @import select from .select scoped\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @param {mixed} target 可提供日历显示的套件\r\n * \r\n * @param {object} [config = {}] 初始化配置\r\n * \r\n * @param {object} [config.selectedDate] 初始化选择日期\r\n * \r\n * @param {number} [config.weekStartDay = 0] 默认从星期天进行计算\r\n * \r\n * @param {object} [config.viewConfig = {}] 日历视图设置\r\n * \r\n */\r\n\r\n let me = this ;\r\n\r\n me.viewConfig = viewConfig ;\r\n\r\n me.weekStartDay = weekStartDay ;\r\n\r\n me.proxy = getProxy(target) ;\r\n\r\n me.selectedDates = [] ;\r\n\r\n me.dates = [] ;\r\n\r\n if(!selectedDate){\r\n\r\n    selectedDate = getProperty(new Date() , [\r\n        'year',\r\n        'month',\r\n        'day'\r\n    ]) ;\r\n }\r\n\r\n let {\r\n     year,\r\n     month,\r\n     day\r\n } = selectedDate ;\r\n\r\n selectMonth(year , month) ;\r\n\r\n select(year , month , day) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121334972.get(this) ;\n\n        \n    \n                        return main.call(this , target , {selectedDate , weekStartDay , viewConfig}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.constructor"
  },
  "src::month.prev": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::month.prev(<Date|object> date)",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::date.get.properties",
      "src::is.date"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,getProperty,isDate;\n    \n                    let var_init_locked_1609121335133;\n    \n                    \n\n                    function main(date){\n\n        /**\r\n * \r\n * 获得指定月份的上一个月份\r\n * \r\n * @import get from date.get\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import is.date\r\n * \r\n * @param {Date | object} date 包括月份的日期对象 \r\n * \r\n * @return {Date} 上一个月份 \r\n * \r\n */\r\n\r\n if(isDate(date)){\r\n\r\n    date = getProperty(date , [\r\n        'year',\r\n        'month'\r\n    ]) ;\r\n }\r\n\r\n let {\r\n    month,\r\n    ...other\r\n } = date ;\r\n\r\n month -- ;\r\n\r\n console.log(month , get({\r\n   month,\r\n  ...other\r\n}).toJSON()) ;\r\n\r\n return get({\r\n     month,\r\n    ...other\r\n }) ;\n\n    }\n    \n                    return function(date){\n    \n                        \n        if(!var_init_locked_1609121335133){\n\n            get = include('src::date.get');\ngetProperty = include('src::date.get.properties');\nisDate = include('src::is.date');\n\n            var_init_locked_1609121335133 = true ;\n        }\n        \n    \n                        return main.call(this , date) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.prev"
  },
  "src::calendar.month.view.selectPrevMonth": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectPrevMonth()",
    "standard": true,
    "importNames": [
      "src::month.prev",
      "src::date.get.properties",
      "src::calendar.month.view.selectMonth"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let prev,getProperty;\n    \n                    let var_init_locked_1609121335112;\n \n                    \n\n                    const var_current_scope_1609121335112 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335112){\n\n            prev = include('src::month.prev');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335112 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335112.has(this)){\n\n            var_current_scope_1609121335112.set(this , (() => {\n                const selectMonth = include('src::calendar.month.view.selectMonth').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 向上移动月份\r\n * \r\n * @import prev from month.prev\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import selectMonth from .selectMonth scoped\r\n * \r\n */\r\n\r\nlet me = this,\r\n{\r\n    year,\r\n    month\r\n} = me,\r\n{\r\n   year:selectedYear,\r\n   month:selectedMonth\r\n} = getProperty(prev({\r\n    year,\r\n    month\r\n}) , [\r\n    'year',\r\n    'month'\r\n]) ;\r\n\r\nselectMonth(selectedYear , selectedMonth) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335112.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectPrevMonth"
  },
  "src::calendar.month.view.selectLeft": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectLeft()",
    "standard": true,
    "importNames": [
      "src::is.week.day.first",
      "src::date.get",
      "src::calendar.month.view.selectPrevMonth",
      "src::date.prev",
      "src::date.get.properties",
      "src::calendar.month.view.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFirst,get,prevDate,getProperty;\n    \n                    let var_init_locked_1609121335091;\n \n                    \n\n                    const var_current_scope_1609121335091 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335091){\n\n            isFirst = include('src::is.week.day.first');\nget = include('src::date.get');\nprevDate = include('src::date.prev');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335091 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335091.has(this)){\n\n            var_current_scope_1609121335091.set(this , (() => {\n                const prevMonth = include('src::calendar.month.view.selectPrevMonth').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(){\n\n        /**\r\n * \r\n * 向左移一个格\r\n * \r\n * @import isFirst from is.week.day.first\r\n * \r\n * @import get from date.get\r\n * \r\n * @import prevMonth from .selectPrevMonth scoped\r\n * \r\n * @import prevDate from date.prev\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import select from .select scoped\r\n * \r\n */\r\n\r\n let {\r\n    selectedDate,\r\n    weekStartDay,\r\n    month\r\n } = this ;\r\n\r\n if(selectedDate){\r\n\r\n    let date = get(selectedDate) ;\r\n\r\n    if(isFirst(date , weekStartDay)){\r\n\r\n        prevMonth() ;\r\n    \r\n    }else{\r\n\r\n        date = prevDate(date) ;\r\n\r\n        let {\r\n            year:prevYearValue,\r\n            month:prevMonthValue,\r\n            day\r\n        } = getProperty(date , [\r\n            'year',\r\n            'month',\r\n            'day'\r\n        ]) ;\r\n\r\n        if(prevMonthValue !== month){\r\n\r\n            prevMonth() ;\r\n        }\r\n\r\n        select(prevYearValue , prevMonthValue , day) ;\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335091.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectLeft"
  },
  "src::month.next": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::month.next(<Date|object> date)",
    "standard": true,
    "importNames": [
      "src::date.get",
      "src::date.get.properties",
      "src::is.date"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get,getProperty,isDate;\n    \n                    let var_init_locked_1609121335192;\n    \n                    \n\n                    function main(date){\n\n        /**\r\n * \r\n * 获得指定月份的下一个月份\r\n * \r\n * @import get from date.get\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import is.date\r\n * \r\n * @param {Date | object} date 包括月份的日期对象 \r\n * \r\n * @return {Date} 下一个月份 \r\n * \r\n */\r\n\r\n if(isDate(date)){\r\n\r\n    date = getProperty(date , [\r\n        'year',\r\n        'month'\r\n    ]) ;\r\n }\r\n\r\n let {\r\n    month,\r\n    ...other\r\n } = date ;\r\n\r\n month ++ ;\r\n\r\n return get({\r\n     month,\r\n    ...other\r\n }) ;\n\n    }\n    \n                    return function(date){\n    \n                        \n        if(!var_init_locked_1609121335192){\n\n            get = include('src::date.get');\ngetProperty = include('src::date.get.properties');\nisDate = include('src::is.date');\n\n            var_init_locked_1609121335192 = true ;\n        }\n        \n    \n                        return main.call(this , date) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.next"
  },
  "src::calendar.month.view.selectNextMonth": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectNextMonth()",
    "standard": true,
    "importNames": [
      "src::month.next",
      "src::date.get.properties",
      "src::calendar.month.view.selectMonth"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let next,getProperty;\n    \n                    let var_init_locked_1609121335176;\n \n                    \n\n                    const var_current_scope_1609121335176 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335176){\n\n            next = include('src::month.next');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335176 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335176.has(this)){\n\n            var_current_scope_1609121335176.set(this , (() => {\n                const selectMonth = include('src::calendar.month.view.selectMonth').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 向下移动月份\r\n * \r\n * @import next from month.next\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import selectMonth from .selectMonth scoped\r\n * \r\n */\r\n\r\n let me = this,\r\n {\r\n     year,\r\n     month\r\n } = me,\r\n {\r\n    year:selectedYear,\r\n    month:selectedMonth\r\n } = getProperty(next({\r\n     year,\r\n     month\r\n }) , [\r\n     'year',\r\n     'month'\r\n ]) ;\r\n\r\n\r\n selectMonth(selectedYear , selectedMonth) ;\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335176.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectNextMonth"
  },
  "src::calendar.month.view.selectRight": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectRight()",
    "standard": true,
    "importNames": [
      "src::is.week.day.last",
      "src::date.get",
      "src::calendar.month.view.selectNextMonth",
      "src::date.next",
      "src::date.get.properties",
      "src::calendar.month.view.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isLast,get,nextDate,getProperty;\n    \n                    let var_init_locked_1609121335154;\n \n                    \n\n                    const var_current_scope_1609121335154 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335154){\n\n            isLast = include('src::is.week.day.last');\nget = include('src::date.get');\nnextDate = include('src::date.next');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335154 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335154.has(this)){\n\n            var_current_scope_1609121335154.set(this , (() => {\n                const nextMonth = include('src::calendar.month.view.selectNextMonth').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 向右移一个格日期\r\n * \r\n * @import isLast from is.week.day.last\r\n * \r\n * @import get from date.get\r\n * \r\n * @import nextMonth from .selectNextMonth scoped\r\n * \r\n * @import nextDate from date.next\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import select from .select scoped\r\n * \r\n */\r\n\r\n\r\nlet {\r\n    selectedDate,\r\n    weekStartDay,\r\n    month\r\n } = this ;\r\n\r\n if(selectedDate){\r\n\r\n    let date = get(selectedDate) ;\r\n\r\n    if(isLast(date , weekStartDay)){\r\n\r\n        nextMonth() ;\r\n    \r\n    }else{\r\n\r\n        date = nextDate(date) ;\r\n\r\n        let {\r\n            year:nextYearValue,\r\n            month:nextMonthValue,\r\n            day\r\n        } = getProperty(date , [\r\n            'year',\r\n            'month',\r\n            'day'\r\n        ]) ;\r\n\r\n        if(nextMonthValue !== month){\r\n\r\n            nextMonth() ;\r\n        }\r\n\r\n        select(nextYearValue , nextMonthValue , day) ;\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335154.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectRight"
  },
  "src::month.date.first": {
    "meta": "code.meta.script.function",
    "signature": "<Date> src::month.date.first(<number> year , <number> month)",
    "standard": true,
    "importNames": [
      "src::date.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1609121335254;\n    \n                    \n\n                    function main(year , month){\n\n        \r\n/**\r\n * \r\n * 指定月份的第一个日期\r\n * \r\n * @import get from date.get\r\n * \r\n * @param {number} year 年份\r\n * \r\n * @param {number} month 月份\r\n * \r\n * @return {Date} 日期对象 \r\n * \r\n */\r\n\r\n return get({\r\n      year,\r\n      month,\r\n      day:1\r\n   }) ;\n\n    }\n    \n                    return function(year , month){\n    \n                        \n        if(!var_init_locked_1609121335254){\n\n            get = include('src::date.get');\n\n            var_init_locked_1609121335254 = true ;\n        }\n        \n    \n                        return main.call(this , year , month) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.date.first"
  },
  "src::month.dates.week.first": {
    "meta": "code.meta.script.function",
    "signature": "<Date[]> src::month.dates.week.first(<number> year , <number> month , <number> weekStartDay)",
    "standard": true,
    "importNames": [
      "src::week.days",
      "src::month.date.first",
      "src::date.next"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDays,getFirstDate,next;\n    \n                    let var_init_locked_1609121335234;\n    \n                    \n\n                    function main(year , month , weekStartDay){\n\n        \r\n/**\r\n * \r\n * 获得指定月份的第一周的所有日期\r\n * \r\n * @import getDays from week.days\r\n * \r\n * @import getFirstDate from month.date.first\r\n * \r\n * @import next from date.next\r\n * \r\n * @param {number} year 年份 \r\n * \r\n * @param {number} month 月份\r\n * \r\n * @param {number} [weekStartDay = 1] 确定一周从周几进行计算\r\n * \r\n * @return {Date[]} 一周里所有的日期 \r\n * \r\n */\r\n\r\nlet days = getDays(weekStartDay),\r\n    date = getFirstDate(year , month),\r\n    firstIndex = days.indexOf(date.getDay()),\r\n    result = [\r\n        date\r\n    ];\r\n\r\nfor(let i = firstIndex + 1; i < 7 ; i ++){\r\n\r\n    result.push(date = next(date)) ;\r\n}\r\n\r\nreturn result ;\r\n\r\n\r\n\r\n \n\n    }\n    \n                    return function(year , month , weekStartDay = 1){\n    \n                        \n        if(!var_init_locked_1609121335234){\n\n            getDays = include('src::week.days');\ngetFirstDate = include('src::month.date.first');\nnext = include('src::date.next');\n\n            var_init_locked_1609121335234 = true ;\n        }\n        \n    \n                        return main.call(this , year , month , weekStartDay) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.dates.week.first"
  },
  "src::calendar.month.view.selectUp": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectUp()",
    "standard": true,
    "importNames": [
      "src::month.dates.week.first",
      "src::array.dates.includes",
      "src::date.get",
      "src::calendar.month.view.selectPrevMonth",
      "src::date.prev.week",
      "src::date.get.properties",
      "src::calendar.month.view.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getFirstWeekDates,includes,get,prevDate,getProperty;\n    \n                    let var_init_locked_1609121335211;\n \n                    \n\n                    const var_current_scope_1609121335211 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335211){\n\n            getFirstWeekDates = include('src::month.dates.week.first');\nincludes = include('src::array.dates.includes');\nget = include('src::date.get');\nprevDate = include('src::date.prev.week');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335211 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335211.has(this)){\n\n            var_current_scope_1609121335211.set(this , (() => {\n                const prevMonth = include('src::calendar.month.view.selectPrevMonth').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 向上移一格日期\r\n * \r\n * @import getFirstWeekDates from month.dates.week.first\r\n * \r\n * @import includes from array.dates.includes\r\n * \r\n * @import get from date.get\r\n * \r\n * @import prevMonth from .selectPrevMonth scoped\r\n * \r\n * @import prevDate from date.prev.week\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import select from .select scoped\r\n * \r\n */\r\n\r\nlet {\r\n    selectedDate,\r\n    weekStartDay,\r\n    year,\r\n    month\r\n } = this ;\r\n\r\n if(selectedDate){\r\n\r\n    let dates = getFirstWeekDates(year , month , weekStartDay),\r\n        date = get(selectedDate) ;\r\n\r\n    if(includes(dates , date)){\r\n\r\n        prevMonth() ;\r\n    \r\n    }else{\r\n\r\n        date = prevDate(date) ;\r\n\r\n        let {\r\n            year:prevYearValue,\r\n            month:prevMonthValue,\r\n            day\r\n        } = getProperty(date , [\r\n            'year',\r\n            'month',\r\n            'day'\r\n        ]) ;\r\n\r\n        if(prevMonthValue !== month){\r\n\r\n            prevMonth() ;\r\n        }\r\n\r\n        select(prevYearValue , prevMonthValue , day) ;\r\n    }\r\n }\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335211.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectUp"
  },
  "src::month.dates.week.last": {
    "meta": "code.meta.script.function",
    "signature": "<Date[]> src::month.dates.week.last(<number> year , <number> month , <number> weekStartDay)",
    "standard": true,
    "importNames": [
      "src::week.days",
      "src::month.date.last",
      "src::date.prev"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getDays,getLastDate,prev;\n    \n                    let var_init_locked_1609121335291;\n    \n                    \n\n                    function main(year , month , weekStartDay){\n\n        \r\n/**\r\n * \r\n * 获得指定月份的最后一周的所有日期\r\n * \r\n * @import getDays from week.days\r\n * \r\n * @import getLastDate from month.date.last\r\n * \r\n * @import prev from date.prev\r\n * \r\n * @param {number} year 年份 \r\n * \r\n * @param {number} month 月份\r\n * \r\n * @param {number} [weekStartDay = 1] 确定一周从周几进行计算\r\n * \r\n * @return {Date[]} 一周里所有的日期 \r\n * \r\n */\r\n\r\nlet days = getDays(weekStartDay),\r\n    date = getLastDate(year , month),\r\n    lastIndex = days.indexOf(date.getDay()),\r\n    result = [\r\n        date\r\n    ];\r\n\r\nfor(let i = lastIndex - 1; i >= 0 ; i --){\r\n\r\n    result.push(date = prev(date)) ;\r\n}\r\n\r\nreturn result ;\n\n    }\n    \n                    return function(year , month , weekStartDay = 1){\n    \n                        \n        if(!var_init_locked_1609121335291){\n\n            getDays = include('src::week.days');\ngetLastDate = include('src::month.date.last');\nprev = include('src::date.prev');\n\n            var_init_locked_1609121335291 = true ;\n        }\n        \n    \n                        return main.call(this , year , month , weekStartDay) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "month.dates.week.last"
  },
  "src::calendar.month.view.selectDown": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::calendar.month.view.selectDown()",
    "standard": true,
    "importNames": [
      "src::month.dates.week.last",
      "src::array.dates.includes",
      "src::date.get",
      "src::calendar.month.view.selectNextMonth",
      "src::date.next.week",
      "src::date.get.properties",
      "src::calendar.month.view.select"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let getLastWeekDates,includes,get,nextDate,getProperty;\n    \n                    let var_init_locked_1609121335272;\n \n                    \n\n                    const var_current_scope_1609121335272 = new Map();\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335272){\n\n            getLastWeekDates = include('src::month.dates.week.last');\nincludes = include('src::array.dates.includes');\nget = include('src::date.get');\nnextDate = include('src::date.next.week');\ngetProperty = include('src::date.get.properties');\n\n            var_init_locked_1609121335272 = true ;\n        }\n        \n    \n                        \n        \n        if(!var_current_scope_1609121335272.has(this)){\n\n            var_current_scope_1609121335272.set(this , (() => {\n                const nextMonth = include('src::calendar.month.view.selectNextMonth').bind(this);\nconst select = include('src::calendar.month.view.select').bind(this);\n\n                function main(){\n\n        \r\n/**\r\n * \r\n * 向下移一格日期\r\n * \r\n * @import getLastWeekDates from month.dates.week.last\r\n * \r\n * @import includes from array.dates.includes\r\n * \r\n * @import get from date.get\r\n * \r\n * @import nextMonth from .selectNextMonth scoped\r\n * \r\n * @import nextDate from date.next.week\r\n * \r\n * @import getProperty from date.get.properties\r\n * \r\n * @import select from .select scoped\r\n * \r\n */\r\n\r\n let {\r\n    selectedDate,\r\n    weekStartDay,\r\n    year,\r\n    month\r\n } = this ;\r\n\r\n if(selectedDate){\r\n\r\n    let dates = getLastWeekDates(year , month , weekStartDay),\r\n        date = get(selectedDate) ;\r\n\r\n    if(includes(dates , date)){\r\n\r\n        nextMonth() ;\r\n    \r\n    }else{\r\n\r\n        date = nextDate(date) ;\r\n\r\n        let {\r\n            year:nextYearValue,\r\n            month:nextMonthValue,\r\n            day\r\n        } = getProperty(date , [\r\n            'year',\r\n            'month',\r\n            'day'\r\n        ]) ;\r\n\r\n        if(nextMonthValue !== month){\r\n\r\n            nextMonth() ;\r\n        }\r\n\r\n        select(nextYearValue , nextMonthValue , day) ;\r\n    }\r\n }\r\n\r\n\n\n    }\n\n                return main ;\n\n            })());\n        }\n\n        const main = var_current_scope_1609121335272.get(this) ;\n\n        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "calendar.month.view.selectDown"
  },
  "src::miniprogram.storage": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::miniprogram.storage(<mixed> data)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    let var_class_1609121335307;\n    \n                    let var_once_value_1609121335307;\n\n                    let var_global_main_1609121335307 ;\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1609121335307){\n\n            \n\n            \r\n/**\r\n * \r\n * 存储器\r\n * \r\n * @param {mixed} data 参数说明\r\n * \r\n * @return {mixed} 返回说明 \r\n * \r\n * @once\r\n * \r\n */\r\n\r\n class main{\r\n\r\n    setItem(name , value){\r\n\r\n        wx.setStorageSync(name , value) ;\r\n    }\r\n\r\n    getItem(name){\r\n\r\n        return wx.getStorageSync(name) ;\r\n    }\r\n\r\n    removeItem(name){\r\n\r\n        wx.removeStorageSync(name) ;\r\n    }\r\n\r\n    clear(){\r\n\r\n        wx.clearStorageSync() ;\r\n    }\r\n }\n\n            var_class_1609121335307 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121335307 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::miniprogram.storage' ;\n                }\n\n            } ;\n\n            main = var_class_1609121335307 ;\n        \nvar_global_main_1609121335307 = main;\n\n            var_init_locked_1609121335307 = true ;\n        }\n        \n    \n                        \n        if(var_once_value_1609121335307){\n\n            return var_once_value_1609121335307 ;\n\n        }\n        return var_once_value_1609121335307 = new var_global_main_1609121335307(data) ;\n        \n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "miniprogram.storage"
  },
  "src::number.format": {
    "meta": "code.meta.script.function",
    "signature": "<number> src::number.format(<mixed> data , <number> count)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , count){\n\n        \r\n/**\r\n * \r\n * 格式化数字\r\n * \r\n * @param {mixed} data 数值\r\n * \r\n * @param {number} count 数值\r\n * \r\n * @return {number} 格式化后的数字字符串 \r\n * \r\n */\r\n\r\n return String(data).padStart(count , '0') ;\n\n    }\n    \n                    return function(data , count){\n    \n                        \n    \n                        return main.call(this , data , count) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "number.format"
  },
  "src::log.node": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::log.node(<string> path)",
    "standard": true,
    "importNames": [
      "src::date.format",
      "src::file.stream.write"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let format,createStream;\n    \n                    let var_init_locked_1609121335344;\n    \n                    let var_class_1609121335344;\n    \n                    \n\n                    let var_global_main_1609121335344 ;\n    \n                    return function(path){\n    \n                        \n        if(!var_init_locked_1609121335344){\n\n            format = include('src::date.format');\ncreateStream = include('src::file.stream.write');\n\n            \r\n/**\r\n * \r\n * Node 版 日志\r\n *\r\n * @import format from date.format\r\n * \r\n * @import createStream from file.stream.write\r\n * \r\n * @param {string} path 日志路径\r\n * \r\n */\r\n\r\n const {\r\n    Console\r\n } = require('console'),\r\n {\r\n    join\r\n } = require('path');\r\n\r\n class main{\r\n\r\n    constructor(path){\r\n\r\n        this.console = new Console(createStream(join(path , `${format(new Date() , 'YYYYMMDD')}.log`) , {\r\n            flags:'a'\r\n        })) ;\r\n    }\r\n\r\n    log(...args){\r\n\r\n        doMethod.call(this , 'log' , ...args) ;\r\n    }\r\n }\r\n\r\n function doMethod(method , ...args){\r\n\r\n    let {\r\n        console\r\n    } = this ;\r\n\r\n    console[method](format(new Date() , 'YYYY-MM-DD HH:mm:ss') , ...args) ;\r\n }\n\n            var_class_1609121335344 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121335344 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::log.node' ;\n                }\n\n            } ;\n\n            main = var_class_1609121335344 ;\n        \nvar_global_main_1609121335344 = main;\n\n            var_init_locked_1609121335344 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121335344(path) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "log.node"
  },
  "src::process.spawn": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::process.spawn(<object> options)",
    "standard": true,
    "importNames": [
      "src::process",
      "src::event.listener.add",
      "src::event.listener.remove.all"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Process,add,removeAll;\n    \n                    let var_init_locked_1609121335371;\n    \n                    let var_class_1609121335371;\n    \n                    \n\n                    let var_global_main_1609121335371 ;\n    \n                    return function(options){\n    \n                        \n        if(!var_init_locked_1609121335371){\n\n            Process = include('src::process')();\nadd = include('src::event.listener.add');\nremoveAll = include('src::event.listener.remove.all');\n\n            \r\n/**\r\n * \r\n * 基于 spawn 进程实现\r\n * \r\n * @import Process from ..process value\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @import removeAll from event.listener.remove.all\r\n * \r\n * @param {object} options 配置\r\n * \r\n */\r\n\r\n const {\r\n    spawn\r\n } = require('child_process') ;\r\n\r\n class main extends Process{\r\n\r\n    doStart(){\r\n\r\n        let me = this,\r\n            {\r\n                command\r\n            } = me.options,\r\n            process = spawn(command),\r\n            {\r\n                stdout\r\n            } = process;\r\n\r\n        add(stdout , 'data' , 'onStart' , {\r\n            scope:me,\r\n            once:true\r\n        }) ;\r\n\r\n        add(process , {\r\n            exit:'onEnd',\r\n            error:'onEnd',\r\n            scope:me\r\n        }) ;\r\n\r\n        me.process = process ;\r\n    }\r\n\r\n    get started(){\r\n\r\n        return this.hasOwnProperty('process') ;\r\n    }\r\n\r\n    onEnd(code , signal){\r\n\r\n        let me = this,\r\n        {\r\n            process\r\n        } = me;\r\n\r\n        removeAll(process) ;\r\n\r\n        removeAll(process.stdout) ;\r\n\r\n        delete me.process ;\r\n\r\n        super.onEnd(signal === 'NORMAL') ;\r\n    }\r\n\r\n    doEnd(){\r\n\r\n        let {\r\n            process\r\n        } = this ;\r\n\r\n        process.kill('NORMAL') ;\r\n    }\r\n }\n\n            var_class_1609121335371 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121335371 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::process.spawn' ;\n                }\n\n            } ;\n\n            main = var_class_1609121335371 ;\n        \nvar_global_main_1609121335371 = main;\n\n            var_init_locked_1609121335371 = true ;\n        }\n        \n    \n                        return new var_global_main_1609121335371(options) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "process.spawn"
  },
  "src::process": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::process()",
    "standard": true,
    "importNames": [
      "src::mixin.observable",
      "src::event.listener.add"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let Observable,add;\n    \n                    let var_init_locked_1609121335392;\n    \n                    let var_class_1609121335392;\n    \n                    \n\n                    let var_global_main_1609121335392 ;\n    \n                    return function(){\n    \n                        \n        if(!var_init_locked_1609121335392){\n\n            Observable = include('src::mixin.observable');\nadd = include('src::event.listener.add');\n\n            \r\n/**\r\n * \r\n * 进程管理器\r\n * \r\n * @import Observable from mixin.observable\r\n * \r\n * @import add from event.listener.add\r\n * \r\n * @class\r\n * \r\n */\r\n\r\n class main extends mixins({\r\n    mixins:[\r\n       Observable\r\n    ]\r\n}){\r\n\r\n    constructor(options = {}){\r\n\r\n        super(options) ;\r\n\r\n        let me = this ;\r\n\r\n        me.options = options ;\r\n\r\n        let {\r\n            autoStart = true,\r\n            reStart = true,\r\n        } = options ;\r\n\r\n        if(autoStart){\r\n\r\n            me.start() ;\r\n        }\r\n\r\n        if(reStart){\r\n\r\n            add(me , 'crash' , () => me.start()) ;\r\n        }\r\n    }\r\n\r\n    get started(){\r\n\r\n        return true ;\r\n    }\r\n\r\n    onStart(){\r\n\r\n        this.fireEvent('start') ;\r\n    }\r\n\r\n    onEnd(isNormal){\r\n\r\n        let me = this ;\r\n\r\n        if(isNormal){\r\n\r\n            me.fireEvent('end') ;\r\n        \r\n        }else{\r\n\r\n            me.fireEvent('crash') ;\r\n        }\r\n\r\n        me.fireEvent('exit') ;\r\n    }\r\n\r\n    start(){\r\n\r\n        let me = this,\r\n        {\r\n            started\r\n        } = me ;\r\n\r\n        if(!started){\r\n\r\n            me.doStart() ;\r\n        }\r\n    }\r\n\r\n    doStart(){\r\n\r\n\r\n    }\r\n\r\n    end(){\r\n\r\n        let me = this,\r\n        {\r\n            started\r\n        } = me;\r\n\r\n        if(started){\r\n\r\n            me.doEnd() ;\r\n        }        \r\n    }\r\n\r\n    doEnd(){\r\n\r\n\r\n    }\r\n }\n\n            var_class_1609121335392 = class extends main{\n\n                static get __ZBEE_IS_CLASS__(){\n\n                    return true ;\n                }\n\n\n                get __ZBEE_CLASS__(){\n\n                    return true ;\n                }\n\n                get __ZBEE_CURRENT_CLASS__(){\n\n                    return var_class_1609121335392 ;\n                }\n\n                get __ZBEE_CLASS_NAME__(){\n\n                    return 'src::process' ;\n                }\n\n            } ;\n\n            main = var_class_1609121335392 ;\n        \nvar_global_main_1609121335392 = main;\n\n            var_init_locked_1609121335392 = true ;\n        }\n        \n    \n                        return var_global_main_1609121335392 ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "process"
  },
  "src::vue.component": {
    "meta": "code.meta.script.function",
    "signature": "<object> src::vue.component(<string> name , <object> config , {<object> methods , <function> mounted , <function> destroyed , <object> computed , <function> data})",
    "standard": true,
    "importNames": [
      "src::is.function"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isFunction;\n    \n                    let var_init_locked_1609121335419;\n    \n                    \n\n                    function main(name , config , {methods , mounted , destroyed , computed , data}){\n\n        \r\n/**\r\n * \r\n * Vue 组件\r\n * \r\n * @import is.function\r\n * \r\n * @param {string} name 属性名称\r\n * \r\n * @param {object} config 组件原始设置\r\n * \r\n * @param {object} extend 组件扩展配置\r\n * \r\n * @param {object} [extend.methods = {}] 组件方法配置\r\n * \r\n * @param {function} [extend.mounted = () => {}] 组件初始时调用\r\n * \r\n * @param {function} [extend.destroyed = () => {}] 组件销毁时调用\r\n * \r\n * @param {object} [extend.computed = {}] 组件计算属性\r\n * \r\n * @param {function} [extend.data = () => {return {};}] 组件初始化数据结构 \r\n * \r\n * @return {object} Vue 组件配置\r\n * \r\n */\r\n\r\nconst {\r\n    assign\r\n } = Object ;\r\n\r\n let {\r\n    mounted:originMounted,\r\n    destroyed:originDestroyed,\r\n    computed:originComputed = {},\r\n    methods:originMethods = {},\r\n    data:originData,\r\n    ...options\r\n } = config,\r\n componentConfig = options[name];\r\n\r\n delete options[name] ;\r\n\r\nmethods = assign({} , methods , originMethods),\r\ncomputed = assign({} , computed , originComputed);\r\n\r\n\r\nif(isFunction(originData)){\r\n\r\n   let innerData = data ;\r\n\r\n   data = function(){\r\n\r\n    let me = this ;\r\n\r\n    return Object.assign(originData.call(me) || {} , innerData.call(me)) ;\r\n\r\n   } ;\r\n\r\n}\r\n\r\nlet innerMounted = mounted ;\r\n\r\nif(originMounted){\r\n\r\n    mounted = function(){\r\n\r\n        let me = this ;\r\n\r\n        innerMounted.call(me , componentConfig) ;\r\n\r\n        originMounted.call(me) ;\r\n    } ;\r\n\r\n}else{\r\n\r\n   mounted = function(){\r\n\r\n      innerMounted.call(this , componentConfig) ;\r\n\r\n   } ;\r\n}\r\n\r\nlet innerDestroyed = destroyed ;\r\n\r\nif(originDestroyed){\r\n\r\n   destroyed = function(){\r\n\r\n      let me = this ;\r\n\r\n      innerDestroyed.call(me , componentConfig) ;\r\n\r\n      originDestroyed.call(me) ;\r\n\r\n   } ;\r\n\r\n}else{\r\n\r\n   destroyed = function(){\r\n\r\n      innerDestroyed.call(this , componentConfig) ;\r\n   } ;\r\n}\r\n\r\nreturn {\r\n    ...options,\r\n    data,\r\n    computed,\r\n    mounted,\r\n    destroyed,\r\n    methods\r\n} ;\r\n\n\n    }\n    \n                    return function(name , config , {methods = {} , mounted = () => {} , destroyed = () => {} , computed = {} , data = () => {return {};}}){\n    \n                        \n        if(!var_init_locked_1609121335419){\n\n            isFunction = include('src::is.function');\n\n            var_init_locked_1609121335419 = true ;\n        }\n        \n    \n                        return main.call(this , name , config , {methods , mounted , destroyed , computed , data}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "vue.component"
  },
  "css::reset.viewport": {
    "meta": "code.meta.scss",
    "signature": "<void> css::reset.viewport()",
    "standard": true,
    "importNames": [
      "css::reset"
    ],
    "dependentModules": {},
    "data": "() => `@import \"../css/reset.scss\" ;\r\n\r\nhtml,body {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}`",
    "folder": "css",
    "name": "reset.viewport"
  },
  "css::reset": {
    "meta": "code.meta.scss",
    "signature": "<void> css::reset()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `$css-reset-font-family:\"Helvetica Neue\", HelveticaNeue, \"Helvetica-Neue\", Helvetica, \"BBAlpha Sans\", sans-serif !default;\r\n\r\nhtml, body {\r\n    font-family: $css-reset-font-family;\r\n    font-weight: normal;\r\n    text-size-adjust: none;\r\n    margin: 0;\r\n    cursor: default;\r\n}\r\n\r\nbody, div, dl, dt, dd, ul, ol, li, h1, h2, h3,\r\nh4, h5, h6, pre, code, form, fieldset, legend,\r\ninput, textarea, p, blockquote, th, td {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\n\r\nfieldset, img {\r\n    border: 0;\r\n}\r\n\r\naddress, caption, cite, code, dfn, em, strong, th, var {\r\n    font-style: normal;\r\n    font-weight: normal;\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\ncaption, th {\r\n    text-align: left;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n    font-size: 100%;\r\n    font-weight: normal;\r\n}\r\n\r\nq:before,\r\nq:after {\r\n    content: '';\r\n}\r\n\r\nabbr, acronym {\r\n    border: 0;\r\n    font-variant: normal;\r\n}\r\n\r\nsup {\r\n    vertical-align: text-top;\r\n}\r\n\r\nsub {\r\n    vertical-align: text-bottom;\r\n}\r\n\r\ninput, textarea, select {\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    font-weight: inherit;\r\n}\r\n\r\n*:focus {\r\n    outline: none;\r\n}\r\n\r\n*, *:after, *:before {\r\n    box-sizing: border-box;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-drag: none;\r\n    user-select: none;\r\n    touch-action: none;\r\n}\r\n\r\ninput, textarea {\r\n    user-select: text;\r\n}`",
    "folder": "css",
    "name": "reset"
  },
  "css::layout.center": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.center()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.xy-layout-center,.css-layout-center{\n    &{\r\n    position: relative;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content: center;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.center"
  },
  "css::layout.fit.sized": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.fit.sized()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.xy-layout-fit-sized,.css-layout-fit-sized{\n    &{\r\n    position: absolute;\r\n    top:0;\r\n    bottom:0;\r\n    left:0;\r\n    right:0;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.fit.sized"
  },
  "css::layout.fit.unsized": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.fit.unsized()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.xy-layout-fit-unsized,.css-layout-fit-unsized{\n    &{\r\n    position: relative;\r\n    width:100%;\r\n    height:100%;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.fit.unsized"
  },
  "css::layout.flex": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.flex()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `$css-layout-flex-max:3 !default;\r\n\r\n@for $flex from 1 through $css-layout-flex-max{\r\n    .xy-layout-flex-#{$flex}{\r\n        flex:$flex;\r\n    }\r\n}`",
    "folder": "css",
    "name": "layout.flex"
  },
  "css::layout.horizontal": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.horizontal()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.xy-layout-horizontal,.css-layout-horizontal{\n    &{\r\n    position: relative;\r\n    display:flex;\r\n    flex-direction: row;\r\n    align-items:stretch;\r\n    justify-content: flex-start;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.horizontal"
  },
  "css::layout.vertical": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.vertical()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.xy-layout-vertical,.css-layout-vertical{\n    &{\r\n    position: relative;\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items:stretch;\r\n    justify-content: flex-start;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.vertical"
  },
  "css::mindmap": {
    "meta": "code.meta.scss",
    "signature": "<void> css::mindmap()",
    "standard": true,
    "importNames": [
      "css::layout.fit.unsized"
    ],
    "dependentModules": {},
    "data": "() => `@import \"../css/layout.fit.unsized.scss\" ;\r\n\r\n.xy-mindmap,.css-mindmap {\r\n\r\n& {\r\n    @extend .css-layout-fit-unsized ;\r\n    position: relative;\r\n    overflow:hidden;\r\n    touch-action: none;\r\n    > .texts{\r\n        visibility: hidden;\r\n        > .text{\r\n            display: inline-flex;\r\n        }\r\n    }\r\n    > .nodes , > .lines {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n    }\r\n\r\n    > .nodes{\r\n        > .node {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            transform: translate3d(0, 0, 0);\r\n        }\r\n    }\r\n}\r\n}`",
    "folder": "css",
    "name": "mindmap"
  }
}