
<?xml?>
<classes>

    <class name="src::is.type" >
        <![CDATA[(() =>{
    
    
    
    
    
    

    
    function main(data,type){

        

 return typeof data === type ;
    }
    return function(data,type){
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data,type) ;
    }
    

})() ;]]>
    </class>

    <class name="src::is.array" >
        <![CDATA[(() =>{
    let isType;
    
    
    
    
    
    let __first_executed_1541049549322__ = false ;
    

    
    function main(data){

        

 return Array.isArray(data) ;
    }
    return function(data){
        
        if(!__first_executed_1541049549322__){
            isType = include('is.type');
            
            __first_executed_1541049549322__ = true ;
        }
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data) ;
    }
    

})() ;]]>
    </class>

    <class name="is.type" >
        <![CDATA[(() =>{
    
    
    
    
    
    

    
    function main(data,type){

        

 return typeof data === type ;
    }
    return function(data,type){
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data,type) ;
    }
    

})() ;]]>
    </class>

    <class name="src::is.empty" >
        <![CDATA[(() =>{
    let isArray;
    
    
    
    
    
    let __first_executed_1541049549322__ = false ;
    

    
    function main(data,allowEmptyString){

        

return (data == null) || (!allowEmptyString ? data === '' : false) || (isArray(data) && data.length === 0);
    }
    return function(data,allowEmptyString = false){
        
        if(!__first_executed_1541049549322__){
            isArray = include('is.array');
            
            __first_executed_1541049549322__ = true ;
        }
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data,allowEmptyString) ;
    }
    

})() ;]]>
    </class>

    <class name="is.array" >
        <![CDATA[(() =>{
    let isType;
    
    
    
    
    
    let __first_executed_1541049549322__ = false ;
    

    
    function main(data){

        

 return Array.isArray(data) ;
    }
    return function(data){
        
        if(!__first_executed_1541049549322__){
            isType = include('is.type');
            
            __first_executed_1541049549322__ = true ;
        }
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data) ;
    }
    

})() ;]]>
    </class>

    <class name="src::is.string" >
        <![CDATA[(() =>{
    let isType;
    
    
    
    
    
    let __first_executed_1541049549323__ = false ;
    

    
    function main(data){

        

return isType(data , 'string') ;
    }
    return function(data){
        
        if(!__first_executed_1541049549323__){
            isType = include('is.type');
            
            __first_executed_1541049549323__ = true ;
        }
        
        
        return  main.call((function(){

            let me = this,
                target;

            if(typeof global !== 'undefined'){

                target = global ;
            
            }else{

                target = window ;
            }

            return me === target ? main : me ;

        }).call(this) , data) ;
    }
    

})() ;]]>
    </class>


</classes>