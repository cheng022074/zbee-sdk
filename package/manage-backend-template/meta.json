{
  "css::reset.viewport": {
    "meta": "code.meta.scss",
    "signature": "<void> css::reset.viewport()",
    "standard": true,
    "importNames": [
      "css::reset"
    ],
    "dependentModules": {},
    "data": "() => `@import \"../css/reset.scss\" ;\r\n\r\nhtml,body {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}`",
    "folder": "css",
    "name": "reset.viewport"
  },
  "css::reset": {
    "meta": "code.meta.scss",
    "signature": "<void> css::reset()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `$css-reset-font-family:\"Helvetica Neue\", HelveticaNeue, \"Helvetica-Neue\", Helvetica, \"BBAlpha Sans\", sans-serif !default;\r\n\r\nhtml, body {\r\n    font-family: $css-reset-font-family;\r\n    font-weight: normal;\r\n    text-size-adjust: none;\r\n    margin: 0;\r\n    cursor: default;\r\n}\r\n\r\nbody, div, dl, dt, dd, ul, ol, li, h1, h2, h3,\r\nh4, h5, h6, pre, code, form, fieldset, legend,\r\ninput, textarea, p, blockquote, th, td {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\n\r\nfieldset, img {\r\n    border: 0;\r\n}\r\n\r\naddress, caption, cite, code, dfn, em, strong, th, var {\r\n    font-style: normal;\r\n    font-weight: normal;\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n}\r\n\r\ncaption, th {\r\n    text-align: left;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n    font-size: 100%;\r\n    font-weight: normal;\r\n}\r\n\r\nq:before,\r\nq:after {\r\n    content: '';\r\n}\r\n\r\nabbr, acronym {\r\n    border: 0;\r\n    font-variant: normal;\r\n}\r\n\r\nsup {\r\n    vertical-align: text-top;\r\n}\r\n\r\nsub {\r\n    vertical-align: text-bottom;\r\n}\r\n\r\ninput, textarea, select {\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    font-weight: inherit;\r\n}\r\n\r\n*:focus {\r\n    outline: none;\r\n}\r\n\r\n*, *:after, *:before {\r\n    box-sizing: border-box;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-drag: none;\r\n    user-select: none;\r\n    touch-action: none;\r\n}\r\n\r\ninput, textarea {\r\n    user-select: text;\r\n}`",
    "folder": "css",
    "name": "reset"
  },
  "css::container": {
    "meta": "code.meta.scss",
    "signature": "<void> css::container()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-container,.css-container{\n    &{\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n}`",
    "folder": "css",
    "name": "container"
  },
  "css::component": {
    "meta": "code.meta.scss",
    "signature": "<void> css::component()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-component,.css-component{\n    &{\r\n    position: relative;\r\n}\r\n}`",
    "folder": "css",
    "name": "component"
  },
  "css::layout.center": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.center()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-layout-center,.css-layout-center{\n    &{\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content: center;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.center"
  },
  "css::layout.fit.sized": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.fit.sized()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-layout-fit-sized,.css-layout-fit-sized{\n    &{\r\n    position: absolute;\r\n    top:0;\r\n    bottom:0;\r\n    left:0;\r\n    right:0;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.fit.sized"
  },
  "css::layout.fit.unsized": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.fit.unsized()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-layout-fit-unsized,.css-layout-fit-unsized{\n    &{\r\n    width:100%;\r\n    height:100%;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.fit.unsized"
  },
  "css::layout.flex": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.flex()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `$css-layout-flex-max:3 !default;\r\n\r\n@for $flex from 1 through $css-layout-flex-max{\r\n    .mb-layout-flex-#{$flex}{\r\n        flex:$flex;\r\n    }\r\n}`",
    "folder": "css",
    "name": "layout.flex"
  },
  "css::layout.horizontal": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.horizontal()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-layout-horizontal,.css-layout-horizontal{\n    &{\r\n    display:flex;\r\n    flex-direction: row;\r\n    align-items:stretch;\r\n    justify-content: flex-start;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.horizontal"
  },
  "css::layout.vertical": {
    "meta": "code.meta.scss",
    "signature": "<void> css::layout.vertical()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "() => `.mb-layout-vertical,.css-layout-vertical{\n    &{\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items:stretch;\r\n    justify-content: flex-start;\r\n}\r\n}`",
    "folder": "css",
    "name": "layout.vertical"
  },
  "src::function.buffer": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.buffer(<mixed> fn , {<mixed> scope , <mixed> buffer})",
    "standard": true,
    "importNames": [
      "src::function.get"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let get;\n    \n                    let var_init_locked_1611469330581;\n    \n                    \n\n                    function main(fn , {scope , buffer}){\n\n        \r\n/**\r\n * \r\n * 实现懒执行模式函数\r\n * \r\n * @import get from function.get\r\n * \r\n * @param {mixed} fn 函数\r\n * \r\n * @param {object} [config = {}] 函数配置\r\n * \r\n * @param {mixed} [config.scope] 函数作用域\r\n * \r\n * @param {mixed} [config.buffer = 0] 缓存时间\r\n * \r\n * \r\n */\r\n\r\nlet bufferId ;\r\n\r\nreturn (...args) =>{\r\n\r\n    if(bufferId){\r\n\r\n        clearTimeout(bufferId) ;\r\n\r\n        bufferId = null ;\r\n    }\r\n\r\n    bufferId = setTimeout(() => {\r\n\r\n        get(fn , scope)(...args) ;\r\n\r\n        bufferId = null ;\r\n\r\n    } , buffer) ;\r\n} ;\n\n    }\n    \n                    return function(fn , {scope , buffer = 0} = {}){\n    \n                        \n        if(!var_init_locked_1611469330581){\n\n            get = include('src::function.get');\n\n            var_init_locked_1611469330581 = true ;\n        }\n        \n    \n                        return main.call(this , fn , {scope , buffer}) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.buffer"
  },
  "src::is.type": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.type(<mixed> data , <string> type)",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    function main(data , type){\n\n        /**\r\n * \r\n * 对于 typeof 的简单封装\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @param {string} type 检验数据类型\r\n * \r\n * @return {boolean} 如果检验数据的数据类型与检验数据类型一致，则返回 true，否则返回 false \r\n * \r\n */\r\n\r\n return typeof data === type ;\n\n    }\n    \n                    return function(data , type){\n    \n                        \n    \n                        return main.call(this , data , type) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.type"
  },
  "src::is.string": {
    "meta": "code.meta.script.function",
    "signature": "<boolean> src::is.string(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1611469330630;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为字符串类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {boolean} 如果给定值为字符串类型则返回 true , 否则返回 false \r\n * \r\n */\r\n\r\nreturn isType(data , 'string') ;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1611469330630){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1611469330630 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.string"
  },
  "src::is.function": {
    "meta": "code.meta.script.function",
    "signature": "<mixed> src::is.function(<mixed> data)",
    "standard": true,
    "importNames": [
      "src::is.type"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isType;\n    \n                    let var_init_locked_1611469330665;\n    \n                    \n\n                    function main(data){\n\n        /**\r\n * \r\n * 判定数据是否为函数类型\r\n * \r\n * @import is.type\r\n * \r\n * @param {mixed} data 检验数据\r\n * \r\n * @return {mixed} 如果给定值为函数类型则返回 true , 否则返回 false\r\n * \r\n */\r\n\r\nreturn isType(data , 'function') && !data.__ZBEE_IS_CLASS__;\n\n    }\n    \n                    return function(data){\n    \n                        \n        if(!var_init_locked_1611469330665){\n\n            isType = include('src::is.type');\n\n            var_init_locked_1611469330665 = true ;\n        }\n        \n    \n                        return main.call(this , data) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "is.function"
  },
  "src::function.empty": {
    "meta": "code.meta.script.function",
    "signature": "<void> src::function.empty()",
    "standard": true,
    "importNames": [],
    "dependentModules": {},
    "data": "(() =>{\n\n                    \n    \n                    \n    \n                    \n\n                    /**\r\n * \r\n * 返回一个空函数\r\n * \r\n * @scoped\r\n * \r\n */\r\n\r\nconst emptyFn = () =>{\r\n} ;\r\n\r\nfunction main(){\r\n\r\n    return emptyFn ;\r\n}\n    \n                    return function(){\n    \n                        \n    \n                        return main.call(this ) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.empty"
  },
  "src::function.get": {
    "meta": "code.meta.script.function",
    "signature": "<function> src::function.get(<string|function> fn , <mixed> scope)",
    "standard": true,
    "importNames": [
      "src::is.string",
      "src::is.function",
      "src::function.empty"
    ],
    "dependentModules": {},
    "data": "(() =>{\n\n                    let isString,isFunction,empty;\n    \n                    let var_init_locked_1611469330612;\n    \n                    \n\n                    function main(fn , scope){\n\n        /**\r\n * \r\n * 获得一个函数引用\r\n * \r\n * @import is.string\r\n * \r\n * @import is.function\r\n * \r\n * @import empty from function.empty\r\n * \r\n * @param {string | function} fn 函数描述\r\n * \r\n * @param {mixed} [scope] 函数作用域\r\n * \r\n * @return {function} 函数引用本身 \r\n * \r\n */\r\n\r\nif(isString(fn)){\r\n\r\n    if(scope && fn in scope){\r\n\r\n        fn = scope[fn] ;\r\n\r\n    }else{\r\n\r\n        try{\r\n\r\n            fn = include(fn) ;\r\n        \r\n        }catch(err){\r\n\r\n\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nif(isFunction(fn)){\r\n\r\n    if(scope){\r\n\r\n        return fn.bind(scope) ;\r\n    }\r\n\r\n    return fn ;\r\n}\r\n\r\nreturn empty() ;\n\n    }\n    \n                    return function(fn , scope){\n    \n                        \n        if(!var_init_locked_1611469330612){\n\n            isString = include('src::is.string');\nisFunction = include('src::is.function');\nempty = include('src::function.empty');\n\n            var_init_locked_1611469330612 = true ;\n        }\n        \n    \n                        return main.call(this , fn , scope) ;\n                    } ;\n    \n                })()",
    "folder": "src",
    "name": "function.get"
  }
}